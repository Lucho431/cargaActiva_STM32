
cargaActiva_STM32F303K8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004518  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080046a0  080046a0  000146a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d8  080046d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080046d8  080046d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d8  080046d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001e4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135d4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002759  00000000  00000000  00033610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00035d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  00036e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c293  00000000  00000000  00037df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001687c  00000000  00000000  0005408b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a932b  00000000  00000000  0006a907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00113c32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004680  00000000  00000000  00113c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004688 	.word	0x08004688

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004688 	.word	0x08004688

080001c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <MX_ADC1_Init+0x90>)
 80001da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001e0:	4b1d      	ldr	r3, [pc, #116]	; (8000258 <MX_ADC1_Init+0x90>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001e6:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <MX_ADC1_Init+0x90>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001ec:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <MX_ADC1_Init+0x90>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <MX_ADC1_Init+0x90>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <MX_ADC1_Init+0x90>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000200:	4b15      	ldr	r3, [pc, #84]	; (8000258 <MX_ADC1_Init+0x90>)
 8000202:	2200      	movs	r2, #0
 8000204:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000206:	4b14      	ldr	r3, [pc, #80]	; (8000258 <MX_ADC1_Init+0x90>)
 8000208:	2201      	movs	r2, #1
 800020a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <MX_ADC1_Init+0x90>)
 800020e:	2200      	movs	r2, #0
 8000210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000214:	4b10      	ldr	r3, [pc, #64]	; (8000258 <MX_ADC1_Init+0x90>)
 8000216:	2204      	movs	r2, #4
 8000218:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <MX_ADC1_Init+0x90>)
 800021c:	2200      	movs	r2, #0
 800021e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000220:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <MX_ADC1_Init+0x90>)
 8000222:	2200      	movs	r2, #0
 8000224:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000226:	480c      	ldr	r0, [pc, #48]	; (8000258 <MX_ADC1_Init+0x90>)
 8000228:	f000 fcb8 	bl	8000b9c <HAL_ADC_Init>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000232:	f000 f994 	bl	800055e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4619      	mov	r1, r3
 800023e:	4806      	ldr	r0, [pc, #24]	; (8000258 <MX_ADC1_Init+0x90>)
 8000240:	f000 fe3e 	bl	8000ec0 <HAL_ADCEx_MultiModeConfigChannel>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800024a:	f000 f988 	bl	800055e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800024e:	bf00      	nop
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000028 	.word	0x20000028

0800025c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b08a      	sub	sp, #40	; 0x28
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
 8000272:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800027c:	d124      	bne.n	80002c8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <HAL_ADC_MspInit+0x74>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <HAL_ADC_MspInit+0x74>)
 8000284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <HAL_ADC_MspInit+0x74>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000292:	613b      	str	r3, [r7, #16]
 8000294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <HAL_ADC_MspInit+0x74>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <HAL_ADC_MspInit+0x74>)
 800029c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <HAL_ADC_MspInit+0x74>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_1_corriente_Pin|ADC1_2_tension_Pin;
 80002ae:	2303      	movs	r3, #3
 80002b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b2:	2303      	movs	r3, #3
 80002b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	4619      	mov	r1, r3
 80002c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c4:	f001 f80e 	bl	80012e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002c8:	bf00      	nop
 80002ca:	3728      	adds	r7, #40	; 0x28
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40021000 	.word	0x40021000

080002d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002da:	f107 030c 	add.w	r3, r7, #12
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <MX_GPIO_Init+0x9c>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a20      	ldr	r2, [pc, #128]	; (8000370 <MX_GPIO_Init+0x9c>)
 80002f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <MX_GPIO_Init+0x9c>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002fe:	60bb      	str	r3, [r7, #8]
 8000300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_GPIO_Init+0x9c>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a1a      	ldr	r2, [pc, #104]	; (8000370 <MX_GPIO_Init+0x9c>)
 8000308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800030c:	6153      	str	r3, [r2, #20]
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_GPIO_Init+0x9c>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <MX_GPIO_Init+0x9c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4a14      	ldr	r2, [pc, #80]	; (8000370 <MX_GPIO_Init+0x9c>)
 8000320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000324:	6153      	str	r3, [r2, #20]
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_GPIO_Init+0x9c>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IN_D3_dt_Pin|IN_D4_sw_Pin;
 8000332:	2321      	movs	r3, #33	; 0x21
 8000334:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033e:	f107 030c 	add.w	r3, r7, #12
 8000342:	4619      	mov	r1, r3
 8000344:	480b      	ldr	r0, [pc, #44]	; (8000374 <MX_GPIO_Init+0xa0>)
 8000346:	f000 ffcd 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_D2_clk_Pin;
 800034a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800034e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000350:	2300      	movs	r3, #0
 8000352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IN_D2_clk_GPIO_Port, &GPIO_InitStruct);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	4619      	mov	r1, r3
 800035e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000362:	f000 ffbf 	bl	80012e4 <HAL_GPIO_Init>

}
 8000366:	bf00      	nop
 8000368:	3720      	adds	r7, #32
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000
 8000374:	48000400 	.word	0x48000400

08000378 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_I2C1_Init+0x74>)
 800037e:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <MX_I2C1_Init+0x78>)
 8000380:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_I2C1_Init+0x74>)
 8000384:	f240 220b 	movw	r2, #523	; 0x20b
 8000388:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_I2C1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <MX_I2C1_Init+0x74>)
 8000392:	2201      	movs	r2, #1
 8000394:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_I2C1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <MX_I2C1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a8:	4b10      	ldr	r3, [pc, #64]	; (80003ec <MX_I2C1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_I2C1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <MX_I2C1_Init+0x74>)
 80003b6:	f001 f907 	bl	80015c8 <HAL_I2C_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003c0:	f000 f8cd 	bl	800055e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003c4:	2100      	movs	r1, #0
 80003c6:	4809      	ldr	r0, [pc, #36]	; (80003ec <MX_I2C1_Init+0x74>)
 80003c8:	f001 f98d 	bl	80016e6 <HAL_I2CEx_ConfigAnalogFilter>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80003d2:	f000 f8c4 	bl	800055e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003d6:	2100      	movs	r1, #0
 80003d8:	4804      	ldr	r0, [pc, #16]	; (80003ec <MX_I2C1_Init+0x74>)
 80003da:	f001 f9cf 	bl	800177c <HAL_I2CEx_ConfigDigitalFilter>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80003e4:	f000 f8bb 	bl	800055e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000078 	.word	0x20000078
 80003f0:	40005400 	.word	0x40005400

080003f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	; 0x28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <HAL_I2C_MspInit+0x7c>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d127      	bne.n	8000466 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <HAL_I2C_MspInit+0x80>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a16      	ldr	r2, [pc, #88]	; (8000474 <HAL_I2C_MspInit+0x80>)
 800041c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <HAL_I2C_MspInit+0x80>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800042a:	613b      	str	r3, [r7, #16]
 800042c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800042e:	23c0      	movs	r3, #192	; 0xc0
 8000430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000432:	2312      	movs	r3, #18
 8000434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043a:	2303      	movs	r3, #3
 800043c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800043e:	2304      	movs	r3, #4
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000442:	f107 0314 	add.w	r3, r7, #20
 8000446:	4619      	mov	r1, r3
 8000448:	480b      	ldr	r0, [pc, #44]	; (8000478 <HAL_I2C_MspInit+0x84>)
 800044a:	f000 ff4b 	bl	80012e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_I2C_MspInit+0x80>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	4a08      	ldr	r2, [pc, #32]	; (8000474 <HAL_I2C_MspInit+0x80>)
 8000454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000458:	61d3      	str	r3, [r2, #28]
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <HAL_I2C_MspInit+0x80>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000466:	bf00      	nop
 8000468:	3728      	adds	r7, #40	; 0x28
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40005400 	.word	0x40005400
 8000474:	40021000 	.word	0x40021000
 8000478:	48000400 	.word	0x48000400

0800047c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f000 fb26 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f80d 	bl	80004a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f7ff ff24 	bl	80002d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800048c:	f000 fa82 	bl	8000994 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000490:	f7ff fe9a 	bl	80001c8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000494:	f000 f8c8 	bl	8000628 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000498:	f7ff ff6e 	bl	8000378 <MX_I2C1_Init>
  MX_TIM2_Init();
 800049c:	f000 f970 	bl	8000780 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <main+0x24>

080004a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b096      	sub	sp, #88	; 0x58
 80004a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004ac:	2228      	movs	r2, #40	; 0x28
 80004ae:	2100      	movs	r1, #0
 80004b0:	4618      	mov	r0, r3
 80004b2:	f004 f8e1 	bl	8004678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
 80004c4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
 80004d4:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d6:	2302      	movs	r3, #2
 80004d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004da:	2301      	movs	r3, #1
 80004dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004de:	2310      	movs	r3, #16
 80004e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e2:	2302      	movs	r3, #2
 80004e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004e6:	2300      	movs	r3, #0
 80004e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004ea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 f98d 	bl	8001814 <HAL_RCC_OscConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000500:	f000 f82d 	bl	800055e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000504:	230f      	movs	r3, #15
 8000506:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000508:	2302      	movs	r3, #2
 800050a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000514:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2102      	movs	r1, #2
 8000520:	4618      	mov	r0, r3
 8000522:	f002 f9b5 	bl	8002890 <HAL_RCC_ClockConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800052c:	f000 f817 	bl	800055e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8000530:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8000534:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fbd8 	bl	8002cfc <HAL_RCCEx_PeriphCLKConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000552:	f000 f804 	bl	800055e <Error_Handler>
  }
}
 8000556:	bf00      	nop
 8000558:	3758      	adds	r7, #88	; 0x58
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000562:	b672      	cpsid	i
}
 8000564:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000566:	e7fe      	b.n	8000566 <Error_Handler+0x8>

08000568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_MspInit+0x44>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <HAL_MspInit+0x44>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_MspInit+0x44>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_MspInit+0x44>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a08      	ldr	r2, [pc, #32]	; (80005ac <HAL_MspInit+0x44>)
 800058c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_MspInit+0x44>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <NMI_Handler+0x4>

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fc:	f000 faae 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <SystemInit+0x20>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <SystemInit+0x20>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09a      	sub	sp, #104	; 0x68
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000648:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]
 800065a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	222c      	movs	r2, #44	; 0x2c
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 f808 	bl	8004678 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000668:	4b43      	ldr	r3, [pc, #268]	; (8000778 <MX_TIM1_Init+0x150>)
 800066a:	4a44      	ldr	r2, [pc, #272]	; (800077c <MX_TIM1_Init+0x154>)
 800066c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 800066e:	4b42      	ldr	r3, [pc, #264]	; (8000778 <MX_TIM1_Init+0x150>)
 8000670:	2213      	movs	r2, #19
 8000672:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b40      	ldr	r3, [pc, #256]	; (8000778 <MX_TIM1_Init+0x150>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800067a:	4b3f      	ldr	r3, [pc, #252]	; (8000778 <MX_TIM1_Init+0x150>)
 800067c:	2263      	movs	r2, #99	; 0x63
 800067e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <MX_TIM1_Init+0x150>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000686:	4b3c      	ldr	r3, [pc, #240]	; (8000778 <MX_TIM1_Init+0x150>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b3a      	ldr	r3, [pc, #232]	; (8000778 <MX_TIM1_Init+0x150>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000692:	4839      	ldr	r0, [pc, #228]	; (8000778 <MX_TIM1_Init+0x150>)
 8000694:	f002 fc58 	bl	8002f48 <HAL_TIM_Base_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800069e:	f7ff ff5e 	bl	800055e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006ac:	4619      	mov	r1, r3
 80006ae:	4832      	ldr	r0, [pc, #200]	; (8000778 <MX_TIM1_Init+0x150>)
 80006b0:	f002 febc 	bl	800342c <HAL_TIM_ConfigClockSource>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006ba:	f7ff ff50 	bl	800055e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006be:	482e      	ldr	r0, [pc, #184]	; (8000778 <MX_TIM1_Init+0x150>)
 80006c0:	f002 fc99 	bl	8002ff6 <HAL_TIM_PWM_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006ca:	f7ff ff48 	bl	800055e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d2:	2300      	movs	r3, #0
 80006d4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006de:	4619      	mov	r1, r3
 80006e0:	4825      	ldr	r0, [pc, #148]	; (8000778 <MX_TIM1_Init+0x150>)
 80006e2:	f003 fb25 	bl	8003d30 <HAL_TIMEx_MasterConfigSynchronization>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80006ec:	f7ff ff37 	bl	800055e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f0:	2360      	movs	r3, #96	; 0x60
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000704:	2300      	movs	r3, #0
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000708:	2300      	movs	r3, #0
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800070c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000710:	2200      	movs	r2, #0
 8000712:	4619      	mov	r1, r3
 8000714:	4818      	ldr	r0, [pc, #96]	; (8000778 <MX_TIM1_Init+0x150>)
 8000716:	f002 fd75 	bl	8003204 <HAL_TIM_PWM_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000720:	f7ff ff1d 	bl	800055e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <MX_TIM1_Init+0x150>)
 800075a:	f003 fb57 	bl	8003e0c <HAL_TIMEx_ConfigBreakDeadTime>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000764:	f7ff fefb 	bl	800055e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000768:	4803      	ldr	r0, [pc, #12]	; (8000778 <MX_TIM1_Init+0x150>)
 800076a:	f000 f8db 	bl	8000924 <HAL_TIM_MspPostInit>

}
 800076e:	bf00      	nop
 8000770:	3768      	adds	r7, #104	; 0x68
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000cc 	.word	0x200000cc
 800077c:	40012c00 	.word	0x40012c00

08000780 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2224      	movs	r2, #36	; 0x24
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f003 ff72 	bl	8004678 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	463b      	mov	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007ce:	2301      	movs	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007de:	2301      	movs	r3, #1
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007f2:	f002 fc61 	bl	80030b8 <HAL_TIM_Encoder_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80007fc:	f7ff feaf 	bl	800055e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000808:	463b      	mov	r3, r7
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_TIM2_Init+0xa4>)
 800080e:	f003 fa8f 	bl	8003d30 <HAL_TIMEx_MasterConfigSynchronization>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000818:	f7ff fea1 	bl	800055e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	3730      	adds	r7, #48	; 0x30
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000118 	.word	0x20000118

08000828 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <HAL_TIM_Base_MspInit+0x38>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d10b      	bne.n	8000852 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_TIM_Base_MspInit+0x3c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a09      	ldr	r2, [pc, #36]	; (8000864 <HAL_TIM_Base_MspInit+0x3c>)
 8000840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <HAL_TIM_Base_MspInit+0x3c>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40012c00 	.word	0x40012c00
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000888:	d144      	bne.n	8000914 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <HAL_TIM_Encoder_MspInit+0xb4>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a23      	ldr	r2, [pc, #140]	; (800091c <HAL_TIM_Encoder_MspInit+0xb4>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <HAL_TIM_Encoder_MspInit+0xb4>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <HAL_TIM_Encoder_MspInit+0xb4>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a1d      	ldr	r2, [pc, #116]	; (800091c <HAL_TIM_Encoder_MspInit+0xb4>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <HAL_TIM_Encoder_MspInit+0xb4>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_TIM_Encoder_MspInit+0xb4>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_TIM_Encoder_MspInit+0xb4>)
 80008c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_TIM_Encoder_MspInit+0xb4>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008d2:	2320      	movs	r3, #32
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008e2:	2301      	movs	r3, #1
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f000 fcf8 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008f4:	2308      	movs	r3, #8
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000904:	2301      	movs	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	4804      	ldr	r0, [pc, #16]	; (8000920 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000910:	f000 fce8 	bl	80012e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	48000400 	.word	0x48000400

08000924 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <HAL_TIM_MspPostInit+0x68>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d11d      	bne.n	8000982 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_TIM_MspPostInit+0x6c>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <HAL_TIM_MspPostInit+0x6c>)
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_TIM_MspPostInit+0x6c>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_D9_Pin;
 800095e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000962:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000970:	2306      	movs	r3, #6
 8000972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097e:	f000 fcb1 	bl	80012e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40012c00 	.word	0x40012c00
 8000990:	40021000 	.word	0x40021000

08000994 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USART2_UART_Init+0x58>)
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_USART2_UART_Init+0x5c>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009d8:	f003 fa90 	bl	8003efc <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e2:	f7ff fdbc 	bl	800055e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000164 	.word	0x20000164
 80009f0:	40004400 	.word	0x40004400

080009f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0x80>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d129      	bne.n	8000a6a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	6153      	str	r3, [r2, #20]
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a46:	f248 0304 	movw	r3, #32772	; 0x8004
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f000 fc3d 	bl	80012e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40021000 	.word	0x40021000

08000a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a80:	f7ff fdc0 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f003 fdc1 	bl	8004630 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aae:	f7ff fce5 	bl	800047c <main>

08000ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ab4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac0:	080046e0 	.word	0x080046e0
  ldr r2, =_sbss
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac8:	200001f0 	.word	0x200001f0

08000acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_2_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_Init+0x28>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_Init+0x28>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 fbcb 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f808 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aec:	f7ff fd3c 	bl	8000568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40022000 	.word	0x40022000

08000afc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x54>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x58>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fbd5 	bl	80012ca <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00e      	b.n	8000b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d80a      	bhi.n	8000b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	f000 fbab 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_InitTick+0x5c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	200001ec 	.word	0x200001ec

08000b84 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200001ec 	.word	0x200001ec

08000b9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09a      	sub	sp, #104	; 0x68
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e172      	b.n	8000ea2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d176      	bne.n	8000cbc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d152      	bne.n	8000c7c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fb33 	bl	800025c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d13b      	bne.n	8000c7c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 fa21 	bl	800104c <ADC_Disable>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d12f      	bne.n	8000c7c <HAL_ADC_Init+0xe0>
 8000c1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d12b      	bne.n	8000c7c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c2c:	f023 0302 	bic.w	r3, r3, #2
 8000c30:	f043 0202 	orr.w	r2, r3, #2
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c46:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c56:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c58:	4b94      	ldr	r3, [pc, #592]	; (8000eac <HAL_ADC_Init+0x310>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a94      	ldr	r2, [pc, #592]	; (8000eb0 <HAL_ADC_Init+0x314>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	0c9a      	lsrs	r2, r3, #18
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c6e:	e002      	b.n	8000c76 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f9      	bne.n	8000c70 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d007      	beq.n	8000c9a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c98:	d110      	bne.n	8000cbc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f023 0312 	bic.w	r3, r3, #18
 8000ca2:	f043 0210 	orr.w	r2, r3, #16
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f043 0201 	orr.w	r2, r3, #1
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f040 80df 	bne.w	8000e88 <HAL_ADC_Init+0x2ec>
 8000cca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 80da 	bne.w	8000e88 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f040 80d2 	bne.w	8000e88 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cec:	f043 0202 	orr.w	r2, r3, #2
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cf4:	4b6f      	ldr	r3, [pc, #444]	; (8000eb4 <HAL_ADC_Init+0x318>)
 8000cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d00:	d102      	bne.n	8000d08 <HAL_ADC_Init+0x16c>
 8000d02:	4b6d      	ldr	r3, [pc, #436]	; (8000eb8 <HAL_ADC_Init+0x31c>)
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	e002      	b.n	8000d0e <HAL_ADC_Init+0x172>
 8000d08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d0c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d108      	bne.n	8000d2e <HAL_ADC_Init+0x192>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d101      	bne.n	8000d2e <HAL_ADC_Init+0x192>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e000      	b.n	8000d30 <HAL_ADC_Init+0x194>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d11c      	bne.n	8000d6e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d34:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d010      	beq.n	8000d5c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d107      	bne.n	8000d56 <HAL_ADC_Init+0x1ba>
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d101      	bne.n	8000d56 <HAL_ADC_Init+0x1ba>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <HAL_ADC_Init+0x1bc>
 8000d56:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d108      	bne.n	8000d6e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d6c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7e5b      	ldrb	r3, [r3, #25]
 8000d72:	035b      	lsls	r3, r3, #13
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d78:	2a01      	cmp	r2, #1
 8000d7a:	d002      	beq.n	8000d82 <HAL_ADC_Init+0x1e6>
 8000d7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d80:	e000      	b.n	8000d84 <HAL_ADC_Init+0x1e8>
 8000d82:	2200      	movs	r2, #0
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d94:	4313      	orrs	r3, r2
 8000d96:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d11b      	bne.n	8000dda <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7e5b      	ldrb	r3, [r3, #25]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d109      	bne.n	8000dbe <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	3b01      	subs	r3, #1
 8000db0:	045a      	lsls	r2, r3, #17
 8000db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000db4:	4313      	orrs	r3, r2
 8000db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dba:	663b      	str	r3, [r7, #96]	; 0x60
 8000dbc:	e00d      	b.n	8000dda <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000dc6:	f043 0220 	orr.w	r2, r3, #32
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f043 0201 	orr.w	r2, r3, #1
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d007      	beq.n	8000df2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	4313      	orrs	r3, r2
 8000dec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dee:	4313      	orrs	r3, r2
 8000df0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 030c 	and.w	r3, r3, #12
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d114      	bne.n	8000e2a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e0e:	f023 0302 	bic.w	r3, r3, #2
 8000e12:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e1b      	ldrb	r3, [r3, #24]
 8000e18:	039a      	lsls	r2, r3, #14
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4313      	orrs	r3, r2
 8000e24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e26:	4313      	orrs	r3, r2
 8000e28:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_ADC_Init+0x320>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e3a:	430b      	orrs	r3, r1
 8000e3c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d10c      	bne.n	8000e60 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	f023 010f 	bic.w	r1, r3, #15
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5e:	e007      	b.n	8000e70 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 020f 	bic.w	r2, r2, #15
 8000e6e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f023 0303 	bic.w	r3, r3, #3
 8000e7e:	f043 0201 	orr.w	r2, r3, #1
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	641a      	str	r2, [r3, #64]	; 0x40
 8000e86:	e00a      	b.n	8000e9e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f023 0312 	bic.w	r3, r3, #18
 8000e90:	f043 0210 	orr.w	r2, r3, #16
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3768      	adds	r7, #104	; 0x68
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	431bde83 	.word	0x431bde83
 8000eb4:	50000300 	.word	0x50000300
 8000eb8:	50000100 	.word	0x50000100
 8000ebc:	fff0c007 	.word	0xfff0c007

08000ec0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b099      	sub	sp, #100	; 0x64
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed8:	d102      	bne.n	8000ee0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8000eda:	4b5a      	ldr	r3, [pc, #360]	; (8001044 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	e002      	b.n	8000ee6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000ee0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ee4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e0a2      	b.n	8001036 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e09b      	b.n	8001036 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d17f      	bne.n	8001014 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d179      	bne.n	8001014 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f20:	4b49      	ldr	r3, [pc, #292]	; (8001048 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8000f22:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d040      	beq.n	8000fae <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	6859      	ldr	r1, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f3e:	035b      	lsls	r3, r3, #13
 8000f40:	430b      	orrs	r3, r1
 8000f42:	431a      	orrs	r2, r3
 8000f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f46:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d108      	bne.n	8000f68 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d15c      	bne.n	8001028 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d107      	bne.n	8000f8a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8000f8a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d14b      	bne.n	8001028 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8000f98:	f023 030f 	bic.w	r3, r3, #15
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	6811      	ldr	r1, [r2, #0]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	6892      	ldr	r2, [r2, #8]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000faa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000fac:	e03c      	b.n	8001028 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fb8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d108      	bne.n	8000fda <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d101      	bne.n	8000fda <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d123      	bne.n	8001028 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d107      	bne.n	8000ffc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8000ffc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d112      	bne.n	8001028 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800100a:	f023 030f 	bic.w	r3, r3, #15
 800100e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001010:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001012:	e009      	b.n	8001028 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f043 0220 	orr.w	r2, r3, #32
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001026:	e000      	b.n	800102a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001028:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001032:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001036:	4618      	mov	r0, r3
 8001038:	3764      	adds	r7, #100	; 0x64
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	50000100 	.word	0x50000100
 8001048:	50000300 	.word	0x50000300

0800104c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b01      	cmp	r3, #1
 8001064:	d108      	bne.n	8001078 <ADC_Disable+0x2c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <ADC_Disable+0x2c>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <ADC_Disable+0x2e>
 8001078:	2300      	movs	r3, #0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d047      	beq.n	800110e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 030d 	and.w	r3, r3, #13
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10f      	bne.n	80010ac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0202 	orr.w	r2, r2, #2
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2203      	movs	r2, #3
 80010a2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80010a4:	f7ff fd6e 	bl	8000b84 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80010aa:	e029      	b.n	8001100 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f043 0210 	orr.w	r2, r3, #16
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f043 0201 	orr.w	r2, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e023      	b.n	8001110 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010c8:	f7ff fd5c 	bl	8000b84 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d914      	bls.n	8001100 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10d      	bne.n	8001100 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f043 0210 	orr.w	r2, r3, #16
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	f043 0201 	orr.w	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e007      	b.n	8001110 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b01      	cmp	r3, #1
 800110c:	d0dc      	beq.n	80010c8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff47 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff5c 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffb0 	bl	8001238 <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f2:	e14e      	b.n	8001592 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8140 	beq.w	800158c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d005      	beq.n	8001324 <HAL_GPIO_Init+0x40>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d130      	bne.n	8001386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135a:	2201      	movs	r2, #1
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 0201 	and.w	r2, r3, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b03      	cmp	r3, #3
 8001390:	d017      	beq.n	80013c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d123      	bne.n	8001416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	220f      	movs	r2, #15
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	6939      	ldr	r1, [r7, #16]
 8001412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0203 	and.w	r2, r3, #3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 809a 	beq.w	800158c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001458:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <HAL_GPIO_Init+0x2cc>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a54      	ldr	r2, [pc, #336]	; (80015b0 <HAL_GPIO_Init+0x2cc>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b52      	ldr	r3, [pc, #328]	; (80015b0 <HAL_GPIO_Init+0x2cc>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001470:	4a50      	ldr	r2, [pc, #320]	; (80015b4 <HAL_GPIO_Init+0x2d0>)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800149a:	d013      	beq.n	80014c4 <HAL_GPIO_Init+0x1e0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a46      	ldr	r2, [pc, #280]	; (80015b8 <HAL_GPIO_Init+0x2d4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00d      	beq.n	80014c0 <HAL_GPIO_Init+0x1dc>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a45      	ldr	r2, [pc, #276]	; (80015bc <HAL_GPIO_Init+0x2d8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x1d8>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a44      	ldr	r2, [pc, #272]	; (80015c0 <HAL_GPIO_Init+0x2dc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_GPIO_Init+0x1d4>
 80014b4:	2303      	movs	r3, #3
 80014b6:	e006      	b.n	80014c6 <HAL_GPIO_Init+0x1e2>
 80014b8:	2305      	movs	r3, #5
 80014ba:	e004      	b.n	80014c6 <HAL_GPIO_Init+0x1e2>
 80014bc:	2302      	movs	r3, #2
 80014be:	e002      	b.n	80014c6 <HAL_GPIO_Init+0x1e2>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_GPIO_Init+0x1e2>
 80014c4:	2300      	movs	r3, #0
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	f002 0203 	and.w	r2, r2, #3
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	4093      	lsls	r3, r2
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d6:	4937      	ldr	r1, [pc, #220]	; (80015b4 <HAL_GPIO_Init+0x2d0>)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e4:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <HAL_GPIO_Init+0x2e0>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001508:	4a2e      	ldr	r2, [pc, #184]	; (80015c4 <HAL_GPIO_Init+0x2e0>)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_GPIO_Init+0x2e0>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001532:	4a24      	ldr	r2, [pc, #144]	; (80015c4 <HAL_GPIO_Init+0x2e0>)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_GPIO_Init+0x2e0>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800155c:	4a19      	ldr	r2, [pc, #100]	; (80015c4 <HAL_GPIO_Init+0x2e0>)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_GPIO_Init+0x2e0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_GPIO_Init+0x2e0>)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	f47f aea9 	bne.w	80012f4 <HAL_GPIO_Init+0x10>
  }
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000
 80015b8:	48000400 	.word	0x48000400
 80015bc:	48000800 	.word	0x48000800
 80015c0:	48000c00 	.word	0x48000c00
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e081      	b.n	80016de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7fe ff00 	bl	80003f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2224      	movs	r2, #36	; 0x24
 80015f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001618:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001628:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	e006      	b.n	8001650 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800164e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d104      	bne.n	8001662 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001660:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001674:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001684:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69d9      	ldr	r1, [r3, #28]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1a      	ldr	r2, [r3, #32]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2220      	movs	r2, #32
 80016ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d138      	bne.n	800176e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001706:	2302      	movs	r3, #2
 8001708:	e032      	b.n	8001770 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2224      	movs	r2, #36	; 0x24
 8001716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001738:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0201 	orr.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2220      	movs	r2, #32
 800175e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800176e:	2302      	movs	r3, #2
  }
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b20      	cmp	r3, #32
 8001790:	d139      	bne.n	8001806 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800179c:	2302      	movs	r3, #2
 800179e:	e033      	b.n	8001808 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2224      	movs	r2, #36	; 0x24
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0201 	orr.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001806:	2302      	movs	r3, #2
  }
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800181a:	af00      	add	r7, sp, #0
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001824:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	f001 b823 	b.w	8002880 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 817d 	beq.w	8001b4a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001850:	4bbc      	ldr	r3, [pc, #752]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b04      	cmp	r3, #4
 800185a:	d00c      	beq.n	8001876 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800185c:	4bb9      	ldr	r3, [pc, #740]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b08      	cmp	r3, #8
 8001866:	d15c      	bne.n	8001922 <HAL_RCC_OscConfig+0x10e>
 8001868:	4bb6      	ldr	r3, [pc, #728]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d155      	bne.n	8001922 <HAL_RCC_OscConfig+0x10e>
 8001876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800187a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800188a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d102      	bne.n	80018a8 <HAL_RCC_OscConfig+0x94>
 80018a2:	4ba8      	ldr	r3, [pc, #672]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	e015      	b.n	80018d4 <HAL_RCC_OscConfig+0xc0>
 80018a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80018d0:	4b9c      	ldr	r3, [pc, #624]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018d8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80018dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018e0:	fa92 f2a2 	rbit	r2, r2
 80018e4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80018e8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80018ec:	fab2 f282 	clz	r2, r2
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	f042 0220 	orr.w	r2, r2, #32
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	f002 021f 	and.w	r2, r2, #31
 80018fc:	2101      	movs	r1, #1
 80018fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 811f 	beq.w	8001b48 <HAL_RCC_OscConfig+0x334>
 800190a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 8116 	bne.w	8001b48 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	f000 bfaf 	b.w	8002880 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x12e>
 8001934:	4b83      	ldr	r3, [pc, #524]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a82      	ldr	r2, [pc, #520]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 800193a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e036      	b.n	80019b0 <HAL_RCC_OscConfig+0x19c>
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x158>
 8001952:	4b7c      	ldr	r3, [pc, #496]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a7b      	ldr	r2, [pc, #492]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b79      	ldr	r3, [pc, #484]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a78      	ldr	r2, [pc, #480]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e021      	b.n	80019b0 <HAL_RCC_OscConfig+0x19c>
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x184>
 800197e:	4b71      	ldr	r3, [pc, #452]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a70      	ldr	r2, [pc, #448]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b6e      	ldr	r3, [pc, #440]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a6d      	ldr	r2, [pc, #436]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0x19c>
 8001998:	4b6a      	ldr	r3, [pc, #424]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a69      	ldr	r2, [pc, #420]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 800199e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b67      	ldr	r3, [pc, #412]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a66      	ldr	r2, [pc, #408]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 80019aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019b0:	4b64      	ldr	r3, [pc, #400]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	f023 020f 	bic.w	r2, r3, #15
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	495f      	ldr	r1, [pc, #380]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d059      	beq.n	8001a8e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff f8d3 	bl	8000b84 <HAL_GetTick>
 80019de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff f8ce 	bl	8000b84 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b64      	cmp	r3, #100	; 0x64
 80019f2:	d902      	bls.n	80019fa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	f000 bf43 	b.w	8002880 <HAL_RCC_OscConfig+0x106c>
 80019fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	095b      	lsrs	r3, r3, #5
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d102      	bne.n	8001a2c <HAL_RCC_OscConfig+0x218>
 8001a26:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	e015      	b.n	8001a58 <HAL_RCC_OscConfig+0x244>
 8001a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a30:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a44:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a5c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a60:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a64:	fa92 f2a2 	rbit	r2, r2
 8001a68:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a6c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a70:	fab2 f282 	clz	r2, r2
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	f042 0220 	orr.w	r2, r2, #32
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f002 021f 	and.w	r2, r2, #31
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f202 	lsl.w	r2, r1, r2
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ab      	beq.n	80019e4 <HAL_RCC_OscConfig+0x1d0>
 8001a8c:	e05d      	b.n	8001b4a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f879 	bl	8000b84 <HAL_GetTick>
 8001a92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff f874 	bl	8000b84 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b64      	cmp	r3, #100	; 0x64
 8001aa6:	d902      	bls.n	8001aae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	f000 bee9 	b.w	8002880 <HAL_RCC_OscConfig+0x106c>
 8001aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ac2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	095b      	lsrs	r3, r3, #5
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d102      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2cc>
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	e015      	b.n	8001b0c <HAL_RCC_OscConfig+0x2f8>
 8001ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001afc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_RCC_OscConfig+0x330>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b10:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b14:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b18:	fa92 f2a2 	rbit	r2, r2
 8001b1c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b20:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b24:	fab2 f282 	clz	r2, r2
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f042 0220 	orr.w	r2, r2, #32
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f002 021f 	and.w	r2, r2, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ab      	bne.n	8001a98 <HAL_RCC_OscConfig+0x284>
 8001b40:	e003      	b.n	8001b4a <HAL_RCC_OscConfig+0x336>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 817d 	beq.w	8001e5a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b60:	4ba6      	ldr	r3, [pc, #664]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00b      	beq.n	8001b84 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b6c:	4ba3      	ldr	r3, [pc, #652]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d172      	bne.n	8001c5e <HAL_RCC_OscConfig+0x44a>
 8001b78:	4ba0      	ldr	r3, [pc, #640]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d16c      	bne.n	8001c5e <HAL_RCC_OscConfig+0x44a>
 8001b84:	2302      	movs	r3, #2
 8001b86:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b96:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d102      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x3a0>
 8001bae:	4b93      	ldr	r3, [pc, #588]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	e013      	b.n	8001bdc <HAL_RCC_OscConfig+0x3c8>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001bcc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001bd8:	4b88      	ldr	r3, [pc, #544]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001be2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001be6:	fa92 f2a2 	rbit	r2, r2
 8001bea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001bee:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001bf2:	fab2 f282 	clz	r2, r2
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f042 0220 	orr.w	r2, r2, #32
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f002 021f 	and.w	r2, r2, #31
 8001c02:	2101      	movs	r1, #1
 8001c04:	fa01 f202 	lsl.w	r2, r1, r2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00a      	beq.n	8001c24 <HAL_RCC_OscConfig+0x410>
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d002      	beq.n	8001c24 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f000 be2e 	b.w	8002880 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b75      	ldr	r3, [pc, #468]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	21f8      	movs	r1, #248	; 0xf8
 8001c3a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c42:	fa91 f1a1 	rbit	r1, r1
 8001c46:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c4a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c4e:	fab1 f181 	clz	r1, r1
 8001c52:	b2c9      	uxtb	r1, r1
 8001c54:	408b      	lsls	r3, r1
 8001c56:	4969      	ldr	r1, [pc, #420]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5c:	e0fd      	b.n	8001e5a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8088 	beq.w	8001d80 <HAL_RCC_OscConfig+0x56c>
 8001c70:	2301      	movs	r3, #1
 8001c72:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	461a      	mov	r2, r3
 8001c98:	2301      	movs	r3, #1
 8001c9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ff72 	bl	8000b84 <HAL_GetTick>
 8001ca0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7fe ff6d 	bl	8000b84 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d902      	bls.n	8001cbc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	f000 bde2 	b.w	8002880 <HAL_RCC_OscConfig+0x106c>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001cce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	095b      	lsrs	r3, r3, #5
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <HAL_RCC_OscConfig+0x4d8>
 8001ce6:	4b45      	ldr	r3, [pc, #276]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	e013      	b.n	8001d14 <HAL_RCC_OscConfig+0x500>
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001cfe:	2302      	movs	r3, #2
 8001d00:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d04:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d10:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	2202      	movs	r2, #2
 8001d16:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d1e:	fa92 f2a2 	rbit	r2, r2
 8001d22:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d26:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d2a:	fab2 f282 	clz	r2, r2
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	f042 0220 	orr.w	r2, r2, #32
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	f002 021f 	and.w	r2, r2, #31
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0af      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	21f8      	movs	r1, #248	; 0xf8
 8001d5c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d64:	fa91 f1a1 	rbit	r1, r1
 8001d68:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d6c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d70:	fab1 f181 	clz	r1, r1
 8001d74:	b2c9      	uxtb	r1, r1
 8001d76:	408b      	lsls	r3, r1
 8001d78:	4920      	ldr	r1, [pc, #128]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
 8001d7e:	e06c      	b.n	8001e5a <HAL_RCC_OscConfig+0x646>
 8001d80:	2301      	movs	r3, #1
 8001d82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001da0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	461a      	mov	r2, r3
 8001da8:	2300      	movs	r3, #0
 8001daa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7fe feea 	bl	8000b84 <HAL_GetTick>
 8001db0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db6:	f7fe fee5 	bl	8000b84 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d902      	bls.n	8001dcc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	f000 bd5a 	b.w	8002880 <HAL_RCC_OscConfig+0x106c>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d104      	bne.n	8001e00 <HAL_RCC_OscConfig+0x5ec>
 8001df6:	4b01      	ldr	r3, [pc, #4]	; (8001dfc <HAL_RCC_OscConfig+0x5e8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	e015      	b.n	8001e28 <HAL_RCC_OscConfig+0x614>
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	2302      	movs	r3, #2
 8001e02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e12:	2302      	movs	r3, #2
 8001e14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e24:	4bc8      	ldr	r3, [pc, #800]	; (8002148 <HAL_RCC_OscConfig+0x934>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e32:	fa92 f2a2 	rbit	r2, r2
 8001e36:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e3e:	fab2 f282 	clz	r2, r2
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f042 0220 	orr.w	r2, r2, #32
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f002 021f 	and.w	r2, r2, #31
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ad      	bne.n	8001db6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8110 	beq.w	8002090 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d079      	beq.n	8001f74 <HAL_RCC_OscConfig+0x760>
 8001e80:	2301      	movs	r3, #1
 8001e82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4bab      	ldr	r3, [pc, #684]	; (800214c <HAL_RCC_OscConfig+0x938>)
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe fe6b 	bl	8000b84 <HAL_GetTick>
 8001eae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb4:	f7fe fe66 	bl	8000b84 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d902      	bls.n	8001eca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f000 bcdb 	b.w	8002880 <HAL_RCC_OscConfig+0x106c>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f08:	2202      	movs	r2, #2
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	fa93 f2a3 	rbit	r2, r3
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f24:	4b88      	ldr	r3, [pc, #544]	; (8002148 <HAL_RCC_OscConfig+0x934>)
 8001f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f30:	2102      	movs	r1, #2
 8001f32:	6019      	str	r1, [r3, #0]
 8001f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	fa93 f1a3 	rbit	r1, r3
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f4a:	6019      	str	r1, [r3, #0]
  return result;
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	2101      	movs	r1, #1
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0a0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x6a0>
 8001f72:	e08d      	b.n	8002090 <HAL_RCC_OscConfig+0x87c>
 8001f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fa93 f2a3 	rbit	r2, r3
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f96:	601a      	str	r2, [r3, #0]
  return result;
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fa0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b68      	ldr	r3, [pc, #416]	; (800214c <HAL_RCC_OscConfig+0x938>)
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fde5 	bl	8000b84 <HAL_GetTick>
 8001fba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7fe fde0 	bl	8000b84 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d902      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	f000 bc55 	b.w	8002880 <HAL_RCC_OscConfig+0x106c>
 8001fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fde:	2202      	movs	r2, #2
 8001fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	fa93 f2a3 	rbit	r2, r3
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002002:	2202      	movs	r2, #2
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	fa93 f2a3 	rbit	r2, r3
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002026:	2202      	movs	r2, #2
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	fa93 f2a3 	rbit	r2, r3
 8002038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002040:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002042:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_RCC_OscConfig+0x934>)
 8002044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800204e:	2102      	movs	r1, #2
 8002050:	6019      	str	r1, [r3, #0]
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f1a3 	rbit	r1, r3
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002068:	6019      	str	r1, [r3, #0]
  return result;
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	2101      	movs	r1, #1
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d197      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002094:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 81a1 	beq.w	80023e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ac:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_RCC_OscConfig+0x934>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d116      	bne.n	80020e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_RCC_OscConfig+0x934>)
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	4a22      	ldr	r2, [pc, #136]	; (8002148 <HAL_RCC_OscConfig+0x934>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c2:	61d3      	str	r3, [r2, #28]
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_OscConfig+0x934>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80020de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_RCC_OscConfig+0x93c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d11a      	bne.n	8002128 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_RCC_OscConfig+0x93c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a16      	ldr	r2, [pc, #88]	; (8002150 <HAL_RCC_OscConfig+0x93c>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fe:	f7fe fd41 	bl	8000b84 <HAL_GetTick>
 8002102:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	e009      	b.n	800211c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002108:	f7fe fd3c 	bl	8000b84 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b64      	cmp	r3, #100	; 0x64
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e3b1      	b.n	8002880 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_RCC_OscConfig+0x93c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ef      	beq.n	8002108 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10d      	bne.n	8002154 <HAL_RCC_OscConfig+0x940>
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_RCC_OscConfig+0x934>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a02      	ldr	r2, [pc, #8]	; (8002148 <HAL_RCC_OscConfig+0x934>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	e03c      	b.n	80021c0 <HAL_RCC_OscConfig+0x9ac>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	10908120 	.word	0x10908120
 8002150:	40007000 	.word	0x40007000
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0x96a>
 8002164:	4bc1      	ldr	r3, [pc, #772]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4ac0      	ldr	r2, [pc, #768]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	4bbe      	ldr	r3, [pc, #760]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4abd      	ldr	r2, [pc, #756]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 8002176:	f023 0304 	bic.w	r3, r3, #4
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	e020      	b.n	80021c0 <HAL_RCC_OscConfig+0x9ac>
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x994>
 800218e:	4bb7      	ldr	r3, [pc, #732]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4ab6      	ldr	r2, [pc, #728]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	4bb4      	ldr	r3, [pc, #720]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4ab3      	ldr	r2, [pc, #716]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0x9ac>
 80021a8:	4bb0      	ldr	r3, [pc, #704]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4aaf      	ldr	r2, [pc, #700]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6213      	str	r3, [r2, #32]
 80021b4:	4bad      	ldr	r3, [pc, #692]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4aac      	ldr	r2, [pc, #688]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 80021ba:	f023 0304 	bic.w	r3, r3, #4
 80021be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8081 	beq.w	80022d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7fe fcd7 	bl	8000b84 <HAL_GetTick>
 80021d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7fe fcd2 	bl	8000b84 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e345      	b.n	8002880 <HAL_RCC_OscConfig+0x106c>
 80021f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021fc:	2202      	movs	r2, #2
 80021fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fa93 f2a3 	rbit	r2, r3
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002220:	2202      	movs	r2, #2
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800223a:	601a      	str	r2, [r3, #0]
  return result;
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002244:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d102      	bne.n	8002260 <HAL_RCC_OscConfig+0xa4c>
 800225a:	4b84      	ldr	r3, [pc, #528]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	e013      	b.n	8002288 <HAL_RCC_OscConfig+0xa74>
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002268:	2202      	movs	r2, #2
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	4b79      	ldr	r3, [pc, #484]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800228c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002290:	2102      	movs	r1, #2
 8002292:	6011      	str	r1, [r2, #0]
 8002294:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002298:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	fa92 f1a2 	rbit	r1, r2
 80022a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022aa:	6011      	str	r1, [r2, #0]
  return result;
 80022ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022b0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	fab2 f282 	clz	r2, r2
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f002 021f 	and.w	r2, r2, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d084      	beq.n	80021dc <HAL_RCC_OscConfig+0x9c8>
 80022d2:	e07f      	b.n	80023d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d4:	f7fe fc56 	bl	8000b84 <HAL_GetTick>
 80022d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022dc:	e00b      	b.n	80022f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe fc51 	bl	8000b84 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e2c4      	b.n	8002880 <HAL_RCC_OscConfig+0x106c>
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80022fe:	2202      	movs	r2, #2
 8002300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002322:	2202      	movs	r2, #2
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800233c:	601a      	str	r2, [r3, #0]
  return result;
 800233e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002342:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002346:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f043 0302 	orr.w	r3, r3, #2
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d102      	bne.n	8002362 <HAL_RCC_OscConfig+0xb4e>
 800235c:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	e013      	b.n	800238a <HAL_RCC_OscConfig+0xb76>
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800236a:	2202      	movs	r2, #2
 800236c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002372:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	fa93 f2a3 	rbit	r2, r3
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800238e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002392:	2102      	movs	r1, #2
 8002394:	6011      	str	r1, [r2, #0]
 8002396:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800239a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	fa92 f1a2 	rbit	r1, r2
 80023a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023ac:	6011      	str	r1, [r2, #0]
  return result;
 80023ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023b2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	fab2 f282 	clz	r2, r2
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	f002 021f 	and.w	r2, r2, #31
 80023c8:	2101      	movs	r1, #1
 80023ca:	fa01 f202 	lsl.w	r2, r1, r2
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d184      	bne.n	80022de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a22      	ldr	r2, [pc, #136]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 80023e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8242 	beq.w	800287e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fa:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_RCC_OscConfig+0xc58>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b08      	cmp	r3, #8
 8002404:	f000 8213 	beq.w	800282e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b02      	cmp	r3, #2
 8002416:	f040 8162 	bne.w	80026de <HAL_RCC_OscConfig+0xeca>
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002422:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fa93 f2a3 	rbit	r2, r3
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800243e:	601a      	str	r2, [r3, #0]
  return result;
 8002440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002444:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002448:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002454:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	461a      	mov	r2, r3
 800245c:	2300      	movs	r3, #0
 800245e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe fb90 	bl	8000b84 <HAL_GetTick>
 8002464:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002468:	e00c      	b.n	8002484 <HAL_RCC_OscConfig+0xc70>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fb88 	bl	8000b84 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1fd      	b.n	8002880 <HAL_RCC_OscConfig+0x106c>
 8002484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002488:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800248c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024a8:	601a      	str	r2, [r3, #0]
  return result;
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_OscConfig+0xcba>
 80024c8:	4bb0      	ldr	r3, [pc, #704]	; (800278c <HAL_RCC_OscConfig+0xf78>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	e027      	b.n	800251e <HAL_RCC_OscConfig+0xd0a>
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80024fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	fa93 f2a3 	rbit	r2, r3
 8002510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002514:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	4b9c      	ldr	r3, [pc, #624]	; (800278c <HAL_RCC_OscConfig+0xf78>)
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002522:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002526:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800252a:	6011      	str	r1, [r2, #0]
 800252c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002530:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	fa92 f1a2 	rbit	r1, r2
 800253a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800253e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002542:	6011      	str	r1, [r2, #0]
  return result;
 8002544:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002548:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f042 0220 	orr.w	r2, r2, #32
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f002 021f 	and.w	r2, r2, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d182      	bne.n	8002470 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256a:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0xf78>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	430b      	orrs	r3, r1
 800258c:	497f      	ldr	r1, [pc, #508]	; (800278c <HAL_RCC_OscConfig+0xf78>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800259a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800259e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	fa93 f2a3 	rbit	r2, r3
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025b6:	601a      	str	r2, [r3, #0]
  return result;
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	461a      	mov	r2, r3
 80025d4:	2301      	movs	r3, #1
 80025d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fad4 	bl	8000b84 <HAL_GetTick>
 80025dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e0:	e009      	b.n	80025f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe facf 	bl	8000b84 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e144      	b.n	8002880 <HAL_RCC_OscConfig+0x106c>
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002608:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800261a:	601a      	str	r2, [r3, #0]
  return result;
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002624:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d102      	bne.n	8002640 <HAL_RCC_OscConfig+0xe2c>
 800263a:	4b54      	ldr	r3, [pc, #336]	; (800278c <HAL_RCC_OscConfig+0xf78>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	e027      	b.n	8002690 <HAL_RCC_OscConfig+0xe7c>
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800264c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800266e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002678:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_OscConfig+0xf78>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002694:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002698:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800269c:	6011      	str	r1, [r2, #0]
 800269e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	fa92 f1a2 	rbit	r1, r2
 80026ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026b4:	6011      	str	r1, [r2, #0]
  return result;
 80026b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	fab2 f282 	clz	r2, r2
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f042 0220 	orr.w	r2, r2, #32
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f002 021f 	and.w	r2, r2, #31
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f202 	lsl.w	r2, r1, r2
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d082      	beq.n	80025e2 <HAL_RCC_OscConfig+0xdce>
 80026dc:	e0cf      	b.n	800287e <HAL_RCC_OscConfig+0x106a>
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80026e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	fa93 f2a3 	rbit	r2, r3
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002702:	601a      	str	r2, [r3, #0]
  return result;
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800270c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002718:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	461a      	mov	r2, r3
 8002720:	2300      	movs	r3, #0
 8002722:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe fa2e 	bl	8000b84 <HAL_GetTick>
 8002728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272c:	e009      	b.n	8002742 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272e:	f7fe fa29 	bl	8000b84 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e09e      	b.n	8002880 <HAL_RCC_OscConfig+0x106c>
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800274a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800274e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	fa93 f2a3 	rbit	r2, r3
 800275e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002762:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002766:	601a      	str	r2, [r3, #0]
  return result;
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002770:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d104      	bne.n	8002790 <HAL_RCC_OscConfig+0xf7c>
 8002786:	4b01      	ldr	r3, [pc, #4]	; (800278c <HAL_RCC_OscConfig+0xf78>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	e029      	b.n	80027e0 <HAL_RCC_OscConfig+0xfcc>
 800278c:	40021000 	.word	0x40021000
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	fa93 f2a3 	rbit	r2, r3
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	fa93 f2a3 	rbit	r2, r3
 80027d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_RCC_OscConfig+0x1078>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80027e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027ec:	6011      	str	r1, [r2, #0]
 80027ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	fa92 f1a2 	rbit	r1, r2
 80027fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002800:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002804:	6011      	str	r1, [r2, #0]
  return result;
 8002806:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800280a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	fab2 f282 	clz	r2, r2
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f042 0220 	orr.w	r2, r2, #32
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f002 021f 	and.w	r2, r2, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f202 	lsl.w	r2, r1, r2
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d180      	bne.n	800272e <HAL_RCC_OscConfig+0xf1a>
 800282c:	e027      	b.n	800287e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e01e      	b.n	8002880 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_RCC_OscConfig+0x1078>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800284a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800284e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	429a      	cmp	r2, r3
 8002860:	d10b      	bne.n	800287a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002862:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002876:	429a      	cmp	r2, r3
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b09e      	sub	sp, #120	; 0x78
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e162      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a8:	4b90      	ldr	r3, [pc, #576]	; (8002aec <HAL_RCC_ClockConfig+0x25c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d910      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b8d      	ldr	r3, [pc, #564]	; (8002aec <HAL_RCC_ClockConfig+0x25c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 0207 	bic.w	r2, r3, #7
 80028be:	498b      	ldr	r1, [pc, #556]	; (8002aec <HAL_RCC_ClockConfig+0x25c>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b89      	ldr	r3, [pc, #548]	; (8002aec <HAL_RCC_ClockConfig+0x25c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e14a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e4:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <HAL_RCC_ClockConfig+0x260>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	497f      	ldr	r1, [pc, #508]	; (8002af0 <HAL_RCC_ClockConfig+0x260>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80dc 	beq.w	8002abc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d13c      	bne.n	8002986 <HAL_RCC_ClockConfig+0xf6>
 800290c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002910:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800291a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d102      	bne.n	8002936 <HAL_RCC_ClockConfig+0xa6>
 8002930:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_ClockConfig+0x260>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	e00f      	b.n	8002956 <HAL_RCC_ClockConfig+0xc6>
 8002936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	667b      	str	r3, [r7, #100]	; 0x64
 8002944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002948:	663b      	str	r3, [r7, #96]	; 0x60
 800294a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002952:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <HAL_RCC_ClockConfig+0x260>)
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800295a:	65ba      	str	r2, [r7, #88]	; 0x58
 800295c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800295e:	fa92 f2a2 	rbit	r2, r2
 8002962:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002966:	fab2 f282 	clz	r2, r2
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f042 0220 	orr.w	r2, r2, #32
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f002 021f 	and.w	r2, r2, #31
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d17b      	bne.n	8002a7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0f3      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d13c      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x178>
 800298e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002992:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800299c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d102      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x128>
 80029b2:	4b4f      	ldr	r3, [pc, #316]	; (8002af0 <HAL_RCC_ClockConfig+0x260>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	e00f      	b.n	80029d8 <HAL_RCC_ClockConfig+0x148>
 80029b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	647b      	str	r3, [r7, #68]	; 0x44
 80029c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ca:	643b      	str	r3, [r7, #64]	; 0x40
 80029cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d4:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_RCC_ClockConfig+0x260>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029dc:	63ba      	str	r2, [r7, #56]	; 0x38
 80029de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029e0:	fa92 f2a2 	rbit	r2, r2
 80029e4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80029e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e8:	fab2 f282 	clz	r2, r2
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f042 0220 	orr.w	r2, r2, #32
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f002 021f 	and.w	r2, r2, #31
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f202 	lsl.w	r2, r1, r2
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d13a      	bne.n	8002a7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b2      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2de>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d102      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x1a0>
 8002a2a:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <HAL_RCC_ClockConfig+0x260>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	e00d      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1bc>
 8002a30:	2302      	movs	r3, #2
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	623b      	str	r3, [r7, #32]
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <HAL_RCC_ClockConfig+0x260>)
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	61ba      	str	r2, [r7, #24]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	fa92 f2a2 	rbit	r2, r2
 8002a56:	617a      	str	r2, [r7, #20]
  return result;
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	fab2 f282 	clz	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f042 0220 	orr.w	r2, r2, #32
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	f002 021f 	and.w	r2, r2, #31
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e079      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCC_ClockConfig+0x260>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f023 0203 	bic.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	491a      	ldr	r1, [pc, #104]	; (8002af0 <HAL_RCC_ClockConfig+0x260>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a8c:	f7fe f87a 	bl	8000b84 <HAL_GetTick>
 8002a90:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7fe f876 	bl	8000b84 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e061      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_RCC_ClockConfig+0x260>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 020c 	and.w	r2, r3, #12
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1eb      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_ClockConfig+0x25c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d214      	bcs.n	8002af4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_RCC_ClockConfig+0x25c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 0207 	bic.w	r2, r3, #7
 8002ad2:	4906      	ldr	r1, [pc, #24]	; (8002aec <HAL_RCC_ClockConfig+0x25c>)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <HAL_RCC_ClockConfig+0x25c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e040      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2de>
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_RCC_ClockConfig+0x2e8>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	491a      	ldr	r1, [pc, #104]	; (8002b78 <HAL_RCC_ClockConfig+0x2e8>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_RCC_ClockConfig+0x2e8>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4912      	ldr	r1, [pc, #72]	; (8002b78 <HAL_RCC_ClockConfig+0x2e8>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b32:	f000 f829 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8002b36:	4601      	mov	r1, r0
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_RCC_ClockConfig+0x2e8>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b40:	22f0      	movs	r2, #240	; 0xf0
 8002b42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	fa92 f2a2 	rbit	r2, r2
 8002b4a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	fab2 f282 	clz	r2, r2
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	40d3      	lsrs	r3, r2
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x2ec>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <HAL_RCC_ClockConfig+0x2f0>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_RCC_ClockConfig+0x2f4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd ffc8 	bl	8000afc <HAL_InitTick>
  
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3778      	adds	r7, #120	; 0x78
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	080046a0 	.word	0x080046a0
 8002b80:	20000000 	.word	0x20000000
 8002b84:	20000004 	.word	0x20000004

08002b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b08b      	sub	sp, #44	; 0x2c
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ba2:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x36>
 8002bb6:	e03c      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bb8:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bba:	623b      	str	r3, [r7, #32]
      break;
 8002bbc:	e03c      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bc4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bc8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	fa92 f2a2 	rbit	r2, r2
 8002bd0:	607a      	str	r2, [r7, #4]
  return result;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	fab2 f282 	clz	r2, r2
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	40d3      	lsrs	r3, r2
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	220f      	movs	r2, #15
 8002bec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	fa92 f2a2 	rbit	r2, r2
 8002bf4:	60fa      	str	r2, [r7, #12]
  return result;
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	fab2 f282 	clz	r2, r2
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	40d3      	lsrs	r3, r2
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c10:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c20:	e004      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	623b      	str	r3, [r7, #32]
      break;
 8002c30:	e002      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c34:	623b      	str	r3, [r7, #32]
      break;
 8002c36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	372c      	adds	r7, #44	; 0x2c
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	007a1200 	.word	0x007a1200
 8002c50:	080046b8 	.word	0x080046b8
 8002c54:	080046c8 	.word	0x080046c8
 8002c58:	003d0900 	.word	0x003d0900

08002c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000000 	.word	0x20000000

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c7a:	f7ff ffef 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c7e:	4601      	mov	r1, r0
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	fa92 f2a2 	rbit	r2, r2
 8002c94:	603a      	str	r2, [r7, #0]
  return result;
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	fab2 f282 	clz	r2, r2
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	40d3      	lsrs	r3, r2
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	080046b0 	.word	0x080046b0

08002cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cbe:	f7ff ffcd 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ccc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	fa92 f2a2 	rbit	r2, r2
 8002cd8:	603a      	str	r2, [r7, #0]
  return result;
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	fab2 f282 	clz	r2, r2
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	40d3      	lsrs	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	080046b0 	.word	0x080046b0

08002cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b092      	sub	sp, #72	; 0x48
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80cd 	beq.w	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d20:	4b86      	ldr	r3, [pc, #536]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10e      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2c:	4b83      	ldr	r3, [pc, #524]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	4a82      	ldr	r2, [pc, #520]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d36:	61d3      	str	r3, [r2, #28]
 8002d38:	4b80      	ldr	r3, [pc, #512]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4a:	4b7d      	ldr	r3, [pc, #500]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d118      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d56:	4b7a      	ldr	r3, [pc, #488]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a79      	ldr	r2, [pc, #484]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d62:	f7fd ff0f 	bl	8000b84 <HAL_GetTick>
 8002d66:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	e008      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6a:	f7fd ff0b 	bl	8000b84 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b64      	cmp	r3, #100	; 0x64
 8002d76:	d901      	bls.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0db      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	4b70      	ldr	r3, [pc, #448]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d88:	4b6c      	ldr	r3, [pc, #432]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d90:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d07d      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d076      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002da6:	4b65      	ldr	r3, [pc, #404]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4b5e      	ldr	r3, [pc, #376]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	461a      	mov	r2, r3
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b55      	ldr	r3, [pc, #340]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	461a      	mov	r2, r3
 8002df4:	2300      	movs	r3, #0
 8002df6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002df8:	4a50      	ldr	r2, [pc, #320]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d045      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fd febc 	bl	8000b84 <HAL_GetTick>
 8002e0c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fd feb8 	bl	8000b84 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e086      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002e26:	2302      	movs	r3, #2
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	2302      	movs	r3, #2
 8002e34:	623b      	str	r3, [r7, #32]
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	61fb      	str	r3, [r7, #28]
  return result;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d102      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002e54:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	e007      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	613a      	str	r2, [r7, #16]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	fa92 f2a2 	rbit	r2, r2
 8002e74:	60fa      	str	r2, [r7, #12]
  return result;
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	fab2 f282 	clz	r2, r2
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	f002 021f 	and.w	r2, r2, #31
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0bd      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e94:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4926      	ldr	r1, [pc, #152]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ea6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d105      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec6:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	491a      	ldr	r1, [pc, #104]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee4:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	f023 0210 	bic.w	r2, r3, #16
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4912      	ldr	r1, [pc, #72]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	490b      	ldr	r1, [pc, #44]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	4903      	ldr	r1, [pc, #12]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3748      	adds	r7, #72	; 0x48
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40007000 	.word	0x40007000
 8002f44:	10908100 	.word	0x10908100

08002f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e049      	b.n	8002fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd fc5a 	bl	8000828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f000 fb1a 	bl	80035c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e049      	b.n	800309c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d106      	bne.n	8003022 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f841 	bl	80030a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3304      	adds	r3, #4
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f000 fac3 	bl	80035c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e097      	b.n	80031fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fd fbc1 	bl	8000868 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80030fc:	f023 0307 	bic.w	r3, r3, #7
 8003100:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3304      	adds	r3, #4
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f000 fa57 	bl	80035c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313a:	f023 0303 	bic.w	r3, r3, #3
 800313e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	4313      	orrs	r3, r2
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003158:	f023 030c 	bic.w	r3, r3, #12
 800315c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	4313      	orrs	r3, r2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	011a      	lsls	r2, r3, #4
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	031b      	lsls	r3, r3, #12
 8003188:	4313      	orrs	r3, r2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003196:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800319e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	4313      	orrs	r3, r2
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800321e:	2302      	movs	r3, #2
 8003220:	e0ff      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b14      	cmp	r3, #20
 800322e:	f200 80f0 	bhi.w	8003412 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003232:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	0800328d 	.word	0x0800328d
 800323c:	08003413 	.word	0x08003413
 8003240:	08003413 	.word	0x08003413
 8003244:	08003413 	.word	0x08003413
 8003248:	080032cd 	.word	0x080032cd
 800324c:	08003413 	.word	0x08003413
 8003250:	08003413 	.word	0x08003413
 8003254:	08003413 	.word	0x08003413
 8003258:	0800330f 	.word	0x0800330f
 800325c:	08003413 	.word	0x08003413
 8003260:	08003413 	.word	0x08003413
 8003264:	08003413 	.word	0x08003413
 8003268:	0800334f 	.word	0x0800334f
 800326c:	08003413 	.word	0x08003413
 8003270:	08003413 	.word	0x08003413
 8003274:	08003413 	.word	0x08003413
 8003278:	08003391 	.word	0x08003391
 800327c:	08003413 	.word	0x08003413
 8003280:	08003413 	.word	0x08003413
 8003284:	08003413 	.word	0x08003413
 8003288:	080033d1 	.word	0x080033d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fa0c 	bl	80036b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0208 	orr.w	r2, r2, #8
 80032a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0204 	bic.w	r2, r2, #4
 80032b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6999      	ldr	r1, [r3, #24]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	619a      	str	r2, [r3, #24]
      break;
 80032ca:	e0a5      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fa72 	bl	80037bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6999      	ldr	r1, [r3, #24]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	021a      	lsls	r2, r3, #8
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	619a      	str	r2, [r3, #24]
      break;
 800330c:	e084      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fad1 	bl	80038bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0208 	orr.w	r2, r2, #8
 8003328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0204 	bic.w	r2, r2, #4
 8003338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69d9      	ldr	r1, [r3, #28]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	61da      	str	r2, [r3, #28]
      break;
 800334c:	e064      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fb2f 	bl	80039b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69d9      	ldr	r1, [r3, #28]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	021a      	lsls	r2, r3, #8
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	61da      	str	r2, [r3, #28]
      break;
 800338e:	e043      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fb72 	bl	8003a80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0208 	orr.w	r2, r2, #8
 80033aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033ce:	e023      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fbb0 	bl	8003b3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	021a      	lsls	r2, r3, #8
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003410:	e002      	b.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	75fb      	strb	r3, [r7, #23]
      break;
 8003416:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003420:	7dfb      	ldrb	r3, [r7, #23]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop

0800342c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_TIM_ConfigClockSource+0x1c>
 8003444:	2302      	movs	r3, #2
 8003446:	e0b6      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x18a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800346a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003484:	d03e      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0xd8>
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348a:	f200 8087 	bhi.w	800359c <HAL_TIM_ConfigClockSource+0x170>
 800348e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003492:	f000 8086 	beq.w	80035a2 <HAL_TIM_ConfigClockSource+0x176>
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349a:	d87f      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x170>
 800349c:	2b70      	cmp	r3, #112	; 0x70
 800349e:	d01a      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0xaa>
 80034a0:	2b70      	cmp	r3, #112	; 0x70
 80034a2:	d87b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x170>
 80034a4:	2b60      	cmp	r3, #96	; 0x60
 80034a6:	d050      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x11e>
 80034a8:	2b60      	cmp	r3, #96	; 0x60
 80034aa:	d877      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x170>
 80034ac:	2b50      	cmp	r3, #80	; 0x50
 80034ae:	d03c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0xfe>
 80034b0:	2b50      	cmp	r3, #80	; 0x50
 80034b2:	d873      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x170>
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d058      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x13e>
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d86f      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x170>
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d064      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15e>
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d86b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x170>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d060      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15e>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d867      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x170>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d05c      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15e>
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d05a      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15e>
 80034d4:	e062      	b.n	800359c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6899      	ldr	r1, [r3, #8]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f000 fc03 	bl	8003cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	609a      	str	r2, [r3, #8]
      break;
 8003502:	e04f      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6899      	ldr	r1, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f000 fbec 	bl	8003cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003526:	609a      	str	r2, [r3, #8]
      break;
 8003528:	e03c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 fb60 	bl	8003bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2150      	movs	r1, #80	; 0x50
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fbb9 	bl	8003cba <TIM_ITRx_SetConfig>
      break;
 8003548:	e02c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f000 fb7f 	bl	8003c5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2160      	movs	r1, #96	; 0x60
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fba9 	bl	8003cba <TIM_ITRx_SetConfig>
      break;
 8003568:	e01c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	461a      	mov	r2, r3
 8003578:	f000 fb40 	bl	8003bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2140      	movs	r1, #64	; 0x40
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fb99 	bl	8003cba <TIM_ITRx_SetConfig>
      break;
 8003588:	e00c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f000 fb90 	bl	8003cba <TIM_ITRx_SetConfig>
      break;
 800359a:	e003      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
      break;
 80035a0:	e000      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80035a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a32      	ldr	r2, [pc, #200]	; (800369c <TIM_Base_SetConfig+0xdc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d007      	beq.n	80035e8 <TIM_Base_SetConfig+0x28>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035de:	d003      	beq.n	80035e8 <TIM_Base_SetConfig+0x28>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a2f      	ldr	r2, [pc, #188]	; (80036a0 <TIM_Base_SetConfig+0xe0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d108      	bne.n	80035fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a27      	ldr	r2, [pc, #156]	; (800369c <TIM_Base_SetConfig+0xdc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003608:	d00f      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a24      	ldr	r2, [pc, #144]	; (80036a0 <TIM_Base_SetConfig+0xe0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00b      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a23      	ldr	r2, [pc, #140]	; (80036a4 <TIM_Base_SetConfig+0xe4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a22      	ldr	r2, [pc, #136]	; (80036a8 <TIM_Base_SetConfig+0xe8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d003      	beq.n	800362a <TIM_Base_SetConfig+0x6a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a21      	ldr	r2, [pc, #132]	; (80036ac <TIM_Base_SetConfig+0xec>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d108      	bne.n	800363c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a0e      	ldr	r2, [pc, #56]	; (800369c <TIM_Base_SetConfig+0xdc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00b      	beq.n	8003680 <TIM_Base_SetConfig+0xc0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <TIM_Base_SetConfig+0xe4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d007      	beq.n	8003680 <TIM_Base_SetConfig+0xc0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a0d      	ldr	r2, [pc, #52]	; (80036a8 <TIM_Base_SetConfig+0xe8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_Base_SetConfig+0xc0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <TIM_Base_SetConfig+0xec>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	615a      	str	r2, [r3, #20]
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40012c00 	.word	0x40012c00
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40014000 	.word	0x40014000
 80036a8:	40014400 	.word	0x40014400
 80036ac:	40014800 	.word	0x40014800

080036b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f023 0201 	bic.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0303 	bic.w	r3, r3, #3
 80036ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f023 0302 	bic.w	r3, r3, #2
 80036fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a28      	ldr	r2, [pc, #160]	; (80037ac <TIM_OC1_SetConfig+0xfc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00b      	beq.n	8003728 <TIM_OC1_SetConfig+0x78>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a27      	ldr	r2, [pc, #156]	; (80037b0 <TIM_OC1_SetConfig+0x100>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_OC1_SetConfig+0x78>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a26      	ldr	r2, [pc, #152]	; (80037b4 <TIM_OC1_SetConfig+0x104>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_OC1_SetConfig+0x78>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a25      	ldr	r2, [pc, #148]	; (80037b8 <TIM_OC1_SetConfig+0x108>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10c      	bne.n	8003742 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0308 	bic.w	r3, r3, #8
 800372e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a19      	ldr	r2, [pc, #100]	; (80037ac <TIM_OC1_SetConfig+0xfc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00b      	beq.n	8003762 <TIM_OC1_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a18      	ldr	r2, [pc, #96]	; (80037b0 <TIM_OC1_SetConfig+0x100>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <TIM_OC1_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <TIM_OC1_SetConfig+0x104>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d003      	beq.n	8003762 <TIM_OC1_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a16      	ldr	r2, [pc, #88]	; (80037b8 <TIM_OC1_SetConfig+0x108>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d111      	bne.n	8003786 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	621a      	str	r2, [r3, #32]
}
 80037a0:	bf00      	nop
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40014000 	.word	0x40014000
 80037b4:	40014400 	.word	0x40014400
 80037b8:	40014800 	.word	0x40014800

080037bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f023 0210 	bic.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0320 	bic.w	r3, r3, #32
 800380a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a24      	ldr	r2, [pc, #144]	; (80038ac <TIM_OC2_SetConfig+0xf0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10d      	bne.n	800383c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800383a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <TIM_OC2_SetConfig+0xf0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00b      	beq.n	800385c <TIM_OC2_SetConfig+0xa0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <TIM_OC2_SetConfig+0xf4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d007      	beq.n	800385c <TIM_OC2_SetConfig+0xa0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <TIM_OC2_SetConfig+0xf8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <TIM_OC2_SetConfig+0xa0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <TIM_OC2_SetConfig+0xfc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d113      	bne.n	8003884 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003862:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800386a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40014400 	.word	0x40014400
 80038b8:	40014800 	.word	0x40014800

080038bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a23      	ldr	r2, [pc, #140]	; (80039a8 <TIM_OC3_SetConfig+0xec>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d10d      	bne.n	800393a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003938:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <TIM_OC3_SetConfig+0xec>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00b      	beq.n	800395a <TIM_OC3_SetConfig+0x9e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a19      	ldr	r2, [pc, #100]	; (80039ac <TIM_OC3_SetConfig+0xf0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <TIM_OC3_SetConfig+0x9e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a18      	ldr	r2, [pc, #96]	; (80039b0 <TIM_OC3_SetConfig+0xf4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <TIM_OC3_SetConfig+0x9e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <TIM_OC3_SetConfig+0xf8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d113      	bne.n	8003982 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40014000 	.word	0x40014000
 80039b0:	40014400 	.word	0x40014400
 80039b4:	40014800 	.word	0x40014800

080039b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	031b      	lsls	r3, r3, #12
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <TIM_OC4_SetConfig+0xb8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_OC4_SetConfig+0x7c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <TIM_OC4_SetConfig+0xbc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_OC4_SetConfig+0x7c>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <TIM_OC4_SetConfig+0xc0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_OC4_SetConfig+0x7c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <TIM_OC4_SetConfig+0xc4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d109      	bne.n	8003a48 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	019b      	lsls	r3, r3, #6
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40014000 	.word	0x40014000
 8003a78:	40014400 	.word	0x40014400
 8003a7c:	40014800 	.word	0x40014800

08003a80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ac4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <TIM_OC5_SetConfig+0xac>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00b      	beq.n	8003af2 <TIM_OC5_SetConfig+0x72>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a14      	ldr	r2, [pc, #80]	; (8003b30 <TIM_OC5_SetConfig+0xb0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <TIM_OC5_SetConfig+0x72>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <TIM_OC5_SetConfig+0xb4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <TIM_OC5_SetConfig+0x72>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <TIM_OC5_SetConfig+0xb8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d109      	bne.n	8003b06 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	621a      	str	r2, [r3, #32]
}
 8003b20:	bf00      	nop
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800

08003b3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	051b      	lsls	r3, r3, #20
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a16      	ldr	r2, [pc, #88]	; (8003bec <TIM_OC6_SetConfig+0xb0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00b      	beq.n	8003bb0 <TIM_OC6_SetConfig+0x74>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <TIM_OC6_SetConfig+0xb4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <TIM_OC6_SetConfig+0x74>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <TIM_OC6_SetConfig+0xb8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_OC6_SetConfig+0x74>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <TIM_OC6_SetConfig+0xbc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d109      	bne.n	8003bc4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	40014400 	.word	0x40014400
 8003bf8:	40014800 	.word	0x40014800

08003bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f023 0201 	bic.w	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f023 030a 	bic.w	r3, r3, #10
 8003c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	621a      	str	r2, [r3, #32]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b087      	sub	sp, #28
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f023 0210 	bic.w	r2, r3, #16
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	031b      	lsls	r3, r3, #12
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	621a      	str	r2, [r3, #32]
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f043 0307 	orr.w	r3, r3, #7
 8003cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	609a      	str	r2, [r3, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	021a      	lsls	r2, r3, #8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	bf00      	nop
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e054      	b.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00e      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d009      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a11      	ldr	r2, [pc, #68]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10c      	bne.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40014000 	.word	0x40014000

08003e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e060      	b.n	8003eea <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d115      	bne.n	8003ed8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	051b      	lsls	r3, r3, #20
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40012c00 	.word	0x40012c00

08003efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e040      	b.n	8003f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fc fd68 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f82c 	bl	8003f98 <UART_SetConfig>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e022      	b.n	8003f90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f956 	bl	8004204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f9dd 	bl	8004348 <UART_CheckIdleState>
 8003f8e:	4603      	mov	r3, r0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	4b8a      	ldr	r3, [pc, #552]	; (80041ec <UART_SetConfig+0x254>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	6979      	ldr	r1, [r7, #20]
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	430a      	orrs	r2, r1
 8004008:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a78      	ldr	r2, [pc, #480]	; (80041f0 <UART_SetConfig+0x258>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d120      	bne.n	8004056 <UART_SetConfig+0xbe>
 8004014:	4b77      	ldr	r3, [pc, #476]	; (80041f4 <UART_SetConfig+0x25c>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b03      	cmp	r3, #3
 800401e:	d817      	bhi.n	8004050 <UART_SetConfig+0xb8>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <UART_SetConfig+0x90>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	08004039 	.word	0x08004039
 800402c:	08004045 	.word	0x08004045
 8004030:	0800404b 	.word	0x0800404b
 8004034:	0800403f 	.word	0x0800403f
 8004038:	2300      	movs	r3, #0
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e01d      	b.n	800407a <UART_SetConfig+0xe2>
 800403e:	2302      	movs	r3, #2
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e01a      	b.n	800407a <UART_SetConfig+0xe2>
 8004044:	2304      	movs	r3, #4
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e017      	b.n	800407a <UART_SetConfig+0xe2>
 800404a:	2308      	movs	r3, #8
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e014      	b.n	800407a <UART_SetConfig+0xe2>
 8004050:	2310      	movs	r3, #16
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e011      	b.n	800407a <UART_SetConfig+0xe2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a67      	ldr	r2, [pc, #412]	; (80041f8 <UART_SetConfig+0x260>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d102      	bne.n	8004066 <UART_SetConfig+0xce>
 8004060:	2300      	movs	r3, #0
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e009      	b.n	800407a <UART_SetConfig+0xe2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a64      	ldr	r2, [pc, #400]	; (80041fc <UART_SetConfig+0x264>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d102      	bne.n	8004076 <UART_SetConfig+0xde>
 8004070:	2300      	movs	r3, #0
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e001      	b.n	800407a <UART_SetConfig+0xe2>
 8004076:	2310      	movs	r3, #16
 8004078:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004082:	d15a      	bne.n	800413a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004084:	7ffb      	ldrb	r3, [r7, #31]
 8004086:	2b08      	cmp	r3, #8
 8004088:	d827      	bhi.n	80040da <UART_SetConfig+0x142>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <UART_SetConfig+0xf8>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040b5 	.word	0x080040b5
 8004094:	080040bd 	.word	0x080040bd
 8004098:	080040c5 	.word	0x080040c5
 800409c:	080040db 	.word	0x080040db
 80040a0:	080040cb 	.word	0x080040cb
 80040a4:	080040db 	.word	0x080040db
 80040a8:	080040db 	.word	0x080040db
 80040ac:	080040db 	.word	0x080040db
 80040b0:	080040d3 	.word	0x080040d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040b4:	f7fe fdde 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 80040b8:	61b8      	str	r0, [r7, #24]
        break;
 80040ba:	e013      	b.n	80040e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040bc:	f7fe fdfc 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 80040c0:	61b8      	str	r0, [r7, #24]
        break;
 80040c2:	e00f      	b.n	80040e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c4:	4b4e      	ldr	r3, [pc, #312]	; (8004200 <UART_SetConfig+0x268>)
 80040c6:	61bb      	str	r3, [r7, #24]
        break;
 80040c8:	e00c      	b.n	80040e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ca:	f7fe fd5d 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 80040ce:	61b8      	str	r0, [r7, #24]
        break;
 80040d0:	e008      	b.n	80040e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d6:	61bb      	str	r3, [r7, #24]
        break;
 80040d8:	e004      	b.n	80040e4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	77bb      	strb	r3, [r7, #30]
        break;
 80040e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d074      	beq.n	80041d4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	005a      	lsls	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	441a      	add	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b0f      	cmp	r3, #15
 8004104:	d916      	bls.n	8004134 <UART_SetConfig+0x19c>
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410c:	d212      	bcs.n	8004134 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f023 030f 	bic.w	r3, r3, #15
 8004116:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	085b      	lsrs	r3, r3, #1
 800411c:	b29b      	uxth	r3, r3
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	b29a      	uxth	r2, r3
 8004124:	89fb      	ldrh	r3, [r7, #14]
 8004126:	4313      	orrs	r3, r2
 8004128:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	89fa      	ldrh	r2, [r7, #14]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	e04f      	b.n	80041d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	77bb      	strb	r3, [r7, #30]
 8004138:	e04c      	b.n	80041d4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800413a:	7ffb      	ldrb	r3, [r7, #31]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d828      	bhi.n	8004192 <UART_SetConfig+0x1fa>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0x1b0>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	0800416d 	.word	0x0800416d
 800414c:	08004175 	.word	0x08004175
 8004150:	0800417d 	.word	0x0800417d
 8004154:	08004193 	.word	0x08004193
 8004158:	08004183 	.word	0x08004183
 800415c:	08004193 	.word	0x08004193
 8004160:	08004193 	.word	0x08004193
 8004164:	08004193 	.word	0x08004193
 8004168:	0800418b 	.word	0x0800418b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7fe fd82 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8004170:	61b8      	str	r0, [r7, #24]
        break;
 8004172:	e013      	b.n	800419c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004174:	f7fe fda0 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 8004178:	61b8      	str	r0, [r7, #24]
        break;
 800417a:	e00f      	b.n	800419c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800417c:	4b20      	ldr	r3, [pc, #128]	; (8004200 <UART_SetConfig+0x268>)
 800417e:	61bb      	str	r3, [r7, #24]
        break;
 8004180:	e00c      	b.n	800419c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004182:	f7fe fd01 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8004186:	61b8      	str	r0, [r7, #24]
        break;
 8004188:	e008      	b.n	800419c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800418a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800418e:	61bb      	str	r3, [r7, #24]
        break;
 8004190:	e004      	b.n	800419c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	77bb      	strb	r3, [r7, #30]
        break;
 800419a:	bf00      	nop
    }

    if (pclk != 0U)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	085a      	lsrs	r2, r3, #1
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	441a      	add	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b0f      	cmp	r3, #15
 80041ba:	d909      	bls.n	80041d0 <UART_SetConfig+0x238>
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c2:	d205      	bcs.n	80041d0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60da      	str	r2, [r3, #12]
 80041ce:	e001      	b.n	80041d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	efff69f3 	.word	0xefff69f3
 80041f0:	40013800 	.word	0x40013800
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40004400 	.word	0x40004400
 80041fc:	40004800 	.word	0x40004800
 8004200:	007a1200 	.word	0x007a1200

08004204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01a      	beq.n	800431a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004302:	d10a      	bne.n	800431a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
  }
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b098      	sub	sp, #96	; 0x60
 800434c:	af02      	add	r7, sp, #8
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004358:	f7fc fc14 	bl	8000b84 <HAL_GetTick>
 800435c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b08      	cmp	r3, #8
 800436a:	d12e      	bne.n	80043ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800436c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004374:	2200      	movs	r2, #0
 8004376:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f88c 	bl	8004498 <UART_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d021      	beq.n	80043ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439a:	653b      	str	r3, [r7, #80]	; 0x50
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a4:	647b      	str	r3, [r7, #68]	; 0x44
 80043a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e6      	bne.n	8004386 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e062      	b.n	8004490 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d149      	bne.n	800446c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e0:	2200      	movs	r2, #0
 80043e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f856 	bl	8004498 <UART_WaitOnFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d03c      	beq.n	800446c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004410:	633b      	str	r3, [r7, #48]	; 0x30
 8004412:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e6      	bne.n	80043f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	60fb      	str	r3, [r7, #12]
   return(result);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0301 	bic.w	r3, r3, #1
 800443a:	64bb      	str	r3, [r7, #72]	; 0x48
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004444:	61fa      	str	r2, [r7, #28]
 8004446:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	69b9      	ldr	r1, [r7, #24]
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	617b      	str	r3, [r7, #20]
   return(result);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e011      	b.n	8004490 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3758      	adds	r7, #88	; 0x58
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a8:	e049      	b.n	800453e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044b0:	d045      	beq.n	800453e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fc fb67 	bl	8000b84 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e048      	b.n	800455e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d031      	beq.n	800453e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d110      	bne.n	800450a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2208      	movs	r2, #8
 80044ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f838 	bl	8004566 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2208      	movs	r2, #8
 80044fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e029      	b.n	800455e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004518:	d111      	bne.n	800453e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004522:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f81e 	bl	8004566 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e00f      	b.n	800455e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4013      	ands	r3, r2
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	429a      	cmp	r2, r3
 800455a:	d0a6      	beq.n	80044aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004566:	b480      	push	{r7}
 8004568:	b095      	sub	sp, #84	; 0x54
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458c:	643b      	str	r3, [r7, #64]	; 0x40
 800458e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e6      	bne.n	800456e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3308      	adds	r3, #8
 80045a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3308      	adds	r3, #8
 80045be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d118      	bne.n	800460e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f023 0310 	bic.w	r3, r3, #16
 80045f0:	647b      	str	r3, [r7, #68]	; 0x44
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6979      	ldr	r1, [r7, #20]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	613b      	str	r3, [r7, #16]
   return(result);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e6      	bne.n	80045dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004622:	bf00      	nop
 8004624:	3754      	adds	r7, #84	; 0x54
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
	...

08004630 <__libc_init_array>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	4d0d      	ldr	r5, [pc, #52]	; (8004668 <__libc_init_array+0x38>)
 8004634:	4c0d      	ldr	r4, [pc, #52]	; (800466c <__libc_init_array+0x3c>)
 8004636:	1b64      	subs	r4, r4, r5
 8004638:	10a4      	asrs	r4, r4, #2
 800463a:	2600      	movs	r6, #0
 800463c:	42a6      	cmp	r6, r4
 800463e:	d109      	bne.n	8004654 <__libc_init_array+0x24>
 8004640:	4d0b      	ldr	r5, [pc, #44]	; (8004670 <__libc_init_array+0x40>)
 8004642:	4c0c      	ldr	r4, [pc, #48]	; (8004674 <__libc_init_array+0x44>)
 8004644:	f000 f820 	bl	8004688 <_init>
 8004648:	1b64      	subs	r4, r4, r5
 800464a:	10a4      	asrs	r4, r4, #2
 800464c:	2600      	movs	r6, #0
 800464e:	42a6      	cmp	r6, r4
 8004650:	d105      	bne.n	800465e <__libc_init_array+0x2e>
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	f855 3b04 	ldr.w	r3, [r5], #4
 8004658:	4798      	blx	r3
 800465a:	3601      	adds	r6, #1
 800465c:	e7ee      	b.n	800463c <__libc_init_array+0xc>
 800465e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004662:	4798      	blx	r3
 8004664:	3601      	adds	r6, #1
 8004666:	e7f2      	b.n	800464e <__libc_init_array+0x1e>
 8004668:	080046d8 	.word	0x080046d8
 800466c:	080046d8 	.word	0x080046d8
 8004670:	080046d8 	.word	0x080046d8
 8004674:	080046dc 	.word	0x080046dc

08004678 <memset>:
 8004678:	4402      	add	r2, r0
 800467a:	4603      	mov	r3, r0
 800467c:	4293      	cmp	r3, r2
 800467e:	d100      	bne.n	8004682 <memset+0xa>
 8004680:	4770      	bx	lr
 8004682:	f803 1b01 	strb.w	r1, [r3], #1
 8004686:	e7f9      	b.n	800467c <memset+0x4>

08004688 <_init>:
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	bf00      	nop
 800468c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468e:	bc08      	pop	{r3}
 8004690:	469e      	mov	lr, r3
 8004692:	4770      	bx	lr

08004694 <_fini>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	bf00      	nop
 8004698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469a:	bc08      	pop	{r3}
 800469c:	469e      	mov	lr, r3
 800469e:	4770      	bx	lr
