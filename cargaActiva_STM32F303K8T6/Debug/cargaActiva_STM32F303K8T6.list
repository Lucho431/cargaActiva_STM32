
cargaActiva_STM32F303K8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800753c  0800753c  0001753c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800764c  0800764c  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800764c  0800764c  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800764c  0800764c  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08007654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          000002c0  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000388  20000388  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015dab  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea9  00000000  00000000  00035ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00038d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001118  00000000  00000000  00039fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001db1c  00000000  00000000  0003b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c85  00000000  00000000  00058bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae865  00000000  00000000  00071879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001200de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000500c  00000000  00000000  00120130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007524 	.word	0x08007524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08007524 	.word	0x08007524

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Read16>:




uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af04      	add	r7, sp, #16
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6818      	ldr	r0, [r3, #0]
 8000280:	78fb      	ldrb	r3, [r7, #3]
 8000282:	b29a      	uxth	r2, r3
 8000284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000288:	9302      	str	r3, [sp, #8]
 800028a:	2302      	movs	r3, #2
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	f107 030c 	add.w	r3, r7, #12
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2301      	movs	r3, #1
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	f002 fd96 	bl	8002dc8 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 800029c:	7b3b      	ldrb	r3, [r7, #12]
 800029e:	021b      	lsls	r3, r3, #8
 80002a0:	b21a      	sxth	r2, r3
 80002a2:	7b7b      	ldrb	r3, [r7, #13]
 80002a4:	b21b      	sxth	r3, r3
 80002a6:	4313      	orrs	r3, r2
 80002a8:	b21b      	sxth	r3, r3
 80002aa:	b29b      	uxth	r3, r3
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b088      	sub	sp, #32
 80002b8:	af04      	add	r7, sp, #16
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	70fb      	strb	r3, [r7, #3]
 80002c0:	4613      	mov	r3, r2
 80002c2:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80002c4:	883b      	ldrh	r3, [r7, #0]
 80002c6:	0a1b      	lsrs	r3, r3, #8
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80002ce:	883b      	ldrh	r3, [r7, #0]
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	6818      	ldr	r0, [r3, #0]
 80002d8:	78fb      	ldrb	r3, [r7, #3]
 80002da:	b29a      	uxth	r2, r3
 80002dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e0:	9302      	str	r3, [sp, #8]
 80002e2:	2302      	movs	r3, #2
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2301      	movs	r3, #1
 80002ee:	2180      	movs	r1, #128	; 0x80
 80002f0:	f002 fc56 	bl	8002ba0 <HAL_I2C_Mem_Write>
}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <INA219_ReadCurrent_raw>:
	return ((result >> 3  ) * 4);

}

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000304:	2104      	movs	r1, #4
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f7ff ffb2 	bl	8000270 <Read16>
 800030c:	4603      	mov	r3, r0
 800030e:	81fb      	strh	r3, [r7, #14]

	return (result );
 8000310:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <INA219_ReadCurrent_float>:
	int16_t result = INA219_ReadCurrent_raw(ina219);

	return (result / ina219_currentDivider_mA );
}

float INA219_ReadCurrent_float(INA219_t *ina219){
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f7ff ffe9 	bl	80002fc <INA219_ReadCurrent_raw>
 800032a:	4603      	mov	r3, r0
 800032c:	81fb      	strh	r3, [r7, #14]

	return ( result * currentLSB );
 800032e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000332:	ee07 3a90 	vmov	s15, r3
 8000336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <INA219_ReadCurrent_float+0x34>)
 800033c:	edd3 7a00 	vldr	s15, [r3]
 8000340:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000344:	eeb0 0a67 	vmov.f32	s0, s15
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000

08000354 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 800035c:	2101      	movs	r1, #1
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f7ff ff86 	bl	8000270 <Read16>
 8000364:	4603      	mov	r3, r0
 8000366:	81fb      	strh	r3, [r7, #14]

	return result;
 8000368:	89fb      	ldrh	r3, [r7, #14]
	return (result * 0.01 );
}
 800036a:	4618      	mov	r0, r3
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 800037a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800037e:	2100      	movs	r1, #0
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff ff97 	bl	80002b4 <Write16>
	HAL_Delay(1);
 8000386:	2001      	movs	r0, #1
 8000388:	f001 fd08 	bl	8001d9c <HAL_Delay>
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80003a0:	887b      	ldrh	r3, [r7, #2]
 80003a2:	461a      	mov	r2, r3
 80003a4:	2105      	movs	r1, #5
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f7ff ff84 	bl	80002b4 <Write16>
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 80003c0:	887b      	ldrh	r3, [r7, #2]
 80003c2:	461a      	mov	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f7ff ff74 	bl	80002b4 <Write16>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <INA219_setCalibration_lfs>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_lfs(INA219_t *ina219)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 80003dc:	f643 139f 	movw	r3, #14751	; 0x399f
 80003e0:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4194;
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <INA219_setCalibration_lfs+0x40>)
 80003e4:	f241 0262 	movw	r2, #4194	; 0x1062
 80003e8:	801a      	strh	r2, [r3, #0]
	//ina219_calibrationValue = 3890;
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <INA219_setCalibration_lfs+0x44>)
 80003ec:	220a      	movs	r2, #10
 80003ee:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <INA219_setCalibration_lfs+0x48>)
 80003f2:	2202      	movs	r2, #2
 80003f4:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <INA219_setCalibration_lfs+0x40>)
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	4619      	mov	r1, r3
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff ffc9 	bl	8000394 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8000402:	89fb      	ldrh	r3, [r7, #14]
 8000404:	4619      	mov	r1, r3
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff ffd4 	bl	80003b4 <INA219_setConfig>
}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000e4 	.word	0x200000e4
 8000418:	200000e6 	.word	0x200000e6
 800041c:	200000e8 	.word	0x200000e8

08000420 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	4613      	mov	r3, r2
 800042c:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	68ba      	ldr	r2, [r7, #8]
 8000432:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	79fa      	ldrb	r2, [r7, #7]
 8000438:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <INA219_Init+0x5c>)
 800043c:	2200      	movs	r2, #0
 800043e:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <INA219_Init+0x60>)
 8000442:	2200      	movs	r2, #0
 8000444:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	b29b      	uxth	r3, r3
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	b299      	uxth	r1, r3
 800044e:	2302      	movs	r3, #2
 8000450:	2203      	movs	r2, #3
 8000452:	68b8      	ldr	r0, [r7, #8]
 8000454:	f002 fdd2 	bl	8002ffc <HAL_I2C_IsDeviceReady>
 8000458:	4603      	mov	r3, r0
 800045a:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800045c:	7dfb      	ldrb	r3, [r7, #23]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d107      	bne.n	8000472 <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8000462:	68f8      	ldr	r0, [r7, #12]
 8000464:	f7ff ff85 	bl	8000372 <INA219_Reset>
		//INA219_setCalibration_32V_2A(ina219);
		INA219_setCalibration_lfs(ina219);
 8000468:	68f8      	ldr	r0, [r7, #12]
 800046a:	f7ff ffb3 	bl	80003d4 <INA219_setCalibration_lfs>

		return 1;
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <INA219_Init+0x54>
	}

	else
	{
		return 0;
 8000472:	2300      	movs	r3, #0
	}
}
 8000474:	4618      	mov	r0, r3
 8000476:	3718      	adds	r7, #24
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	200000e6 	.word	0x200000e6
 8000480:	200000e8 	.word	0x200000e8

08000484 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000494:	4b1f      	ldr	r3, [pc, #124]	; (8000514 <MX_ADC1_Init+0x90>)
 8000496:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800049a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800049c:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <MX_ADC1_Init+0x90>)
 800049e:	2200      	movs	r2, #0
 80004a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004a2:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <MX_ADC1_Init+0x90>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a8:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <MX_ADC1_Init+0x90>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004ae:	4b19      	ldr	r3, [pc, #100]	; (8000514 <MX_ADC1_Init+0x90>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004b4:	4b17      	ldr	r3, [pc, #92]	; (8000514 <MX_ADC1_Init+0x90>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <MX_ADC1_Init+0x90>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_ADC1_Init+0x90>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <MX_ADC1_Init+0x90>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004d0:	4b10      	ldr	r3, [pc, #64]	; (8000514 <MX_ADC1_Init+0x90>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_ADC1_Init+0x90>)
 80004d8:	2200      	movs	r2, #0
 80004da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004dc:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <MX_ADC1_Init+0x90>)
 80004de:	2200      	movs	r2, #0
 80004e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e2:	480c      	ldr	r0, [pc, #48]	; (8000514 <MX_ADC1_Init+0x90>)
 80004e4:	f001 fc7e 	bl	8001de4 <HAL_ADC_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80004ee:	f000 fbcd 	bl	8000c8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4619      	mov	r1, r3
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <MX_ADC1_Init+0x90>)
 80004fc:	f001 fe04 	bl	8002108 <HAL_ADCEx_MultiModeConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000506:	f000 fbc1 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000ec 	.word	0x200000ec

08000518 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000538:	d124      	bne.n	8000584 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <HAL_ADC_MspInit+0x74>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a13      	ldr	r2, [pc, #76]	; (800058c <HAL_ADC_MspInit+0x74>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <HAL_ADC_MspInit+0x74>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <HAL_ADC_MspInit+0x74>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a0d      	ldr	r2, [pc, #52]	; (800058c <HAL_ADC_MspInit+0x74>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_ADC_MspInit+0x74>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_1_corriente_Pin|ADC1_2_tension_Pin;
 800056a:	2303      	movs	r3, #3
 800056c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800056e:	2303      	movs	r3, #3
 8000570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f002 f800 	bl	8002584 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000584:	bf00      	nop
 8000586:	3728      	adds	r7, #40	; 0x28
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <MX_GPIO_Init+0x80>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a19      	ldr	r2, [pc, #100]	; (8000610 <MX_GPIO_Init+0x80>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_GPIO_Init+0x80>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_GPIO_Init+0x80>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <MX_GPIO_Init+0x80>)
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_GPIO_Init+0x80>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_GPIO_Init+0x80>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <MX_GPIO_Init+0x80>)
 80005dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_GPIO_Init+0x80>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_D4_sw_Pin;
 80005ee:	2320      	movs	r3, #32
 80005f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IN_D4_sw_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4619      	mov	r1, r3
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_GPIO_Init+0x84>)
 8000602:	f001 ffbf 	bl	8002584 <HAL_GPIO_Init>

}
 8000606:	bf00      	nop
 8000608:	3720      	adds	r7, #32
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000
 8000614:	48000400 	.word	0x48000400

08000618 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_I2C1_Init+0x74>)
 800061e:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <MX_I2C1_Init+0x78>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_I2C1_Init+0x74>)
 8000624:	f240 220b 	movw	r2, #523	; 0x20b
 8000628:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_I2C1_Init+0x74>)
 8000632:	2201      	movs	r2, #1
 8000634:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_I2C1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_I2C1_Init+0x74>)
 8000656:	f002 f91f 	bl	8002898 <HAL_I2C_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 fb14 	bl	8000c8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000664:	2100      	movs	r1, #0
 8000666:	4809      	ldr	r0, [pc, #36]	; (800068c <MX_I2C1_Init+0x74>)
 8000668:	f003 f88a 	bl	8003780 <HAL_I2CEx_ConfigAnalogFilter>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000672:	f000 fb0b 	bl	8000c8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000676:	2100      	movs	r1, #0
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_I2C1_Init+0x74>)
 800067a:	f003 f8cc 	bl	8003816 <HAL_I2CEx_ConfigDigitalFilter>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000684:	f000 fb02 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000013c 	.word	0x2000013c
 8000690:	40005400 	.word	0x40005400

08000694 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a17      	ldr	r2, [pc, #92]	; (8000710 <HAL_I2C_MspInit+0x7c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d127      	bne.n	8000706 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_I2C_MspInit+0x80>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <HAL_I2C_MspInit+0x80>)
 80006bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <HAL_I2C_MspInit+0x80>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ce:	23c0      	movs	r3, #192	; 0xc0
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d2:	2312      	movs	r3, #18
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006da:	2303      	movs	r3, #3
 80006dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006de:	2304      	movs	r3, #4
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <HAL_I2C_MspInit+0x84>)
 80006ea:	f001 ff4b 	bl	8002584 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_I2C_MspInit+0x80>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_I2C_MspInit+0x80>)
 80006f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_I2C_MspInit+0x80>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	; 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40005400 	.word	0x40005400
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400

0800071c <lcd_send_cmd>:

I2C_HandleTypeDef* i2c_handler;  // change your handler here accordingly
uint8_t SLAVE_ADDRESS_LCD; //(0x3F)<<1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f023 030f 	bic.w	r3, r3, #15
 800072c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	f043 030c 	orr.w	r3, r3, #12
 800073a:	b2db      	uxtb	r3, r3
 800073c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	b2db      	uxtb	r3, r3
 8000746:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000748:	7bbb      	ldrb	r3, [r7, #14]
 800074a:	f043 030c 	orr.w	r3, r3, #12
 800074e:	b2db      	uxtb	r3, r3
 8000750:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	b2db      	uxtb	r3, r3
 800075a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <lcd_send_cmd+0x60>)
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <lcd_send_cmd+0x64>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b299      	uxth	r1, r3
 8000766:	f107 0208 	add.w	r2, r7, #8
 800076a:	2364      	movs	r3, #100	; 0x64
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2304      	movs	r3, #4
 8000770:	f002 f922 	bl	80029b8 <HAL_I2C_Master_Transmit>
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000190 	.word	0x20000190
 8000780:	20000194 	.word	0x20000194

08000784 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af02      	add	r7, sp, #8
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f023 030f 	bic.w	r3, r3, #15
 8000794:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	f043 030d 	orr.w	r3, r3, #13
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	f043 0309 	orr.w	r3, r3, #9
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	f043 030d 	orr.w	r3, r3, #13
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	f043 0309 	orr.w	r3, r3, #9
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <lcd_send_data+0x60>)
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <lcd_send_data+0x64>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b299      	uxth	r1, r3
 80007ce:	f107 0208 	add.w	r2, r7, #8
 80007d2:	2364      	movs	r3, #100	; 0x64
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2304      	movs	r3, #4
 80007d8:	f002 f8ee 	bl	80029b8 <HAL_I2C_Master_Transmit>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000190 	.word	0x20000190
 80007e8:	20000194 	.word	0x20000194

080007ec <lcd_clear>:

void lcd_clear (void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80007f2:	2080      	movs	r0, #128	; 0x80
 80007f4:	f7ff ff92 	bl	800071c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	e005      	b.n	800080a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80007fe:	2020      	movs	r0, #32
 8000800:	f7ff ffc0 	bl	8000784 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3301      	adds	r3, #1
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b45      	cmp	r3, #69	; 0x45
 800080e:	ddf6      	ble.n	80007fe <lcd_clear+0x12>
	}
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <lcd_put_cur>:

void lcd_put_cur(int x, int y)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
    switch (y){
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	2b03      	cmp	r3, #3
 800082a:	d82b      	bhi.n	8000884 <lcd_put_cur+0x68>
 800082c:	a201      	add	r2, pc, #4	; (adr r2, 8000834 <lcd_put_cur+0x18>)
 800082e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000832:	bf00      	nop
 8000834:	08000845 	.word	0x08000845
 8000838:	08000855 	.word	0x08000855
 800083c:	08000865 	.word	0x08000865
 8000840:	08000875 	.word	0x08000875
    	case 0:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	3b80      	subs	r3, #128	; 0x80
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff65 	bl	800071c <lcd_send_cmd>
    	break;
 8000852:	e017      	b.n	8000884 <lcd_put_cur+0x68>
    	case 1:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	3b40      	subs	r3, #64	; 0x40
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff5d 	bl	800071c <lcd_send_cmd>
    	break;
 8000862:	e00f      	b.n	8000884 <lcd_put_cur+0x68>
    	case 2:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	3b6c      	subs	r3, #108	; 0x6c
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff55 	bl	800071c <lcd_send_cmd>
    	break;
 8000872:	e007      	b.n	8000884 <lcd_put_cur+0x68>
    	case 3:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	3b2c      	subs	r3, #44	; 0x2c
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff4d 	bl	800071c <lcd_send_cmd>
    	break;
 8000882:	bf00      	nop
    }
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 8000898:	4a22      	ldr	r2, [pc, #136]	; (8000924 <lcd_init+0x98>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <lcd_init+0x9c>)
 80008a6:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80008a8:	2032      	movs	r0, #50	; 0x32
 80008aa:	f001 fa77 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x30);
 80008ae:	2030      	movs	r0, #48	; 0x30
 80008b0:	f7ff ff34 	bl	800071c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80008b4:	2005      	movs	r0, #5
 80008b6:	f001 fa71 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x30);
 80008ba:	2030      	movs	r0, #48	; 0x30
 80008bc:	f7ff ff2e 	bl	800071c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80008c0:	2001      	movs	r0, #1
 80008c2:	f001 fa6b 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x30);
 80008c6:	2030      	movs	r0, #48	; 0x30
 80008c8:	f7ff ff28 	bl	800071c <lcd_send_cmd>
	HAL_Delay(10);
 80008cc:	200a      	movs	r0, #10
 80008ce:	f001 fa65 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80008d2:	2020      	movs	r0, #32
 80008d4:	f7ff ff22 	bl	800071c <lcd_send_cmd>
	HAL_Delay(10);
 80008d8:	200a      	movs	r0, #10
 80008da:	f001 fa5f 	bl	8001d9c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80008de:	2028      	movs	r0, #40	; 0x28
 80008e0:	f7ff ff1c 	bl	800071c <lcd_send_cmd>
	HAL_Delay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f001 fa59 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80008ea:	2008      	movs	r0, #8
 80008ec:	f7ff ff16 	bl	800071c <lcd_send_cmd>
	HAL_Delay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f001 fa53 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff ff10 	bl	800071c <lcd_send_cmd>
	HAL_Delay(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f001 fa4d 	bl	8001d9c <HAL_Delay>
	HAL_Delay(1);
 8000902:	2001      	movs	r0, #1
 8000904:	f001 fa4a 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000908:	2006      	movs	r0, #6
 800090a:	f7ff ff07 	bl	800071c <lcd_send_cmd>
	HAL_Delay(1);
 800090e:	2001      	movs	r0, #1
 8000910:	f001 fa44 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000914:	200c      	movs	r0, #12
 8000916:	f7ff ff01 	bl	800071c <lcd_send_cmd>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000190 	.word	0x20000190
 8000928:	20000194 	.word	0x20000194

0800092c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000934:	e006      	b.n	8000944 <lcd_send_string+0x18>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff20 	bl	8000784 <lcd_send_data>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1f4      	bne.n	8000936 <lcd_send_string+0xa>
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <lcd_CustomChar_create>:

void lcd_CustomChar_create(uint8_t location, uint8_t charmap[])
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b084      	sub	sp, #16
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	6039      	str	r1, [r7, #0]
 8000960:	71fb      	strb	r3, [r7, #7]
	location <<= 3;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	71fb      	strb	r3, [r7, #7]

	lcd_send_cmd (0x40 | (location & 0x38) );
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000970:	b25b      	sxtb	r3, r3
 8000972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000976:	b25b      	sxtb	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fece 	bl	800071c <lcd_send_cmd>
	for (int i=0; i<8; i++)
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	e009      	b.n	800099a <lcd_CustomChar_create+0x44>
	{
		lcd_send_data(charmap[i]);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fef8 	bl	8000784 <lcd_send_data>
	for (int i=0; i<8; i++)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2b07      	cmp	r3, #7
 800099e:	ddf2      	ble.n	8000986 <lcd_CustomChar_create+0x30>
	}
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b2:	f001 f98d 	bl	8001cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b6:	f000 f8e3 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f7ff fde9 	bl	8000590 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009be:	f001 f8e9 	bl	8001b94 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009c2:	f7ff fd5f 	bl	8000484 <MX_ADC1_Init>
  MX_TIM1_Init();
 80009c6:	f000 fedd 	bl	8001784 <MX_TIM1_Init>
  MX_I2C1_Init();
 80009ca:	f7ff fe25 	bl	8000618 <MX_I2C1_Init>
  MX_TIM2_Init();
 80009ce:	f000 ff85 	bl	80018dc <MX_TIM2_Init>
  MX_TIM7_Init();
 80009d2:	f000 ffd7 	bl	8001984 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7); //overflow: 10 ms
 80009d6:	4857      	ldr	r0, [pc, #348]	; (8000b34 <main+0x188>)
 80009d8:	f004 fb5c 	bl	8005094 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80009dc:	213c      	movs	r1, #60	; 0x3c
 80009de:	4856      	ldr	r0, [pc, #344]	; (8000b38 <main+0x18c>)
 80009e0:	f004 fcbb 	bl	800535a <HAL_TIM_Encoder_Start_IT>

  lcd_init(&hi2c1, 0x3F);
 80009e4:	213f      	movs	r1, #63	; 0x3f
 80009e6:	4855      	ldr	r0, [pc, #340]	; (8000b3c <main+0x190>)
 80009e8:	f7ff ff50 	bl	800088c <lcd_init>

  INA219_Init(&ina219, &hi2c1, INA219_ADDRESS);
 80009ec:	2240      	movs	r2, #64	; 0x40
 80009ee:	4953      	ldr	r1, [pc, #332]	; (8000b3c <main+0x190>)
 80009f0:	4853      	ldr	r0, [pc, #332]	; (8000b40 <main+0x194>)
 80009f2:	f7ff fd15 	bl	8000420 <INA219_Init>

  start_menu ();
 80009f6:	f000 f94f 	bl	8000c98 <start_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  corriente = INA219_ReadCurrent_float(&ina219);
 80009fa:	4851      	ldr	r0, [pc, #324]	; (8000b40 <main+0x194>)
 80009fc:	f7ff fc8e 	bl	800031c <INA219_ReadCurrent_float>
 8000a00:	eef0 7a40 	vmov.f32	s15, s0
 8000a04:	4b4f      	ldr	r3, [pc, #316]	; (8000b44 <main+0x198>)
 8000a06:	edc3 7a00 	vstr	s15, [r3]

	  c2 = corriente * 1000;
 8000a0a:	4b4e      	ldr	r3, [pc, #312]	; (8000b44 <main+0x198>)
 8000a0c:	edd3 7a00 	vldr	s15, [r3]
 8000a10:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8000b48 <main+0x19c>
 8000a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a18:	4b4c      	ldr	r3, [pc, #304]	; (8000b4c <main+0x1a0>)
 8000a1a:	edc3 7a00 	vstr	s15, [r3]
	  c3 = c2;
 8000a1e:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <main+0x1a0>)
 8000a20:	edd3 7a00 	vldr	s15, [r3]
 8000a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a28:	ee17 3a90 	vmov	r3, s15
 8000a2c:	b21a      	sxth	r2, r3
 8000a2e:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <main+0x1a4>)
 8000a30:	801a      	strh	r2, [r3, #0]

	  rango_I = corriente * factor_rango;
 8000a32:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <main+0x198>)
 8000a34:	ed93 7a00 	vldr	s14, [r3]
 8000a38:	4b46      	ldr	r3, [pc, #280]	; (8000b54 <main+0x1a8>)
 8000a3a:	edd3 7a00 	vldr	s15, [r3]
 8000a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a46:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a4a:	793b      	ldrb	r3, [r7, #4]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <main+0x1ac>)
 8000a50:	701a      	strb	r2, [r3, #0]
	  //if (!rango_I) rango_I++;

//	  INA219_setCalibration(&ina219, cal_dinamico[rango_I]);


	  switch (rango_I){
 8000a52:	4b41      	ldr	r3, [pc, #260]	; (8000b58 <main+0x1ac>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d82a      	bhi.n	8000ab0 <main+0x104>
 8000a5a:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <main+0xb4>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000a75 	.word	0x08000a75
 8000a64:	08000a81 	.word	0x08000a81
 8000a68:	08000a8d 	.word	0x08000a8d
 8000a6c:	08000a99 	.word	0x08000a99
 8000a70:	08000aa5 	.word	0x08000aa5
		  case 0:
			  INA219_setCalibration(&ina219, 4002);
 8000a74:	f640 71a2 	movw	r1, #4002	; 0xfa2
 8000a78:	4831      	ldr	r0, [pc, #196]	; (8000b40 <main+0x194>)
 8000a7a:	f7ff fc8b 	bl	8000394 <INA219_setCalibration>
		  break;
 8000a7e:	e018      	b.n	8000ab2 <main+0x106>
		  case 1:
			  INA219_setCalibration(&ina219, 3971);
 8000a80:	f640 7183 	movw	r1, #3971	; 0xf83
 8000a84:	482e      	ldr	r0, [pc, #184]	; (8000b40 <main+0x194>)
 8000a86:	f7ff fc85 	bl	8000394 <INA219_setCalibration>
		  break;
 8000a8a:	e012      	b.n	8000ab2 <main+0x106>
		  case 2:
			  INA219_setCalibration(&ina219, 3937);
 8000a8c:	f640 7161 	movw	r1, #3937	; 0xf61
 8000a90:	482b      	ldr	r0, [pc, #172]	; (8000b40 <main+0x194>)
 8000a92:	f7ff fc7f 	bl	8000394 <INA219_setCalibration>
		  break;
 8000a96:	e00c      	b.n	8000ab2 <main+0x106>
		  case 3:
			  INA219_setCalibration(&ina219, 3846);
 8000a98:	f640 7106 	movw	r1, #3846	; 0xf06
 8000a9c:	4828      	ldr	r0, [pc, #160]	; (8000b40 <main+0x194>)
 8000a9e:	f7ff fc79 	bl	8000394 <INA219_setCalibration>
		  break;
 8000aa2:	e006      	b.n	8000ab2 <main+0x106>
		  case 4:
			  INA219_setCalibration(&ina219, 3798);
 8000aa4:	f640 61d6 	movw	r1, #3798	; 0xed6
 8000aa8:	4825      	ldr	r0, [pc, #148]	; (8000b40 <main+0x194>)
 8000aaa:	f7ff fc73 	bl	8000394 <INA219_setCalibration>
		  break;
 8000aae:	e000      	b.n	8000ab2 <main+0x106>
		  default:

		  break;
 8000ab0:	bf00      	nop
	  }

	  vshunt = INA219_ReadShuntVolage(&ina219);
 8000ab2:	4823      	ldr	r0, [pc, #140]	; (8000b40 <main+0x194>)
 8000ab4:	f7ff fc4e 	bl	8000354 <INA219_ReadShuntVolage>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <main+0x1b0>)
 8000abe:	801a      	strh	r2, [r3, #0]
	  raw_c = INA219_ReadCurrent_raw(&ina219);
 8000ac0:	481f      	ldr	r0, [pc, #124]	; (8000b40 <main+0x194>)
 8000ac2:	f7ff fc1b 	bl	80002fc <INA219_ReadCurrent_raw>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <main+0x1b4>)
 8000acc:	801a      	strh	r2, [r3, #0]


//	  continue;
	  if (flag_tim7 != 0){
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <main+0x1b8>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d00e      	beq.n	8000af4 <main+0x148>
		  periodo_enc++;
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <main+0x1bc>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <main+0x1bc>)
 8000ae0:	701a      	strb	r2, [r3, #0]
		  periodo_impMed++;
 8000ae2:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <main+0x1c0>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <main+0x1c0>)
 8000aec:	701a      	strb	r2, [r3, #0]
		  flag_tim7 = 0;
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <main+0x1b8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
	  } //end if flag_tim7

	  if (periodo_enc > 19){
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <main+0x1bc>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b13      	cmp	r3, #19
 8000afa:	d914      	bls.n	8000b26 <main+0x17a>
		  lecturaEnc = __HAL_TIM_GET_COUNTER(&htim7);
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <main+0x188>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <main+0x1c4>)
 8000b06:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COUNTER(&htim7, 0);
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <main+0x188>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
		  periodo_enc = 0;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <main+0x1bc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]

		  lectura_boton = HAL_GPIO_ReadPin(IN_D4_sw_GPIO_Port, IN_D4_sw_Pin);
 8000b16:	2120      	movs	r1, #32
 8000b18:	4816      	ldr	r0, [pc, #88]	; (8000b74 <main+0x1c8>)
 8000b1a:	f001 fea5 	bl	8002868 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <main+0x1cc>)
 8000b24:	701a      	strb	r2, [r3, #0]

	  } //end if periodo_enc

	  check_menu();
 8000b26:	f000 f8d1 	bl	8000ccc <check_menu>
	  last_boton = lectura_boton;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <main+0x1cc>)
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <main+0x1d0>)
 8000b30:	701a      	strb	r2, [r3, #0]
	  corriente = INA219_ReadCurrent_float(&ina219);
 8000b32:	e762      	b.n	80009fa <main+0x4e>
 8000b34:	200002a0 	.word	0x200002a0
 8000b38:	20000254 	.word	0x20000254
 8000b3c:	2000013c 	.word	0x2000013c
 8000b40:	200001a0 	.word	0x200001a0
 8000b44:	200001a8 	.word	0x200001a8
 8000b48:	447a0000 	.word	0x447a0000
 8000b4c:	200001b4 	.word	0x200001b4
 8000b50:	200001b8 	.word	0x200001b8
 8000b54:	20000008 	.word	0x20000008
 8000b58:	200001b0 	.word	0x200001b0
 8000b5c:	200001ac 	.word	0x200001ac
 8000b60:	200001ae 	.word	0x200001ae
 8000b64:	2000019c 	.word	0x2000019c
 8000b68:	2000019d 	.word	0x2000019d
 8000b6c:	2000019e 	.word	0x2000019e
 8000b70:	20000198 	.word	0x20000198
 8000b74:	48000400 	.word	0x48000400
 8000b78:	20000004 	.word	0x20000004
 8000b7c:	20000005 	.word	0x20000005

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b096      	sub	sp, #88	; 0x58
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b8a:	2228      	movs	r2, #40	; 0x28
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f006 f852 	bl	8006c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
 8000bb2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000bc8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bcc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fe6c 	bl	80038b0 <HAL_RCC_OscConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bde:	f000 f855 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be2:	230f      	movs	r3, #15
 8000be4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be6:	2302      	movs	r3, #2
 8000be8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f003 fe94 	bl	800492c <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c0a:	f000 f83f 	bl	8000c8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8000c0e:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8000c12:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c18:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4618      	mov	r0, r3
 8000c26:	f004 f8b7 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c30:	f000 f82c 	bl	8000c8c <Error_Handler>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3758      	adds	r7, #88	; 0x58
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d102      	bne.n	8000c54 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tim7 = 1;
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
	}
} //end HAL_TIM_PeriodElapsedCallback()
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40001400 	.word	0x40001400
 8000c64:	2000019c 	.word	0x2000019c

08000c68 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	lecturaEnc = __HAL_TIM_GET_COUNTER(htim);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	20000198 	.word	0x20000198

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <start_menu>:

/////////////////////////////////////////
//         FUNCIONES PUBLICAS          //
/////////////////////////////////////////

void start_menu (void){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	//init_pantalla();
	lcd_CustomChar_create(0, arriba);
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <start_menu+0x24>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff fe59 	bl	8000956 <lcd_CustomChar_create>
	lcd_CustomChar_create(1, abajo);
 8000ca4:	4906      	ldr	r1, [pc, #24]	; (8000cc0 <start_menu+0x28>)
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff fe55 	bl	8000956 <lcd_CustomChar_create>
	init_menuPrincipal();
 8000cac:	f000 f818 	bl	8000ce0 <init_menuPrincipal>
	pantallaActual = &pantalla[MENU_PRINCIPAL];
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <start_menu+0x2c>)
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <start_menu+0x30>)
 8000cb4:	601a      	str	r2, [r3, #0]
} //fin start_menu()
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000000c 	.word	0x2000000c
 8000cc0:	20000014 	.word	0x20000014
 8000cc4:	200001bc 	.word	0x200001bc
 8000cc8:	2000001c 	.word	0x2000001c

08000ccc <check_menu>:


void check_menu (void){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	pantallaActual->accion();
 8000cd0:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <check_menu+0x10>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	4798      	blx	r3
} //fin check_menu()
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200001bc 	.word	0x200001bc

08000ce0 <init_menuPrincipal>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

void init_menuPrincipal (void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	lcd_clear();
 8000ce4:	f7ff fd82 	bl	80007ec <lcd_clear>
	lcd_put_cur(1, 0);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2001      	movs	r0, #1
 8000cec:	f7ff fd96 	bl	800081c <lcd_put_cur>
	lcd_send_string("Modo Potencia");
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <init_menuPrincipal+0x3c>)
 8000cf2:	f7ff fe1b 	bl	800092c <lcd_send_string>
	lcd_put_cur(1, 1);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff fd8f 	bl	800081c <lcd_put_cur>
	lcd_send_string("Modo Corriente");
 8000cfe:	4808      	ldr	r0, [pc, #32]	; (8000d20 <init_menuPrincipal+0x40>)
 8000d00:	f7ff fe14 	bl	800092c <lcd_send_string>
	cursor = 0;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <init_menuPrincipal+0x44>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
	lcd_put_cur(0, 0);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff fd85 	bl	800081c <lcd_put_cur>
	lcd_send_data(0x7E); // ->
 8000d12:	207e      	movs	r0, #126	; 0x7e
 8000d14:	f7ff fd36 	bl	8000784 <lcd_send_data>
} //fin init_menuPrincipal()
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	0800753c 	.word	0x0800753c
 8000d20:	0800754c 	.word	0x0800754c
 8000d24:	200001f2 	.word	0x200001f2

08000d28 <init_menuCorriente>:


void init_menuCorriente (void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	lcd_clear();
 8000d2c:	f7ff fd5e 	bl	80007ec <lcd_clear>
	lcd_put_cur(1, 0);
 8000d30:	2100      	movs	r1, #0
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fd72 	bl	800081c <lcd_put_cur>
	sprintf(texto, "C:  %d mA", setPoint_corriente );
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <init_menuCorriente+0x44>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	490c      	ldr	r1, [pc, #48]	; (8000d70 <init_menuCorriente+0x48>)
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <init_menuCorriente+0x4c>)
 8000d42:	f005 ff81 	bl	8006c48 <siprintf>
	lcd_send_string(texto);
 8000d46:	480b      	ldr	r0, [pc, #44]	; (8000d74 <init_menuCorriente+0x4c>)
 8000d48:	f7ff fdf0 	bl	800092c <lcd_send_string>
	lcd_put_cur(1, 1);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff fd64 	bl	800081c <lcd_put_cur>
	lcd_send_string("INICIAR");
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <init_menuCorriente+0x50>)
 8000d56:	f7ff fde9 	bl	800092c <lcd_send_string>
	lcd_put_cur(11, 1);
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	200b      	movs	r0, #11
 8000d5e:	f7ff fd5d 	bl	800081c <lcd_put_cur>
	lcd_send_string("ATRAS");
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <init_menuCorriente+0x54>)
 8000d64:	f7ff fde2 	bl	800092c <lcd_send_string>
} //fin init_menuCorriente()
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200001f8 	.word	0x200001f8
 8000d70:	0800755c 	.word	0x0800755c
 8000d74:	200001c0 	.word	0x200001c0
 8000d78:	08007568 	.word	0x08007568
 8000d7c:	08007570 	.word	0x08007570

08000d80 <init_menuPotencia>:


void init_menuPotencia (void){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	lcd_clear();
 8000d84:	f7ff fd32 	bl	80007ec <lcd_clear>
	lcd_put_cur(1, 0);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fd46 	bl	800081c <lcd_put_cur>
	sprintf(texto, "P:  %d mW", setPoint_potencia);
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <init_menuPotencia+0x54>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4910      	ldr	r1, [pc, #64]	; (8000dd8 <init_menuPotencia+0x58>)
 8000d98:	4810      	ldr	r0, [pc, #64]	; (8000ddc <init_menuPotencia+0x5c>)
 8000d9a:	f005 ff55 	bl	8006c48 <siprintf>
	lcd_send_string(texto);
 8000d9e:	480f      	ldr	r0, [pc, #60]	; (8000ddc <init_menuPotencia+0x5c>)
 8000da0:	f7ff fdc4 	bl	800092c <lcd_send_string>
	lcd_put_cur(1, 1);
 8000da4:	2101      	movs	r1, #1
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff fd38 	bl	800081c <lcd_put_cur>
	lcd_send_string("INICIAR");
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <init_menuPotencia+0x60>)
 8000dae:	f7ff fdbd 	bl	800092c <lcd_send_string>
	lcd_put_cur(11, 1);
 8000db2:	2101      	movs	r1, #1
 8000db4:	200b      	movs	r0, #11
 8000db6:	f7ff fd31 	bl	800081c <lcd_put_cur>
	lcd_send_string("ATRAS");
 8000dba:	480a      	ldr	r0, [pc, #40]	; (8000de4 <init_menuPotencia+0x64>)
 8000dbc:	f7ff fdb6 	bl	800092c <lcd_send_string>
	lcd_put_cur(0, 0);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff fd2a 	bl	800081c <lcd_put_cur>
	lcd_send_data(0x7E); // ->
 8000dc8:	207e      	movs	r0, #126	; 0x7e
 8000dca:	f7ff fcdb 	bl	8000784 <lcd_send_data>
} //fin init_menuPotencia()
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200001f4 	.word	0x200001f4
 8000dd8:	08007578 	.word	0x08007578
 8000ddc:	200001c0 	.word	0x200001c0
 8000de0:	08007568 	.word	0x08007568
 8000de4:	08007570 	.word	0x08007570

08000de8 <init_medicionCorriente>:


void init_medicionCorriente (void){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	lcd_clear();
 8000dec:	f7ff fcfe 	bl	80007ec <lcd_clear>
	lcd_put_cur(0, 0);
 8000df0:	2100      	movs	r1, #0
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fd12 	bl	800081c <lcd_put_cur>
	sprintf(texto, "set: %d mA", setPoint_corriente);
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <init_medicionCorriente+0x74>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4918      	ldr	r1, [pc, #96]	; (8000e60 <init_medicionCorriente+0x78>)
 8000e00:	4818      	ldr	r0, [pc, #96]	; (8000e64 <init_medicionCorriente+0x7c>)
 8000e02:	f005 ff21 	bl	8006c48 <siprintf>
	lcd_send_string(texto);
 8000e06:	4817      	ldr	r0, [pc, #92]	; (8000e64 <init_medicionCorriente+0x7c>)
 8000e08:	f7ff fd90 	bl	800092c <lcd_send_string>
	lcd_put_cur(0, 1);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fd04 	bl	800081c <lcd_put_cur>
	sprintf(texto, "med: %d.%dmA", medida_corriente / 10, medida_corriente % 10 );
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <init_medicionCorriente+0x80>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <init_medicionCorriente+0x84>)
 8000e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1e:	1092      	asrs	r2, r2, #2
 8000e20:	17db      	asrs	r3, r3, #31
 8000e22:	1ad0      	subs	r0, r2, r3
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <init_medicionCorriente+0x80>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <init_medicionCorriente+0x84>)
 8000e2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e2e:	1099      	asrs	r1, r3, #2
 8000e30:	17d3      	asrs	r3, r2, #31
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	460b      	mov	r3, r1
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	440b      	add	r3, r1
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	1ad1      	subs	r1, r2, r3
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4602      	mov	r2, r0
 8000e42:	490b      	ldr	r1, [pc, #44]	; (8000e70 <init_medicionCorriente+0x88>)
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <init_medicionCorriente+0x7c>)
 8000e46:	f005 feff 	bl	8006c48 <siprintf>
	lcd_send_string(texto);
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <init_medicionCorriente+0x7c>)
 8000e4c:	f7ff fd6e 	bl	800092c <lcd_send_string>
	periodo_impMed = 0;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <init_medicionCorriente+0x8c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
} //fin init_medicionCorriente()
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200001f8 	.word	0x200001f8
 8000e60:	08007584 	.word	0x08007584
 8000e64:	200001c0 	.word	0x200001c0
 8000e68:	20000200 	.word	0x20000200
 8000e6c:	66666667 	.word	0x66666667
 8000e70:	08007590 	.word	0x08007590
 8000e74:	2000019e 	.word	0x2000019e

08000e78 <init_medicionPotencia>:


void init_medicionPotencia (void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	lcd_clear();
 8000e7c:	f7ff fcb6 	bl	80007ec <lcd_clear>
	lcd_put_cur(0, 0);
 8000e80:	2100      	movs	r1, #0
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff fcca 	bl	800081c <lcd_put_cur>
	sprintf(texto, "set: %d.%dmW", setPoint_potencia / 10, setPoint_potencia % 10 );
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <init_medicionPotencia+0x94>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a20      	ldr	r2, [pc, #128]	; (8000f10 <init_medicionPotencia+0x98>)
 8000e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e92:	1092      	asrs	r2, r2, #2
 8000e94:	17db      	asrs	r3, r3, #31
 8000e96:	1ad0      	subs	r0, r2, r3
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <init_medicionPotencia+0x94>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <init_medicionPotencia+0x98>)
 8000e9e:	fb83 1302 	smull	r1, r3, r3, r2
 8000ea2:	1099      	asrs	r1, r3, #2
 8000ea4:	17d3      	asrs	r3, r2, #31
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	1ad1      	subs	r1, r2, r3
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4917      	ldr	r1, [pc, #92]	; (8000f14 <init_medicionPotencia+0x9c>)
 8000eb8:	4817      	ldr	r0, [pc, #92]	; (8000f18 <init_medicionPotencia+0xa0>)
 8000eba:	f005 fec5 	bl	8006c48 <siprintf>
	lcd_send_string(texto);
 8000ebe:	4816      	ldr	r0, [pc, #88]	; (8000f18 <init_medicionPotencia+0xa0>)
 8000ec0:	f7ff fd34 	bl	800092c <lcd_send_string>
	lcd_put_cur(0, 1);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff fca8 	bl	800081c <lcd_put_cur>
	sprintf(texto, "med: %d.%dmW", medida_potencia / 10, medida_potencia % 10 );
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <init_medicionPotencia+0xa4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <init_medicionPotencia+0x98>)
 8000ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed6:	1092      	asrs	r2, r2, #2
 8000ed8:	17db      	asrs	r3, r3, #31
 8000eda:	1ad0      	subs	r0, r2, r3
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <init_medicionPotencia+0xa4>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <init_medicionPotencia+0x98>)
 8000ee2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ee6:	1099      	asrs	r1, r3, #2
 8000ee8:	17d3      	asrs	r3, r2, #31
 8000eea:	1ac9      	subs	r1, r1, r3
 8000eec:	460b      	mov	r3, r1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	1ad1      	subs	r1, r2, r3
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4909      	ldr	r1, [pc, #36]	; (8000f20 <init_medicionPotencia+0xa8>)
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <init_medicionPotencia+0xa0>)
 8000efe:	f005 fea3 	bl	8006c48 <siprintf>
	lcd_send_string(texto);
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <init_medicionPotencia+0xa0>)
 8000f04:	f7ff fd12 	bl	800092c <lcd_send_string>

} //fin init_medicionPotencia()
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200001f4 	.word	0x200001f4
 8000f10:	66666667 	.word	0x66666667
 8000f14:	080075a0 	.word	0x080075a0
 8000f18:	200001c0 	.word	0x200001c0
 8000f1c:	200001fc 	.word	0x200001fc
 8000f20:	080075b0 	.word	0x080075b0

08000f24 <acc_menuPrincipal>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

void acc_menuPrincipal (void){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	switch (cursor){
 8000f28:	4b31      	ldr	r3, [pc, #196]	; (8000ff0 <acc_menuPrincipal+0xcc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <acc_menuPrincipal+0x12>
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d02a      	beq.n	8000f8a <acc_menuPrincipal+0x66>
				pantallaActual = &pantalla [MENU_CORRIENTE];
				pantallaActual->inicia_menu();
			}
		break;
		default:
		break;
 8000f34:	e059      	b.n	8000fea <acc_menuPrincipal+0xc6>
			if (lecturaEnc > 0){
 8000f36:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <acc_menuPrincipal+0xd0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	dd10      	ble.n	8000f60 <acc_menuPrincipal+0x3c>
				cursor = 1;
 8000f3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <acc_menuPrincipal+0xcc>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 1);
 8000f44:	2101      	movs	r1, #1
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff fc68 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8000f4c:	207e      	movs	r0, #126	; 0x7e
 8000f4e:	f7ff fc19 	bl	8000784 <lcd_send_data>
				lcd_put_cur(0, 0);
 8000f52:	2100      	movs	r1, #0
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fc61 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 8000f5a:	4827      	ldr	r0, [pc, #156]	; (8000ff8 <acc_menuPrincipal+0xd4>)
 8000f5c:	f7ff fce6 	bl	800092c <lcd_send_string>
			if (PULSO != 0){
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <acc_menuPrincipal+0xd8>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <acc_menuPrincipal+0x50>
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <acc_menuPrincipal+0xdc>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <acc_menuPrincipal+0x50>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <acc_menuPrincipal+0x52>
 8000f74:	2300      	movs	r3, #0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d034      	beq.n	8000fe4 <acc_menuPrincipal+0xc0>
				pantallaActual = &pantalla [MENU_POTENCIA];
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <acc_menuPrincipal+0xe0>)
 8000f7c:	4a22      	ldr	r2, [pc, #136]	; (8001008 <acc_menuPrincipal+0xe4>)
 8000f7e:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <acc_menuPrincipal+0xe0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	4798      	blx	r3
		break;
 8000f88:	e02c      	b.n	8000fe4 <acc_menuPrincipal+0xc0>
			if (lecturaEnc < 0){
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <acc_menuPrincipal+0xd0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da10      	bge.n	8000fb4 <acc_menuPrincipal+0x90>
				cursor = 0;
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <acc_menuPrincipal+0xcc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff fc3e 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8000fa0:	207e      	movs	r0, #126	; 0x7e
 8000fa2:	f7ff fbef 	bl	8000784 <lcd_send_data>
				lcd_put_cur(0, 1);
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fc37 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 8000fae:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <acc_menuPrincipal+0xd4>)
 8000fb0:	f7ff fcbc 	bl	800092c <lcd_send_string>
			if (PULSO != 0){
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <acc_menuPrincipal+0xd8>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <acc_menuPrincipal+0xa4>
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <acc_menuPrincipal+0xdc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <acc_menuPrincipal+0xa4>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <acc_menuPrincipal+0xa6>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00c      	beq.n	8000fe8 <acc_menuPrincipal+0xc4>
				cursor = 0;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <acc_menuPrincipal+0xcc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
				pantallaActual = &pantalla [MENU_CORRIENTE];
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <acc_menuPrincipal+0xe0>)
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	; (800100c <acc_menuPrincipal+0xe8>)
 8000fd8:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <acc_menuPrincipal+0xe0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	4798      	blx	r3
		break;
 8000fe2:	e001      	b.n	8000fe8 <acc_menuPrincipal+0xc4>
		break;
 8000fe4:	bf00      	nop
 8000fe6:	e000      	b.n	8000fea <acc_menuPrincipal+0xc6>
		break;
 8000fe8:	bf00      	nop
	} //end switch cursor

} //fin acc_menuPrincipal()
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200001f2 	.word	0x200001f2
 8000ff4:	20000198 	.word	0x20000198
 8000ff8:	080075c0 	.word	0x080075c0
 8000ffc:	20000005 	.word	0x20000005
 8001000:	20000004 	.word	0x20000004
 8001004:	200001bc 	.word	0x200001bc
 8001008:	20000028 	.word	0x20000028
 800100c:	20000034 	.word	0x20000034

08001010 <acc_menuCorriente>:


void acc_menuCorriente (void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	switch (cursor){
 8001014:	4b8d      	ldr	r3, [pc, #564]	; (800124c <acc_menuCorriente+0x23c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b02      	cmp	r3, #2
 800101a:	f000 80e0 	beq.w	80011de <acc_menuCorriente+0x1ce>
 800101e:	2b02      	cmp	r3, #2
 8001020:	f300 8109 	bgt.w	8001236 <acc_menuCorriente+0x226>
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <acc_menuCorriente+0x20>
 8001028:	2b01      	cmp	r3, #1
 800102a:	f000 8088 	beq.w	800113e <acc_menuCorriente+0x12e>
				pantallaActual->inicia_menu();
			}

		break;
		default:
		break;
 800102e:	e102      	b.n	8001236 <acc_menuCorriente+0x226>
			if (flag_setValor != 0){
 8001030:	4b87      	ldr	r3, [pc, #540]	; (8001250 <acc_menuCorriente+0x240>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d03f      	beq.n	80010b8 <acc_menuCorriente+0xa8>
				if (PULSO != 0){
 8001038:	4b86      	ldr	r3, [pc, #536]	; (8001254 <acc_menuCorriente+0x244>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <acc_menuCorriente+0x3c>
 8001040:	4b85      	ldr	r3, [pc, #532]	; (8001258 <acc_menuCorriente+0x248>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <acc_menuCorriente+0x3c>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <acc_menuCorriente+0x3e>
 800104c:	2300      	movs	r3, #0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d017      	beq.n	8001082 <acc_menuCorriente+0x72>
					lcd_put_cur(0, 0);
 8001052:	2100      	movs	r1, #0
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff fbe1 	bl	800081c <lcd_put_cur>
					lcd_send_data(0x7E); // ->
 800105a:	207e      	movs	r0, #126	; 0x7e
 800105c:	f7ff fb92 	bl	8000784 <lcd_send_data>
					lcd_put_cur(4, 0);
 8001060:	2100      	movs	r1, #0
 8001062:	2004      	movs	r0, #4
 8001064:	f7ff fbda 	bl	800081c <lcd_put_cur>
					lcd_send_string(" ");
 8001068:	487c      	ldr	r0, [pc, #496]	; (800125c <acc_menuCorriente+0x24c>)
 800106a:	f7ff fc5f 	bl	800092c <lcd_send_string>
					lcd_put_cur(14, 0);
 800106e:	2100      	movs	r1, #0
 8001070:	200e      	movs	r0, #14
 8001072:	f7ff fbd3 	bl	800081c <lcd_put_cur>
					lcd_send_string(" ");
 8001076:	4879      	ldr	r0, [pc, #484]	; (800125c <acc_menuCorriente+0x24c>)
 8001078:	f7ff fc58 	bl	800092c <lcd_send_string>
					flag_setValor = 0;
 800107c:	4b74      	ldr	r3, [pc, #464]	; (8001250 <acc_menuCorriente+0x240>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
				if (lecturaEnc != 0){
 8001082:	4b77      	ldr	r3, [pc, #476]	; (8001260 <acc_menuCorriente+0x250>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80d7 	beq.w	800123a <acc_menuCorriente+0x22a>
					setPoint_potencia += lecturaEnc;
 800108c:	4b75      	ldr	r3, [pc, #468]	; (8001264 <acc_menuCorriente+0x254>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b73      	ldr	r3, [pc, #460]	; (8001260 <acc_menuCorriente+0x250>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4413      	add	r3, r2
 8001096:	4a73      	ldr	r2, [pc, #460]	; (8001264 <acc_menuCorriente+0x254>)
 8001098:	6013      	str	r3, [r2, #0]
					lcd_put_cur(5, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	2005      	movs	r0, #5
 800109e:	f7ff fbbd 	bl	800081c <lcd_put_cur>
					sprintf(texto, "%d mA", setPoint_corriente);
 80010a2:	4b71      	ldr	r3, [pc, #452]	; (8001268 <acc_menuCorriente+0x258>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4970      	ldr	r1, [pc, #448]	; (800126c <acc_menuCorriente+0x25c>)
 80010aa:	4871      	ldr	r0, [pc, #452]	; (8001270 <acc_menuCorriente+0x260>)
 80010ac:	f005 fdcc 	bl	8006c48 <siprintf>
					lcd_send_string(texto);
 80010b0:	486f      	ldr	r0, [pc, #444]	; (8001270 <acc_menuCorriente+0x260>)
 80010b2:	f7ff fc3b 	bl	800092c <lcd_send_string>
				break;
 80010b6:	e0c0      	b.n	800123a <acc_menuCorriente+0x22a>
			if (lecturaEnc > 0){
 80010b8:	4b69      	ldr	r3, [pc, #420]	; (8001260 <acc_menuCorriente+0x250>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	dd17      	ble.n	80010f0 <acc_menuCorriente+0xe0>
				cursor = 1;
 80010c0:	4b62      	ldr	r3, [pc, #392]	; (800124c <acc_menuCorriente+0x23c>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 1);
 80010c6:	2101      	movs	r1, #1
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff fba7 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 80010ce:	207e      	movs	r0, #126	; 0x7e
 80010d0:	f7ff fb58 	bl	8000784 <lcd_send_data>
				lcd_put_cur(0, 0);
 80010d4:	2100      	movs	r1, #0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fba0 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 80010dc:	485f      	ldr	r0, [pc, #380]	; (800125c <acc_menuCorriente+0x24c>)
 80010de:	f7ff fc25 	bl	800092c <lcd_send_string>
				lcd_put_cur(10, 1);
 80010e2:	2101      	movs	r1, #1
 80010e4:	200a      	movs	r0, #10
 80010e6:	f7ff fb99 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 80010ea:	485c      	ldr	r0, [pc, #368]	; (800125c <acc_menuCorriente+0x24c>)
 80010ec:	f7ff fc1e 	bl	800092c <lcd_send_string>
			if (PULSO != 0){
 80010f0:	4b58      	ldr	r3, [pc, #352]	; (8001254 <acc_menuCorriente+0x244>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <acc_menuCorriente+0xf4>
 80010f8:	4b57      	ldr	r3, [pc, #348]	; (8001258 <acc_menuCorriente+0x248>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <acc_menuCorriente+0xf4>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <acc_menuCorriente+0xf6>
 8001104:	2300      	movs	r3, #0
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 8099 	beq.w	800123e <acc_menuCorriente+0x22e>
				lcd_put_cur(0, 0);
 800110c:	2100      	movs	r1, #0
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fb84 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 8001114:	4851      	ldr	r0, [pc, #324]	; (800125c <acc_menuCorriente+0x24c>)
 8001116:	f7ff fc09 	bl	800092c <lcd_send_string>
				lcd_put_cur(4, 0);
 800111a:	2100      	movs	r1, #0
 800111c:	2004      	movs	r0, #4
 800111e:	f7ff fb7d 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7F); // <-
 8001122:	207f      	movs	r0, #127	; 0x7f
 8001124:	f7ff fb2e 	bl	8000784 <lcd_send_data>
				lcd_put_cur(14, 0);
 8001128:	2100      	movs	r1, #0
 800112a:	200e      	movs	r0, #14
 800112c:	f7ff fb76 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8001130:	207e      	movs	r0, #126	; 0x7e
 8001132:	f7ff fb27 	bl	8000784 <lcd_send_data>
				flag_setValor = 1;
 8001136:	4b46      	ldr	r3, [pc, #280]	; (8001250 <acc_menuCorriente+0x240>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
		break;
 800113c:	e07f      	b.n	800123e <acc_menuCorriente+0x22e>
			if (lecturaEnc > 0){
 800113e:	4b48      	ldr	r3, [pc, #288]	; (8001260 <acc_menuCorriente+0x250>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	dd17      	ble.n	8001176 <acc_menuCorriente+0x166>
				cursor = 2;
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <acc_menuCorriente+0x23c>)
 8001148:	2202      	movs	r2, #2
 800114a:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(10, 1);
 800114c:	2101      	movs	r1, #1
 800114e:	200a      	movs	r0, #10
 8001150:	f7ff fb64 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8001154:	207e      	movs	r0, #126	; 0x7e
 8001156:	f7ff fb15 	bl	8000784 <lcd_send_data>
				lcd_put_cur(0, 0);
 800115a:	2100      	movs	r1, #0
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fb5d 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 8001162:	483e      	ldr	r0, [pc, #248]	; (800125c <acc_menuCorriente+0x24c>)
 8001164:	f7ff fbe2 	bl	800092c <lcd_send_string>
				lcd_put_cur(0, 1);
 8001168:	2101      	movs	r1, #1
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff fb56 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 8001170:	483a      	ldr	r0, [pc, #232]	; (800125c <acc_menuCorriente+0x24c>)
 8001172:	f7ff fbdb 	bl	800092c <lcd_send_string>
			if (lecturaEnc < 0){
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <acc_menuCorriente+0x250>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	da17      	bge.n	80011ae <acc_menuCorriente+0x19e>
				cursor = 0;
 800117e:	4b33      	ldr	r3, [pc, #204]	; (800124c <acc_menuCorriente+0x23c>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 0);
 8001184:	2100      	movs	r1, #0
 8001186:	2000      	movs	r0, #0
 8001188:	f7ff fb48 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 800118c:	207e      	movs	r0, #126	; 0x7e
 800118e:	f7ff faf9 	bl	8000784 <lcd_send_data>
				lcd_put_cur(0, 1);
 8001192:	2101      	movs	r1, #1
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff fb41 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 800119a:	4830      	ldr	r0, [pc, #192]	; (800125c <acc_menuCorriente+0x24c>)
 800119c:	f7ff fbc6 	bl	800092c <lcd_send_string>
				lcd_put_cur(10, 1);
 80011a0:	2101      	movs	r1, #1
 80011a2:	200a      	movs	r0, #10
 80011a4:	f7ff fb3a 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 80011a8:	482c      	ldr	r0, [pc, #176]	; (800125c <acc_menuCorriente+0x24c>)
 80011aa:	f7ff fbbf 	bl	800092c <lcd_send_string>
			if (PULSO != 0){
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <acc_menuCorriente+0x244>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <acc_menuCorriente+0x1b2>
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <acc_menuCorriente+0x248>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <acc_menuCorriente+0x1b2>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <acc_menuCorriente+0x1b4>
 80011c2:	2300      	movs	r3, #0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d03c      	beq.n	8001242 <acc_menuCorriente+0x232>
				cursor = 0;
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <acc_menuCorriente+0x23c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
				pantallaActual = &pantalla [MENU_PRINCIPAL];
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <acc_menuCorriente+0x264>)
 80011d0:	4a29      	ldr	r2, [pc, #164]	; (8001278 <acc_menuCorriente+0x268>)
 80011d2:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <acc_menuCorriente+0x264>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	4798      	blx	r3
		break;
 80011dc:	e031      	b.n	8001242 <acc_menuCorriente+0x232>
			if (lecturaEnc < 0){
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <acc_menuCorriente+0x250>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da17      	bge.n	8001216 <acc_menuCorriente+0x206>
				cursor = 1;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <acc_menuCorriente+0x23c>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 1);
 80011ec:	2101      	movs	r1, #1
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fb14 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 80011f4:	207e      	movs	r0, #126	; 0x7e
 80011f6:	f7ff fac5 	bl	8000784 <lcd_send_data>
				lcd_put_cur(0, 0);
 80011fa:	2100      	movs	r1, #0
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fb0d 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 8001202:	4816      	ldr	r0, [pc, #88]	; (800125c <acc_menuCorriente+0x24c>)
 8001204:	f7ff fb92 	bl	800092c <lcd_send_string>
				lcd_put_cur(10, 1);
 8001208:	2101      	movs	r1, #1
 800120a:	200a      	movs	r0, #10
 800120c:	f7ff fb06 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 8001210:	4812      	ldr	r0, [pc, #72]	; (800125c <acc_menuCorriente+0x24c>)
 8001212:	f7ff fb8b 	bl	800092c <lcd_send_string>
			if (PULSO){
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <acc_menuCorriente+0x244>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d013      	beq.n	8001246 <acc_menuCorriente+0x236>
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <acc_menuCorriente+0x248>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10f      	bne.n	8001246 <acc_menuCorriente+0x236>
				pantallaActual = &pantalla[MEDICION_CORRIENTE];
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <acc_menuCorriente+0x264>)
 8001228:	4a14      	ldr	r2, [pc, #80]	; (800127c <acc_menuCorriente+0x26c>)
 800122a:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <acc_menuCorriente+0x264>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4798      	blx	r3
		break;
 8001234:	e007      	b.n	8001246 <acc_menuCorriente+0x236>
		break;
 8001236:	bf00      	nop
 8001238:	e006      	b.n	8001248 <acc_menuCorriente+0x238>
				break;
 800123a:	bf00      	nop
 800123c:	e004      	b.n	8001248 <acc_menuCorriente+0x238>
		break;
 800123e:	bf00      	nop
 8001240:	e002      	b.n	8001248 <acc_menuCorriente+0x238>
		break;
 8001242:	bf00      	nop
 8001244:	e000      	b.n	8001248 <acc_menuCorriente+0x238>
		break;
 8001246:	bf00      	nop
	} //end switch cursor
} //fin acc_menuCorriente()
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200001f2 	.word	0x200001f2
 8001250:	200001f3 	.word	0x200001f3
 8001254:	20000005 	.word	0x20000005
 8001258:	20000004 	.word	0x20000004
 800125c:	080075c0 	.word	0x080075c0
 8001260:	20000198 	.word	0x20000198
 8001264:	200001f4 	.word	0x200001f4
 8001268:	200001f8 	.word	0x200001f8
 800126c:	080075c4 	.word	0x080075c4
 8001270:	200001c0 	.word	0x200001c0
 8001274:	200001bc 	.word	0x200001bc
 8001278:	2000001c 	.word	0x2000001c
 800127c:	2000004c 	.word	0x2000004c

08001280 <acc_menuPotencia>:


void acc_menuPotencia (void){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	switch (cursor){
 8001284:	4b8d      	ldr	r3, [pc, #564]	; (80014bc <acc_menuPotencia+0x23c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b02      	cmp	r3, #2
 800128a:	f000 80e0 	beq.w	800144e <acc_menuPotencia+0x1ce>
 800128e:	2b02      	cmp	r3, #2
 8001290:	f300 8109 	bgt.w	80014a6 <acc_menuPotencia+0x226>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <acc_menuPotencia+0x20>
 8001298:	2b01      	cmp	r3, #1
 800129a:	f000 8088 	beq.w	80013ae <acc_menuPotencia+0x12e>
				pantallaActual->inicia_menu();
			}

		break;
		default:
		break;
 800129e:	e102      	b.n	80014a6 <acc_menuPotencia+0x226>
			if (flag_setValor != 0){
 80012a0:	4b87      	ldr	r3, [pc, #540]	; (80014c0 <acc_menuPotencia+0x240>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d03f      	beq.n	8001328 <acc_menuPotencia+0xa8>
				if (PULSO != 0){
 80012a8:	4b86      	ldr	r3, [pc, #536]	; (80014c4 <acc_menuPotencia+0x244>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <acc_menuPotencia+0x3c>
 80012b0:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <acc_menuPotencia+0x248>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <acc_menuPotencia+0x3c>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <acc_menuPotencia+0x3e>
 80012bc:	2300      	movs	r3, #0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d017      	beq.n	80012f2 <acc_menuPotencia+0x72>
					lcd_put_cur(0, 0);
 80012c2:	2100      	movs	r1, #0
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff faa9 	bl	800081c <lcd_put_cur>
					lcd_send_data(0x7E); // ->
 80012ca:	207e      	movs	r0, #126	; 0x7e
 80012cc:	f7ff fa5a 	bl	8000784 <lcd_send_data>
					lcd_put_cur(4, 0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	2004      	movs	r0, #4
 80012d4:	f7ff faa2 	bl	800081c <lcd_put_cur>
					lcd_send_string(" ");
 80012d8:	487c      	ldr	r0, [pc, #496]	; (80014cc <acc_menuPotencia+0x24c>)
 80012da:	f7ff fb27 	bl	800092c <lcd_send_string>
					lcd_put_cur(14, 0);
 80012de:	2100      	movs	r1, #0
 80012e0:	200e      	movs	r0, #14
 80012e2:	f7ff fa9b 	bl	800081c <lcd_put_cur>
					lcd_send_string(" ");
 80012e6:	4879      	ldr	r0, [pc, #484]	; (80014cc <acc_menuPotencia+0x24c>)
 80012e8:	f7ff fb20 	bl	800092c <lcd_send_string>
					flag_setValor = 0;
 80012ec:	4b74      	ldr	r3, [pc, #464]	; (80014c0 <acc_menuPotencia+0x240>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
				if (lecturaEnc != 0){
 80012f2:	4b77      	ldr	r3, [pc, #476]	; (80014d0 <acc_menuPotencia+0x250>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 80d7 	beq.w	80014aa <acc_menuPotencia+0x22a>
					setPoint_potencia += lecturaEnc;
 80012fc:	4b75      	ldr	r3, [pc, #468]	; (80014d4 <acc_menuPotencia+0x254>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <acc_menuPotencia+0x250>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4413      	add	r3, r2
 8001306:	4a73      	ldr	r2, [pc, #460]	; (80014d4 <acc_menuPotencia+0x254>)
 8001308:	6013      	str	r3, [r2, #0]
					lcd_put_cur(5, 0);
 800130a:	2100      	movs	r1, #0
 800130c:	2005      	movs	r0, #5
 800130e:	f7ff fa85 	bl	800081c <lcd_put_cur>
					sprintf(texto, "%d mW", setPoint_potencia);
 8001312:	4b70      	ldr	r3, [pc, #448]	; (80014d4 <acc_menuPotencia+0x254>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	496f      	ldr	r1, [pc, #444]	; (80014d8 <acc_menuPotencia+0x258>)
 800131a:	4870      	ldr	r0, [pc, #448]	; (80014dc <acc_menuPotencia+0x25c>)
 800131c:	f005 fc94 	bl	8006c48 <siprintf>
					lcd_send_string(texto);
 8001320:	486e      	ldr	r0, [pc, #440]	; (80014dc <acc_menuPotencia+0x25c>)
 8001322:	f7ff fb03 	bl	800092c <lcd_send_string>
				break;
 8001326:	e0c0      	b.n	80014aa <acc_menuPotencia+0x22a>
			if (lecturaEnc > 0){
 8001328:	4b69      	ldr	r3, [pc, #420]	; (80014d0 <acc_menuPotencia+0x250>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	dd17      	ble.n	8001360 <acc_menuPotencia+0xe0>
				cursor = 1;
 8001330:	4b62      	ldr	r3, [pc, #392]	; (80014bc <acc_menuPotencia+0x23c>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 1);
 8001336:	2101      	movs	r1, #1
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fa6f 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 800133e:	207e      	movs	r0, #126	; 0x7e
 8001340:	f7ff fa20 	bl	8000784 <lcd_send_data>
				lcd_put_cur(0, 0);
 8001344:	2100      	movs	r1, #0
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff fa68 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 800134c:	485f      	ldr	r0, [pc, #380]	; (80014cc <acc_menuPotencia+0x24c>)
 800134e:	f7ff faed 	bl	800092c <lcd_send_string>
				lcd_put_cur(10, 1);
 8001352:	2101      	movs	r1, #1
 8001354:	200a      	movs	r0, #10
 8001356:	f7ff fa61 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 800135a:	485c      	ldr	r0, [pc, #368]	; (80014cc <acc_menuPotencia+0x24c>)
 800135c:	f7ff fae6 	bl	800092c <lcd_send_string>
			if (PULSO != 0){
 8001360:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <acc_menuPotencia+0x244>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <acc_menuPotencia+0xf4>
 8001368:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <acc_menuPotencia+0x248>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <acc_menuPotencia+0xf4>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <acc_menuPotencia+0xf6>
 8001374:	2300      	movs	r3, #0
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8099 	beq.w	80014ae <acc_menuPotencia+0x22e>
				lcd_put_cur(0, 0);
 800137c:	2100      	movs	r1, #0
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fa4c 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 8001384:	4851      	ldr	r0, [pc, #324]	; (80014cc <acc_menuPotencia+0x24c>)
 8001386:	f7ff fad1 	bl	800092c <lcd_send_string>
				lcd_put_cur(4, 0);
 800138a:	2100      	movs	r1, #0
 800138c:	2004      	movs	r0, #4
 800138e:	f7ff fa45 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7F); // <-
 8001392:	207f      	movs	r0, #127	; 0x7f
 8001394:	f7ff f9f6 	bl	8000784 <lcd_send_data>
				lcd_put_cur(14, 0);
 8001398:	2100      	movs	r1, #0
 800139a:	200e      	movs	r0, #14
 800139c:	f7ff fa3e 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 80013a0:	207e      	movs	r0, #126	; 0x7e
 80013a2:	f7ff f9ef 	bl	8000784 <lcd_send_data>
				flag_setValor = 1;
 80013a6:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <acc_menuPotencia+0x240>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
		break;
 80013ac:	e07f      	b.n	80014ae <acc_menuPotencia+0x22e>
			if (lecturaEnc > 0){
 80013ae:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <acc_menuPotencia+0x250>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dd17      	ble.n	80013e6 <acc_menuPotencia+0x166>
				cursor = 2;
 80013b6:	4b41      	ldr	r3, [pc, #260]	; (80014bc <acc_menuPotencia+0x23c>)
 80013b8:	2202      	movs	r2, #2
 80013ba:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(10, 1);
 80013bc:	2101      	movs	r1, #1
 80013be:	200a      	movs	r0, #10
 80013c0:	f7ff fa2c 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 80013c4:	207e      	movs	r0, #126	; 0x7e
 80013c6:	f7ff f9dd 	bl	8000784 <lcd_send_data>
				lcd_put_cur(0, 0);
 80013ca:	2100      	movs	r1, #0
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff fa25 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 80013d2:	483e      	ldr	r0, [pc, #248]	; (80014cc <acc_menuPotencia+0x24c>)
 80013d4:	f7ff faaa 	bl	800092c <lcd_send_string>
				lcd_put_cur(0, 1);
 80013d8:	2101      	movs	r1, #1
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fa1e 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 80013e0:	483a      	ldr	r0, [pc, #232]	; (80014cc <acc_menuPotencia+0x24c>)
 80013e2:	f7ff faa3 	bl	800092c <lcd_send_string>
			if (lecturaEnc < 0){
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <acc_menuPotencia+0x250>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da17      	bge.n	800141e <acc_menuPotencia+0x19e>
				cursor = 0;
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <acc_menuPotencia+0x23c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 0);
 80013f4:	2100      	movs	r1, #0
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff fa10 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 80013fc:	207e      	movs	r0, #126	; 0x7e
 80013fe:	f7ff f9c1 	bl	8000784 <lcd_send_data>
				lcd_put_cur(0, 1);
 8001402:	2101      	movs	r1, #1
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff fa09 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 800140a:	4830      	ldr	r0, [pc, #192]	; (80014cc <acc_menuPotencia+0x24c>)
 800140c:	f7ff fa8e 	bl	800092c <lcd_send_string>
				lcd_put_cur(10, 1);
 8001410:	2101      	movs	r1, #1
 8001412:	200a      	movs	r0, #10
 8001414:	f7ff fa02 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 8001418:	482c      	ldr	r0, [pc, #176]	; (80014cc <acc_menuPotencia+0x24c>)
 800141a:	f7ff fa87 	bl	800092c <lcd_send_string>
			if (PULSO != 0){
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <acc_menuPotencia+0x244>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <acc_menuPotencia+0x1b2>
 8001426:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <acc_menuPotencia+0x248>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <acc_menuPotencia+0x1b2>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <acc_menuPotencia+0x1b4>
 8001432:	2300      	movs	r3, #0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d03c      	beq.n	80014b2 <acc_menuPotencia+0x232>
				cursor = 0;
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <acc_menuPotencia+0x23c>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
				pantallaActual = &pantalla [MENU_PRINCIPAL];
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <acc_menuPotencia+0x260>)
 8001440:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <acc_menuPotencia+0x264>)
 8001442:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <acc_menuPotencia+0x260>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4798      	blx	r3
		break;
 800144c:	e031      	b.n	80014b2 <acc_menuPotencia+0x232>
			if (lecturaEnc < 0){
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <acc_menuPotencia+0x250>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	da17      	bge.n	8001486 <acc_menuPotencia+0x206>
				cursor = 1;
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <acc_menuPotencia+0x23c>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 1);
 800145c:	2101      	movs	r1, #1
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff f9dc 	bl	800081c <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8001464:	207e      	movs	r0, #126	; 0x7e
 8001466:	f7ff f98d 	bl	8000784 <lcd_send_data>
				lcd_put_cur(0, 0);
 800146a:	2100      	movs	r1, #0
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff f9d5 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 8001472:	4816      	ldr	r0, [pc, #88]	; (80014cc <acc_menuPotencia+0x24c>)
 8001474:	f7ff fa5a 	bl	800092c <lcd_send_string>
				lcd_put_cur(10, 1);
 8001478:	2101      	movs	r1, #1
 800147a:	200a      	movs	r0, #10
 800147c:	f7ff f9ce 	bl	800081c <lcd_put_cur>
				lcd_send_string(" ");
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <acc_menuPotencia+0x24c>)
 8001482:	f7ff fa53 	bl	800092c <lcd_send_string>
			if (PULSO){
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <acc_menuPotencia+0x244>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d013      	beq.n	80014b6 <acc_menuPotencia+0x236>
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <acc_menuPotencia+0x248>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10f      	bne.n	80014b6 <acc_menuPotencia+0x236>
				pantallaActual = &pantalla[MEDICION_POTENCIA];
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <acc_menuPotencia+0x260>)
 8001498:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <acc_menuPotencia+0x268>)
 800149a:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <acc_menuPotencia+0x260>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4798      	blx	r3
		break;
 80014a4:	e007      	b.n	80014b6 <acc_menuPotencia+0x236>
		break;
 80014a6:	bf00      	nop
 80014a8:	e006      	b.n	80014b8 <acc_menuPotencia+0x238>
				break;
 80014aa:	bf00      	nop
 80014ac:	e004      	b.n	80014b8 <acc_menuPotencia+0x238>
		break;
 80014ae:	bf00      	nop
 80014b0:	e002      	b.n	80014b8 <acc_menuPotencia+0x238>
		break;
 80014b2:	bf00      	nop
 80014b4:	e000      	b.n	80014b8 <acc_menuPotencia+0x238>
		break;
 80014b6:	bf00      	nop
	} //end switch cursor
} //fin acc_menuPotencia()
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200001f2 	.word	0x200001f2
 80014c0:	200001f3 	.word	0x200001f3
 80014c4:	20000005 	.word	0x20000005
 80014c8:	20000004 	.word	0x20000004
 80014cc:	080075c0 	.word	0x080075c0
 80014d0:	20000198 	.word	0x20000198
 80014d4:	200001f4 	.word	0x200001f4
 80014d8:	080075cc 	.word	0x080075cc
 80014dc:	200001c0 	.word	0x200001c0
 80014e0:	200001bc 	.word	0x200001bc
 80014e4:	2000001c 	.word	0x2000001c
 80014e8:	20000040 	.word	0x20000040

080014ec <acc_medicionCorriente>:


void acc_medicionCorriente (void){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	if (PULSO != 0){
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <acc_medicionCorriente+0x84>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <acc_medicionCorriente+0x18>
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <acc_medicionCorriente+0x88>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <acc_medicionCorriente+0x18>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <acc_medicionCorriente+0x1a>
 8001504:	2300      	movs	r3, #0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <acc_medicionCorriente+0x32>
		cursor = 0;
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <acc_medicionCorriente+0x8c>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
		pantallaActual = &pantalla [MENU_CORRIENTE];
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <acc_medicionCorriente+0x90>)
 8001512:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <acc_medicionCorriente+0x94>)
 8001514:	601a      	str	r2, [r3, #0]
		pantallaActual->inicia_menu();
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <acc_medicionCorriente+0x90>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4798      	blx	r3
	}

	if (periodo_impMed > 29){ //actualiza cada 300 ms
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <acc_medicionCorriente+0x98>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b1d      	cmp	r3, #29
 8001524:	d921      	bls.n	800156a <acc_medicionCorriente+0x7e>
		lcd_put_cur(5, 1);
 8001526:	2101      	movs	r1, #1
 8001528:	2005      	movs	r0, #5
 800152a:	f7ff f977 	bl	800081c <lcd_put_cur>
		sprintf(texto, "%d.%dmA ", medida_corriente / 10, medida_corriente % 10 );
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <acc_medicionCorriente+0x9c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a16      	ldr	r2, [pc, #88]	; (800158c <acc_medicionCorriente+0xa0>)
 8001534:	fb82 1203 	smull	r1, r2, r2, r3
 8001538:	1092      	asrs	r2, r2, #2
 800153a:	17db      	asrs	r3, r3, #31
 800153c:	1ad0      	subs	r0, r2, r3
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <acc_medicionCorriente+0x9c>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <acc_medicionCorriente+0xa0>)
 8001544:	fb83 1302 	smull	r1, r3, r3, r2
 8001548:	1099      	asrs	r1, r3, #2
 800154a:	17d3      	asrs	r3, r2, #31
 800154c:	1ac9      	subs	r1, r1, r3
 800154e:	460b      	mov	r3, r1
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	1ad1      	subs	r1, r2, r3
 8001558:	460b      	mov	r3, r1
 800155a:	4602      	mov	r2, r0
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <acc_medicionCorriente+0xa4>)
 800155e:	480d      	ldr	r0, [pc, #52]	; (8001594 <acc_medicionCorriente+0xa8>)
 8001560:	f005 fb72 	bl	8006c48 <siprintf>
		lcd_send_string(texto);
 8001564:	480b      	ldr	r0, [pc, #44]	; (8001594 <acc_medicionCorriente+0xa8>)
 8001566:	f7ff f9e1 	bl	800092c <lcd_send_string>
	}
} //fin acc_medicionCorriente()
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000005 	.word	0x20000005
 8001574:	20000004 	.word	0x20000004
 8001578:	200001f2 	.word	0x200001f2
 800157c:	200001bc 	.word	0x200001bc
 8001580:	20000034 	.word	0x20000034
 8001584:	2000019e 	.word	0x2000019e
 8001588:	20000200 	.word	0x20000200
 800158c:	66666667 	.word	0x66666667
 8001590:	080075d4 	.word	0x080075d4
 8001594:	200001c0 	.word	0x200001c0

08001598 <acc_medicionPotencia>:


void acc_medicionPotencia (void){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	if (PULSO != 0){
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <acc_medicionPotencia+0x84>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <acc_medicionPotencia+0x18>
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <acc_medicionPotencia+0x88>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <acc_medicionPotencia+0x18>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <acc_medicionPotencia+0x1a>
 80015b0:	2300      	movs	r3, #0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d009      	beq.n	80015ca <acc_medicionPotencia+0x32>
		cursor = 0;
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <acc_medicionPotencia+0x8c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
		pantallaActual = &pantalla [MENU_POTENCIA];
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <acc_medicionPotencia+0x90>)
 80015be:	4a1b      	ldr	r2, [pc, #108]	; (800162c <acc_medicionPotencia+0x94>)
 80015c0:	601a      	str	r2, [r3, #0]
		pantallaActual->inicia_menu();
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <acc_medicionPotencia+0x90>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4798      	blx	r3
	}

	if (periodo_impMed > 29){ //actualiza cada 300 ms
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <acc_medicionPotencia+0x98>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b1d      	cmp	r3, #29
 80015d0:	d921      	bls.n	8001616 <acc_medicionPotencia+0x7e>
		lcd_put_cur(5, 1);
 80015d2:	2101      	movs	r1, #1
 80015d4:	2005      	movs	r0, #5
 80015d6:	f7ff f921 	bl	800081c <lcd_put_cur>
		sprintf(texto, "%d.%dmA ", medida_potencia / 10, medida_potencia % 10 );
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <acc_medicionPotencia+0x9c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <acc_medicionPotencia+0xa0>)
 80015e0:	fb82 1203 	smull	r1, r2, r2, r3
 80015e4:	1092      	asrs	r2, r2, #2
 80015e6:	17db      	asrs	r3, r3, #31
 80015e8:	1ad0      	subs	r0, r2, r3
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <acc_medicionPotencia+0x9c>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <acc_medicionPotencia+0xa0>)
 80015f0:	fb83 1302 	smull	r1, r3, r3, r2
 80015f4:	1099      	asrs	r1, r3, #2
 80015f6:	17d3      	asrs	r3, r2, #31
 80015f8:	1ac9      	subs	r1, r1, r3
 80015fa:	460b      	mov	r3, r1
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	1ad1      	subs	r1, r2, r3
 8001604:	460b      	mov	r3, r1
 8001606:	4602      	mov	r2, r0
 8001608:	490c      	ldr	r1, [pc, #48]	; (800163c <acc_medicionPotencia+0xa4>)
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <acc_medicionPotencia+0xa8>)
 800160c:	f005 fb1c 	bl	8006c48 <siprintf>
		lcd_send_string(texto);
 8001610:	480b      	ldr	r0, [pc, #44]	; (8001640 <acc_medicionPotencia+0xa8>)
 8001612:	f7ff f98b 	bl	800092c <lcd_send_string>
	}
} //fin acc_medicionPotencia()
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000005 	.word	0x20000005
 8001620:	20000004 	.word	0x20000004
 8001624:	200001f2 	.word	0x200001f2
 8001628:	200001bc 	.word	0x200001bc
 800162c:	20000028 	.word	0x20000028
 8001630:	2000019e 	.word	0x2000019e
 8001634:	200001fc 	.word	0x200001fc
 8001638:	66666667 	.word	0x66666667
 800163c:	080075d4 	.word	0x080075d4
 8001640:	200001c0 	.word	0x200001c0

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_MspInit+0x44>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_MspInit+0x44>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6193      	str	r3, [r2, #24]
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_MspInit+0x44>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_MspInit+0x44>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_MspInit+0x44>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_MspInit+0x44>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f000 fb40 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM7_DAC2_IRQHandler+0x10>)
 80016e6:	f003 fee6 	bl	80054b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200002a0 	.word	0x200002a0

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f005 fa5e 	bl	8006be4 <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	220c      	movs	r2, #12
 800172c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20003000 	.word	0x20003000
 8001754:	00000400 	.word	0x00000400
 8001758:	20000204 	.word	0x20000204
 800175c:	20000388 	.word	0x20000388

08001760 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <SystemInit+0x20>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <SystemInit+0x20>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b09a      	sub	sp, #104	; 0x68
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	615a      	str	r2, [r3, #20]
 80017b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	222c      	movs	r2, #44	; 0x2c
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fa3a 	bl	8006c38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c4:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <MX_TIM1_Init+0x150>)
 80017c6:	4a44      	ldr	r2, [pc, #272]	; (80018d8 <MX_TIM1_Init+0x154>)
 80017c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 80017ca:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <MX_TIM1_Init+0x150>)
 80017cc:	2213      	movs	r2, #19
 80017ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <MX_TIM1_Init+0x150>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80017d6:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <MX_TIM1_Init+0x150>)
 80017d8:	2263      	movs	r2, #99	; 0x63
 80017da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017dc:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <MX_TIM1_Init+0x150>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e2:	4b3c      	ldr	r3, [pc, #240]	; (80018d4 <MX_TIM1_Init+0x150>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e8:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <MX_TIM1_Init+0x150>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ee:	4839      	ldr	r0, [pc, #228]	; (80018d4 <MX_TIM1_Init+0x150>)
 80017f0:	f003 fbf8 	bl	8004fe4 <HAL_TIM_Base_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017fa:	f7ff fa47 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001802:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001804:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001808:	4619      	mov	r1, r3
 800180a:	4832      	ldr	r0, [pc, #200]	; (80018d4 <MX_TIM1_Init+0x150>)
 800180c:	f004 f886 	bl	800591c <HAL_TIM_ConfigClockSource>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001816:	f7ff fa39 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800181a:	482e      	ldr	r0, [pc, #184]	; (80018d4 <MX_TIM1_Init+0x150>)
 800181c:	f003 fc96 	bl	800514c <HAL_TIM_PWM_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001826:	f7ff fa31 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001836:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800183a:	4619      	mov	r1, r3
 800183c:	4825      	ldr	r0, [pc, #148]	; (80018d4 <MX_TIM1_Init+0x150>)
 800183e:	f004 fd33 	bl	80062a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001848:	f7ff fa20 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184c:	2360      	movs	r3, #96	; 0x60
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001858:	2300      	movs	r3, #0
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	4818      	ldr	r0, [pc, #96]	; (80018d4 <MX_TIM1_Init+0x150>)
 8001872:	f003 ff3f 	bl	80056f4 <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800187c:	f7ff fa06 	bl	8000c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001898:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	4619      	mov	r1, r3
 80018b4:	4807      	ldr	r0, [pc, #28]	; (80018d4 <MX_TIM1_Init+0x150>)
 80018b6:	f004 fd65 	bl	8006384 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80018c0:	f7ff f9e4 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018c4:	4803      	ldr	r0, [pc, #12]	; (80018d4 <MX_TIM1_Init+0x150>)
 80018c6:	f000 f92d 	bl	8001b24 <HAL_TIM_MspPostInit>

}
 80018ca:	bf00      	nop
 80018cc:	3768      	adds	r7, #104	; 0x68
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000208 	.word	0x20000208
 80018d8:	40012c00 	.word	0x40012c00

080018dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	2224      	movs	r2, #36	; 0x24
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f005 f9a4 	bl	8006c38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	463b      	mov	r3, r7
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018fa:	4b21      	ldr	r3, [pc, #132]	; (8001980 <MX_TIM2_Init+0xa4>)
 80018fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001900:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001902:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <MX_TIM2_Init+0xa4>)
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_TIM2_Init+0xa4>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <MX_TIM2_Init+0xa4>)
 8001910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001914:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM2_Init+0xa4>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MX_TIM2_Init+0xa4>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001922:	2301      	movs	r3, #1
 8001924:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800192a:	2301      	movs	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800193a:	2301      	movs	r3, #1
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4619      	mov	r1, r3
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <MX_TIM2_Init+0xa4>)
 800194e:	f003 fc5e 	bl	800520e <HAL_TIM_Encoder_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001958:	f7ff f998 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_TIM2_Init+0xa4>)
 800196a:	f004 fc9d 	bl	80062a8 <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001974:	f7ff f98a 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3730      	adds	r7, #48	; 0x30
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000254 	.word	0x20000254

08001984 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <MX_TIM7_Init+0x68>)
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <MX_TIM7_Init+0x6c>)
 8001998:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 640-1;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_TIM7_Init+0x68>)
 800199c:	f240 227f 	movw	r2, #639	; 0x27f
 80019a0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_TIM7_Init+0x68>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <MX_TIM7_Init+0x68>)
 80019aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019ae:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_TIM7_Init+0x68>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019b6:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_TIM7_Init+0x68>)
 80019b8:	f003 fb14 	bl	8004fe4 <HAL_TIM_Base_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80019c2:	f7ff f963 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4806      	ldr	r0, [pc, #24]	; (80019ec <MX_TIM7_Init+0x68>)
 80019d4:	f004 fc68 	bl	80062a8 <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80019de:	f7ff f955 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200002a0 	.word	0x200002a0
 80019f0:	40001400 	.word	0x40001400

080019f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <HAL_TIM_Base_MspInit+0x68>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10c      	bne.n	8001a20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a10:	6193      	str	r3, [r2, #24]
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001a1e:	e018      	b.n	8001a52 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_TIM_Base_MspInit+0x70>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d113      	bne.n	8001a52 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a30:	f043 0320 	orr.w	r3, r3, #32
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_TIM_Base_MspInit+0x6c>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2037      	movs	r0, #55	; 0x37
 8001a48:	f000 fd65 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001a4c:	2037      	movs	r0, #55	; 0x37
 8001a4e:	f000 fd7e 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40012c00 	.word	0x40012c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40001400 	.word	0x40001400

08001a68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a88:	d144      	bne.n	8001b14 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_TIM_Encoder_MspInit+0xb4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <HAL_TIM_Encoder_MspInit+0xb4>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	61d3      	str	r3, [r2, #28]
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <HAL_TIM_Encoder_MspInit+0xb4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_TIM_Encoder_MspInit+0xb4>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_TIM_Encoder_MspInit+0xb4>)
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aac:	6153      	str	r3, [r2, #20]
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_TIM_Encoder_MspInit+0xb4>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_TIM_Encoder_MspInit+0xb4>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_TIM_Encoder_MspInit+0xb4>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac4:	6153      	str	r3, [r2, #20]
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_TIM_Encoder_MspInit+0xb4>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f000 fd48 	bl	8002584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001af4:	2308      	movs	r3, #8
 8001af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b04:	2301      	movs	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4804      	ldr	r0, [pc, #16]	; (8001b20 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001b10:	f000 fd38 	bl	8002584 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48000400 	.word	0x48000400

08001b24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <HAL_TIM_MspPostInit+0x68>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d11d      	bne.n	8001b82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_TIM_MspPostInit+0x6c>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <HAL_TIM_MspPostInit+0x6c>)
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	6153      	str	r3, [r2, #20]
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_TIM_MspPostInit+0x6c>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_D9_Pin;
 8001b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b70:	2306      	movs	r3, #6
 8001b72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7e:	f000 fd01 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40012c00 	.word	0x40012c00
 8001b90:	40021000 	.word	0x40021000

08001b94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_USART2_UART_Init+0x58>)
 8001b9a:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <MX_USART2_UART_Init+0x58>)
 8001ba0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_USART2_UART_Init+0x58>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_USART2_UART_Init+0x58>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_USART2_UART_Init+0x58>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_USART2_UART_Init+0x58>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <MX_USART2_UART_Init+0x58>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_USART2_UART_Init+0x58>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <MX_USART2_UART_Init+0x58>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_USART2_UART_Init+0x58>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_USART2_UART_Init+0x58>)
 8001bd8:	f004 fc6a 	bl	80064b0 <HAL_UART_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001be2:	f7ff f853 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200002ec 	.word	0x200002ec
 8001bf0:	40004400 	.word	0x40004400

08001bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <HAL_UART_MspInit+0x80>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d129      	bne.n	8001c6a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_UART_MspInit+0x84>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_UART_MspInit+0x84>)
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	61d3      	str	r3, [r2, #28]
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_UART_MspInit+0x84>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_UART_MspInit+0x84>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <HAL_UART_MspInit+0x84>)
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c38:	6153      	str	r3, [r2, #20]
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_UART_MspInit+0x84>)
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001c46:	f248 0304 	movw	r3, #32772	; 0x8004
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c58:	2307      	movs	r3, #7
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c66:	f000 fc8d 	bl	8002584 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40004400 	.word	0x40004400
 8001c78:	40021000 	.word	0x40021000

08001c7c <Reset_Handler>:
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopForever+0x2>
 8001c80:	f7ff fd6e 	bl	8001760 <SystemInit>
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <LoopForever+0x6>)
 8001c86:	490d      	ldr	r1, [pc, #52]	; (8001cbc <LoopForever+0xa>)
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <LoopForever+0xe>)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:
 8001c8e:	58d4      	ldr	r4, [r2, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:
 8001c94:	18c4      	adds	r4, r0, r3
 8001c96:	428c      	cmp	r4, r1
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <LoopForever+0x12>)
 8001c9c:	4c0a      	ldr	r4, [pc, #40]	; (8001cc8 <LoopForever+0x16>)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:
 8001ca6:	42a2      	cmp	r2, r4
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>
 8001caa:	f004 ffa1 	bl	8006bf0 <__libc_init_array>
 8001cae:	f7fe fe7d 	bl	80009ac <main>

08001cb2 <LoopForever>:
 8001cb2:	e7fe      	b.n	8001cb2 <LoopForever>
 8001cb4:	20003000 	.word	0x20003000
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	200000c8 	.word	0x200000c8
 8001cc0:	08007654 	.word	0x08007654
 8001cc4:	200000c8 	.word	0x200000c8
 8001cc8:	20000388 	.word	0x20000388

08001ccc <ADC1_2_IRQHandler>:
 8001ccc:	e7fe      	b.n	8001ccc <ADC1_2_IRQHandler>
	...

08001cd0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_Init+0x28>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_Init+0x28>)
 8001cda:	f043 0310 	orr.w	r3, r3, #16
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 fc0d 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 f808 	bl	8001cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cec:	f7ff fcaa 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40022000 	.word	0x40022000

08001cfc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x54>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_InitTick+0x58>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fc25 	bl	800256a <HAL_SYSTICK_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00e      	b.n	8001d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d80a      	bhi.n	8001d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d38:	f000 fbed 	bl	8002516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d3c:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <HAL_InitTick+0x5c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000058 	.word	0x20000058
 8001d54:	20000060 	.word	0x20000060
 8001d58:	2000005c 	.word	0x2000005c

08001d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000060 	.word	0x20000060
 8001d80:	20000374 	.word	0x20000374

08001d84 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000374 	.word	0x20000374

08001d9c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffde 	bl	8001d84 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000060 	.word	0x20000060

08001de4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b09a      	sub	sp, #104	; 0x68
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e172      	b.n	80020ea <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d176      	bne.n	8001f04 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d152      	bne.n	8001ec4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7fe fb6d 	bl	8000518 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d13b      	bne.n	8001ec4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fa21 	bl	8002294 <ADC_Disable>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d12f      	bne.n	8001ec4 <HAL_ADC_Init+0xe0>
 8001e64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d12b      	bne.n	8001ec4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e74:	f023 0302 	bic.w	r3, r3, #2
 8001e78:	f043 0202 	orr.w	r2, r3, #2
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e8e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e9e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ea0:	4b94      	ldr	r3, [pc, #592]	; (80020f4 <HAL_ADC_Init+0x310>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a94      	ldr	r2, [pc, #592]	; (80020f8 <HAL_ADC_Init+0x314>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0c9a      	lsrs	r2, r3, #18
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eb6:	e002      	b.n	8001ebe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f9      	bne.n	8001eb8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee0:	d110      	bne.n	8001f04 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f023 0312 	bic.w	r3, r3, #18
 8001eea:	f043 0210 	orr.w	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f040 80df 	bne.w	80020d0 <HAL_ADC_Init+0x2ec>
 8001f12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 80da 	bne.w	80020d0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 80d2 	bne.w	80020d0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f34:	f043 0202 	orr.w	r2, r3, #2
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <HAL_ADC_Init+0x318>)
 8001f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f48:	d102      	bne.n	8001f50 <HAL_ADC_Init+0x16c>
 8001f4a:	4b6d      	ldr	r3, [pc, #436]	; (8002100 <HAL_ADC_Init+0x31c>)
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e002      	b.n	8001f56 <HAL_ADC_Init+0x172>
 8001f50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f54:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d108      	bne.n	8001f76 <HAL_ADC_Init+0x192>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Init+0x192>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_ADC_Init+0x194>
 8001f76:	2300      	movs	r3, #0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d11c      	bne.n	8001fb6 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_ADC_Init+0x1ba>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_Init+0x1ba>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_ADC_Init+0x1bc>
 8001f9e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d108      	bne.n	8001fb6 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7e5b      	ldrb	r3, [r3, #25]
 8001fba:	035b      	lsls	r3, r3, #13
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fc0:	2a01      	cmp	r2, #1
 8001fc2:	d002      	beq.n	8001fca <HAL_ADC_Init+0x1e6>
 8001fc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fc8:	e000      	b.n	8001fcc <HAL_ADC_Init+0x1e8>
 8001fca:	2200      	movs	r2, #0
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d11b      	bne.n	8002022 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7e5b      	ldrb	r3, [r3, #25]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	045a      	lsls	r2, r3, #17
 8001ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002002:	663b      	str	r3, [r7, #96]	; 0x60
 8002004:	e00d      	b.n	8002022 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f043 0201 	orr.w	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	2b01      	cmp	r3, #1
 8002028:	d007      	beq.n	800203a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	4313      	orrs	r3, r2
 8002034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002036:	4313      	orrs	r3, r2
 8002038:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b00      	cmp	r3, #0
 8002046:	d114      	bne.n	8002072 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002056:	f023 0302 	bic.w	r3, r3, #2
 800205a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7e1b      	ldrb	r3, [r3, #24]
 8002060:	039a      	lsls	r2, r3, #14
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4313      	orrs	r3, r2
 800206c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800206e:	4313      	orrs	r3, r2
 8002070:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_ADC_Init+0x320>)
 800207a:	4013      	ands	r3, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002082:	430b      	orrs	r3, r1
 8002084:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10c      	bne.n	80020a8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	f023 010f 	bic.w	r1, r3, #15
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	1e5a      	subs	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
 80020a6:	e007      	b.n	80020b8 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 020f 	bic.w	r2, r2, #15
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f023 0303 	bic.w	r3, r3, #3
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
 80020ce:	e00a      	b.n	80020e6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f023 0312 	bic.w	r3, r3, #18
 80020d8:	f043 0210 	orr.w	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80020e0:	2301      	movs	r3, #1
 80020e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80020e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3768      	adds	r7, #104	; 0x68
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000058 	.word	0x20000058
 80020f8:	431bde83 	.word	0x431bde83
 80020fc:	50000300 	.word	0x50000300
 8002100:	50000100 	.word	0x50000100
 8002104:	fff0c007 	.word	0xfff0c007

08002108 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002108:	b480      	push	{r7}
 800210a:	b099      	sub	sp, #100	; 0x64
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002120:	d102      	bne.n	8002128 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002122:	4b5a      	ldr	r3, [pc, #360]	; (800228c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	e002      	b.n	800212e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002128:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800212c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0a2      	b.n	800227e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002142:	2302      	movs	r3, #2
 8002144:	e09b      	b.n	800227e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d17f      	bne.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d179      	bne.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002168:	4b49      	ldr	r3, [pc, #292]	; (8002290 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800216a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d040      	beq.n	80021f6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002186:	035b      	lsls	r3, r3, #13
 8002188:	430b      	orrs	r3, r1
 800218a:	431a      	orrs	r2, r3
 800218c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800218e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d108      	bne.n	80021b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80021b0:	2300      	movs	r3, #0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d15c      	bne.n	8002270 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80021d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d14b      	bne.n	8002270 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80021d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021e0:	f023 030f 	bic.w	r3, r3, #15
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	6811      	ldr	r1, [r2, #0]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	6892      	ldr	r2, [r2, #8]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	431a      	orrs	r2, r3
 80021f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021f4:	e03c      	b.n	8002270 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002200:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d108      	bne.n	8002222 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002222:	2300      	movs	r3, #0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d123      	bne.n	8002270 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d107      	bne.n	8002244 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002244:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002246:	2b00      	cmp	r3, #0
 8002248:	d112      	bne.n	8002270 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800224a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002252:	f023 030f 	bic.w	r3, r3, #15
 8002256:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002258:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800225a:	e009      	b.n	8002270 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0220 	orr.w	r2, r3, #32
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800226e:	e000      	b.n	8002272 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002270:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800227a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800227e:	4618      	mov	r0, r3
 8002280:	3764      	adds	r7, #100	; 0x64
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	50000100 	.word	0x50000100
 8002290:	50000300 	.word	0x50000300

08002294 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <ADC_Disable+0x2c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <ADC_Disable+0x2c>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <ADC_Disable+0x2e>
 80022c0:	2300      	movs	r3, #0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d047      	beq.n	8002356 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030d 	and.w	r3, r3, #13
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d10f      	bne.n	80022f4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0202 	orr.w	r2, r2, #2
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2203      	movs	r2, #3
 80022ea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80022ec:	f7ff fd4a 	bl	8001d84 <HAL_GetTick>
 80022f0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022f2:	e029      	b.n	8002348 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f043 0210 	orr.w	r2, r3, #16
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e023      	b.n	8002358 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002310:	f7ff fd38 	bl	8001d84 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d914      	bls.n	8002348 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d10d      	bne.n	8002348 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f043 0210 	orr.w	r2, r3, #16
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	f043 0201 	orr.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e007      	b.n	8002358 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d0dc      	beq.n	8002310 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	; (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024cc:	d301      	bcc.n	80024d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00f      	b.n	80024f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <SysTick_Config+0x40>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024da:	210f      	movs	r1, #15
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024e0:	f7ff ff8e 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x40>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff29 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff3e 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff8e 	bl	8002454 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5d 	bl	8002400 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff31 	bl	80023c4 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffa2 	bl	80024bc <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002592:	e14e      	b.n	8002832 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2101      	movs	r1, #1
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8140 	beq.w	800282c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d005      	beq.n	80025c4 <HAL_GPIO_Init+0x40>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d130      	bne.n	8002626 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2203      	movs	r2, #3
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025fa:	2201      	movs	r2, #1
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	f003 0201 	and.w	r2, r3, #1
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b03      	cmp	r3, #3
 8002630:	d017      	beq.n	8002662 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d123      	bne.n	80026b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	220f      	movs	r2, #15
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	08da      	lsrs	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3208      	adds	r2, #8
 80026b0:	6939      	ldr	r1, [r7, #16]
 80026b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0203 	and.w	r2, r3, #3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 809a 	beq.w	800282c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f8:	4b55      	ldr	r3, [pc, #340]	; (8002850 <HAL_GPIO_Init+0x2cc>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4a54      	ldr	r2, [pc, #336]	; (8002850 <HAL_GPIO_Init+0x2cc>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6193      	str	r3, [r2, #24]
 8002704:	4b52      	ldr	r3, [pc, #328]	; (8002850 <HAL_GPIO_Init+0x2cc>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002710:	4a50      	ldr	r2, [pc, #320]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	089b      	lsrs	r3, r3, #2
 8002716:	3302      	adds	r3, #2
 8002718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	220f      	movs	r2, #15
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800273a:	d013      	beq.n	8002764 <HAL_GPIO_Init+0x1e0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a46      	ldr	r2, [pc, #280]	; (8002858 <HAL_GPIO_Init+0x2d4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00d      	beq.n	8002760 <HAL_GPIO_Init+0x1dc>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a45      	ldr	r2, [pc, #276]	; (800285c <HAL_GPIO_Init+0x2d8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d007      	beq.n	800275c <HAL_GPIO_Init+0x1d8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a44      	ldr	r2, [pc, #272]	; (8002860 <HAL_GPIO_Init+0x2dc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d101      	bne.n	8002758 <HAL_GPIO_Init+0x1d4>
 8002754:	2303      	movs	r3, #3
 8002756:	e006      	b.n	8002766 <HAL_GPIO_Init+0x1e2>
 8002758:	2305      	movs	r3, #5
 800275a:	e004      	b.n	8002766 <HAL_GPIO_Init+0x1e2>
 800275c:	2302      	movs	r3, #2
 800275e:	e002      	b.n	8002766 <HAL_GPIO_Init+0x1e2>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <HAL_GPIO_Init+0x1e2>
 8002764:	2300      	movs	r3, #0
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	f002 0203 	and.w	r2, r2, #3
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	4093      	lsls	r3, r2
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002776:	4937      	ldr	r1, [pc, #220]	; (8002854 <HAL_GPIO_Init+0x2d0>)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3302      	adds	r3, #2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002784:	4b37      	ldr	r3, [pc, #220]	; (8002864 <HAL_GPIO_Init+0x2e0>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027a8:	4a2e      	ldr	r2, [pc, #184]	; (8002864 <HAL_GPIO_Init+0x2e0>)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ae:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <HAL_GPIO_Init+0x2e0>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027d2:	4a24      	ldr	r2, [pc, #144]	; (8002864 <HAL_GPIO_Init+0x2e0>)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027d8:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_GPIO_Init+0x2e0>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <HAL_GPIO_Init+0x2e0>)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <HAL_GPIO_Init+0x2e0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002826:	4a0f      	ldr	r2, [pc, #60]	; (8002864 <HAL_GPIO_Init+0x2e0>)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	3301      	adds	r3, #1
 8002830:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f aea9 	bne.w	8002594 <HAL_GPIO_Init+0x10>
  }
}
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000
 8002858:	48000400 	.word	0x48000400
 800285c:	48000800 	.word	0x48000800
 8002860:	48000c00 	.word	0x48000c00
 8002864:	40010400 	.word	0x40010400

08002868 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	887b      	ldrh	r3, [r7, #2]
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
 8002884:	e001      	b.n	800288a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e081      	b.n	80029ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fd fee8 	bl	8000694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	e006      	b.n	8002920 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800291e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d104      	bne.n	8002932 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002944:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002954:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69d9      	ldr	r1, [r3, #28]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	461a      	mov	r2, r3
 80029c4:	460b      	mov	r3, r1
 80029c6:	817b      	strh	r3, [r7, #10]
 80029c8:	4613      	mov	r3, r2
 80029ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	f040 80da 	bne.w	8002b8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_I2C_Master_Transmit+0x30>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0d3      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029f0:	f7ff f9c8 	bl	8001d84 <HAL_GetTick>
 80029f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2319      	movs	r3, #25
 80029fc:	2201      	movs	r2, #1
 80029fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fcd0 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0be      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2221      	movs	r2, #33	; 0x21
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	893a      	ldrh	r2, [r7, #8]
 8002a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2bff      	cmp	r3, #255	; 0xff
 8002a42:	d90e      	bls.n	8002a62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	8979      	ldrh	r1, [r7, #10]
 8002a52:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fe5e 	bl	800371c <I2C_TransferConfig>
 8002a60:	e06c      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	8979      	ldrh	r1, [r7, #10]
 8002a74:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 fe4d 	bl	800371c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a82:	e05b      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	6a39      	ldr	r1, [r7, #32]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fcdc 	bl	8003446 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e07b      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d034      	beq.n	8002b3c <HAL_I2C_Master_Transmit+0x184>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d130      	bne.n	8002b3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fc5f 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e04d      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2bff      	cmp	r3, #255	; 0xff
 8002afc:	d90e      	bls.n	8002b1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	22ff      	movs	r2, #255	; 0xff
 8002b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	8979      	ldrh	r1, [r7, #10]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fe01 	bl	800371c <I2C_TransferConfig>
 8002b1a:	e00f      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	8979      	ldrh	r1, [r7, #10]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 fdf0 	bl	800371c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d19e      	bne.n	8002a84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	6a39      	ldr	r1, [r7, #32]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fcc2 	bl	80034d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e01a      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_I2C_Master_Transmit+0x1e4>)
 8002b6e:	400b      	ands	r3, r1
 8002b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	80002000 	.word	0x80002000
 8002b9c:	fe00e800 	.word	0xfe00e800

08002ba0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	817b      	strh	r3, [r7, #10]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	813b      	strh	r3, [r7, #8]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	f040 80f9 	bne.w	8002dba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x34>
 8002bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0ed      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_I2C_Mem_Write+0x4e>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0e6      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bf6:	f7ff f8c5 	bl	8001d84 <HAL_GetTick>
 8002bfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2319      	movs	r3, #25
 8002c02:	2201      	movs	r2, #1
 8002c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fbcd 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0d1      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2221      	movs	r2, #33	; 0x21
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c40:	88f8      	ldrh	r0, [r7, #6]
 8002c42:	893a      	ldrh	r2, [r7, #8]
 8002c44:	8979      	ldrh	r1, [r7, #10]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	4603      	mov	r3, r0
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fadd 	bl	8003210 <I2C_RequestMemoryWrite>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0a9      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2bff      	cmp	r3, #255	; 0xff
 8002c70:	d90e      	bls.n	8002c90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	22ff      	movs	r2, #255	; 0xff
 8002c76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	8979      	ldrh	r1, [r7, #10]
 8002c80:	2300      	movs	r3, #0
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fd47 	bl	800371c <I2C_TransferConfig>
 8002c8e:	e00f      	b.n	8002cb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	8979      	ldrh	r1, [r7, #10]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fd36 	bl	800371c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fbc6 	bl	8003446 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e07b      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d034      	beq.n	8002d68 <HAL_I2C_Mem_Write+0x1c8>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d130      	bne.n	8002d68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fb49 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e04d      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2bff      	cmp	r3, #255	; 0xff
 8002d28:	d90e      	bls.n	8002d48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	8979      	ldrh	r1, [r7, #10]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fceb 	bl	800371c <I2C_TransferConfig>
 8002d46:	e00f      	b.n	8002d68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	8979      	ldrh	r1, [r7, #10]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fcda 	bl	800371c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d19e      	bne.n	8002cb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fbac 	bl	80034d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e01a      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_I2C_Mem_Write+0x224>)
 8002d9a:	400b      	ands	r3, r1
 8002d9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
  }
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	fe00e800 	.word	0xfe00e800

08002dc8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	817b      	strh	r3, [r7, #10]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	813b      	strh	r3, [r7, #8]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 80fd 	bne.w	8002fea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_I2C_Mem_Read+0x34>
 8002df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0f1      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_I2C_Mem_Read+0x4e>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0ea      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e1e:	f7fe ffb1 	bl	8001d84 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2319      	movs	r3, #25
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 fab9 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0d5      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2222      	movs	r2, #34	; 0x22
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2240      	movs	r2, #64	; 0x40
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a3a      	ldr	r2, [r7, #32]
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e68:	88f8      	ldrh	r0, [r7, #6]
 8002e6a:	893a      	ldrh	r2, [r7, #8]
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	4603      	mov	r3, r0
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fa1d 	bl	80032b8 <I2C_RequestMemoryRead>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0ad      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2bff      	cmp	r3, #255	; 0xff
 8002e98:	d90e      	bls.n	8002eb8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	22ff      	movs	r2, #255	; 0xff
 8002e9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	8979      	ldrh	r1, [r7, #10]
 8002ea8:	4b52      	ldr	r3, [pc, #328]	; (8002ff4 <HAL_I2C_Mem_Read+0x22c>)
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fc33 	bl	800371c <I2C_TransferConfig>
 8002eb6:	e00f      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <HAL_I2C_Mem_Read+0x22c>)
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fc22 	bl	800371c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2104      	movs	r1, #4
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fa60 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07c      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d034      	beq.n	8002f98 <HAL_I2C_Mem_Read+0x1d0>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d130      	bne.n	8002f98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2180      	movs	r1, #128	; 0x80
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fa31 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e04d      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2bff      	cmp	r3, #255	; 0xff
 8002f58:	d90e      	bls.n	8002f78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fbd3 	bl	800371c <I2C_TransferConfig>
 8002f76:	e00f      	b.n	8002f98 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	8979      	ldrh	r1, [r7, #10]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fbc2 	bl	800371c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d19a      	bne.n	8002ed8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fa94 	bl	80034d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e01a      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_I2C_Mem_Read+0x230>)
 8002fca:	400b      	ands	r3, r1
 8002fcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
  }
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	80002400 	.word	0x80002400
 8002ff8:	fe00e800 	.word	0xfe00e800

08002ffc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	460b      	mov	r3, r1
 800300a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b20      	cmp	r3, #32
 800301a:	f040 80f3 	bne.w	8003204 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800302c:	d101      	bne.n	8003032 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	e0e9      	b.n	8003206 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_I2C_IsDeviceReady+0x44>
 800303c:	2302      	movs	r3, #2
 800303e:	e0e2      	b.n	8003206 <HAL_I2C_IsDeviceReady+0x20a>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2224      	movs	r2, #36	; 0x24
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d107      	bne.n	800306e <HAL_I2C_IsDeviceReady+0x72>
 800305e:	897b      	ldrh	r3, [r7, #10]
 8003060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800306c:	e006      	b.n	800307c <HAL_I2C_IsDeviceReady+0x80>
 800306e:	897b      	ldrh	r3, [r7, #10]
 8003070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003074:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003078:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003082:	f7fe fe7f 	bl	8001d84 <HAL_GetTick>
 8003086:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b20      	cmp	r3, #32
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80030b4:	e034      	b.n	8003120 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030bc:	d01a      	beq.n	80030f4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7fe fe61 	bl	8001d84 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <HAL_I2C_IsDeviceReady+0xd8>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10f      	bne.n	80030f4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e088      	b.n	8003206 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b10      	cmp	r3, #16
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003120:	7ffb      	ldrb	r3, [r7, #31]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <HAL_I2C_IsDeviceReady+0x130>
 8003126:	7fbb      	ldrb	r3, [r7, #30]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0c4      	beq.n	80030b6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b10      	cmp	r3, #16
 8003138:	d01a      	beq.n	8003170 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	2120      	movs	r1, #32
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f92f 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e058      	b.n	8003206 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2220      	movs	r2, #32
 800315a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e04a      	b.n	8003206 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	2120      	movs	r1, #32
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f914 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e03d      	b.n	8003206 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2210      	movs	r2, #16
 8003190:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2220      	movs	r2, #32
 8003198:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d118      	bne.n	80031d4 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	2120      	movs	r1, #32
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f8f3 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e01c      	b.n	8003206 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2220      	movs	r2, #32
 80031d2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3301      	adds	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	f63f af39 	bhi.w	8003056 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003204:	2302      	movs	r3, #2
  }
}
 8003206:	4618      	mov	r0, r3
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	4608      	mov	r0, r1
 800321a:	4611      	mov	r1, r2
 800321c:	461a      	mov	r2, r3
 800321e:	4603      	mov	r3, r0
 8003220:	817b      	strh	r3, [r7, #10]
 8003222:	460b      	mov	r3, r1
 8003224:	813b      	strh	r3, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	8979      	ldrh	r1, [r7, #10]
 8003230:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <I2C_RequestMemoryWrite+0xa4>)
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fa6f 	bl	800371c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	69b9      	ldr	r1, [r7, #24]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f8ff 	bl	8003446 <I2C_WaitOnTXISFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e02c      	b.n	80032ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003258:	893b      	ldrh	r3, [r7, #8]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	629a      	str	r2, [r3, #40]	; 0x28
 8003262:	e015      	b.n	8003290 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003264:	893b      	ldrh	r3, [r7, #8]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	b29b      	uxth	r3, r3
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	69b9      	ldr	r1, [r7, #24]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f8e5 	bl	8003446 <I2C_WaitOnTXISFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e012      	b.n	80032ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003286:	893b      	ldrh	r3, [r7, #8]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2200      	movs	r2, #0
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f884 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	80002000 	.word	0x80002000

080032b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	4608      	mov	r0, r1
 80032c2:	4611      	mov	r1, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	817b      	strh	r3, [r7, #10]
 80032ca:	460b      	mov	r3, r1
 80032cc:	813b      	strh	r3, [r7, #8]
 80032ce:	4613      	mov	r3, r2
 80032d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	8979      	ldrh	r1, [r7, #10]
 80032d8:	4b20      	ldr	r3, [pc, #128]	; (800335c <I2C_RequestMemoryRead+0xa4>)
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa1c 	bl	800371c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f8ac 	bl	8003446 <I2C_WaitOnTXISFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e02c      	b.n	8003352 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032fe:	893b      	ldrh	r3, [r7, #8]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28
 8003308:	e015      	b.n	8003336 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800330a:	893b      	ldrh	r3, [r7, #8]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	b29b      	uxth	r3, r3
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f892 	bl	8003446 <I2C_WaitOnTXISFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e012      	b.n	8003352 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800332c:	893b      	ldrh	r3, [r7, #8]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2200      	movs	r2, #0
 800333e:	2140      	movs	r1, #64	; 0x40
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f831 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	80002000 	.word	0x80002000

08003360 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d103      	bne.n	800337e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2200      	movs	r2, #0
 800337c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	d007      	beq.n	800339c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	619a      	str	r2, [r3, #24]
  }
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b8:	e031      	b.n	800341e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c0:	d02d      	beq.n	800341e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c2:	f7fe fcdf 	bl	8001d84 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d302      	bcc.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d122      	bne.n	800341e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	4013      	ands	r3, r2
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d113      	bne.n	800341e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	f043 0220 	orr.w	r2, r3, #32
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4013      	ands	r3, r2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	429a      	cmp	r2, r3
 800343a:	d0be      	beq.n	80033ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003452:	e033      	b.n	80034bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f87f 	bl	800355c <I2C_IsErrorOccurred>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e031      	b.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346e:	d025      	beq.n	80034bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003470:	f7fe fc88 	bl	8001d84 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	429a      	cmp	r2, r3
 800347e:	d302      	bcc.n	8003486 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d11a      	bne.n	80034bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b02      	cmp	r3, #2
 8003492:	d013      	beq.n	80034bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e007      	b.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d1c4      	bne.n	8003454 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e0:	e02f      	b.n	8003542 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f838 	bl	800355c <I2C_IsErrorOccurred>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e02d      	b.n	8003552 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7fe fc45 	bl	8001d84 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d11a      	bne.n	8003542 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b20      	cmp	r3, #32
 8003518:	d013      	beq.n	8003542 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f043 0220 	orr.w	r2, r3, #32
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e007      	b.n	8003552 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b20      	cmp	r3, #32
 800354e:	d1c8      	bne.n	80034e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	; 0x28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	d068      	beq.n	800365a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2210      	movs	r2, #16
 800358e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003590:	e049      	b.n	8003626 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003598:	d045      	beq.n	8003626 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fe fbf3 	bl	8001d84 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_IsErrorOccurred+0x54>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d13a      	bne.n	8003626 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d2:	d121      	bne.n	8003618 <I2C_IsErrorOccurred+0xbc>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035da:	d01d      	beq.n	8003618 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d01a      	beq.n	8003618 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035f2:	f7fe fbc7 	bl	8001d84 <HAL_GetTick>
 80035f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f8:	e00e      	b.n	8003618 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035fa:	f7fe fbc3 	bl	8001d84 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b19      	cmp	r3, #25
 8003606:	d907      	bls.n	8003618 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	f043 0320 	orr.w	r3, r3, #32
 800360e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003616:	e006      	b.n	8003626 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b20      	cmp	r3, #32
 8003624:	d1e9      	bne.n	80035fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b20      	cmp	r3, #32
 8003632:	d003      	beq.n	800363c <I2C_IsErrorOccurred+0xe0>
 8003634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0aa      	beq.n	8003592 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800363c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2220      	movs	r2, #32
 800364a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f043 0304 	orr.w	r3, r3, #4
 8003652:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800367c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f043 0308 	orr.w	r3, r3, #8
 8003694:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800369e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	f043 0302 	orr.w	r3, r3, #2
 80036b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01c      	beq.n	800370a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff fe45 	bl	8003360 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <I2C_IsErrorOccurred+0x1bc>)
 80036e2:	400b      	ands	r3, r1
 80036e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800370a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800370e:	4618      	mov	r0, r3
 8003710:	3728      	adds	r7, #40	; 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	fe00e800 	.word	0xfe00e800

0800371c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	460b      	mov	r3, r1
 8003728:	817b      	strh	r3, [r7, #10]
 800372a:	4613      	mov	r3, r2
 800372c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800372e:	897b      	ldrh	r3, [r7, #10]
 8003730:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003734:	7a7b      	ldrb	r3, [r7, #9]
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800373c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	4313      	orrs	r3, r2
 8003746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800374a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	0d5b      	lsrs	r3, r3, #21
 8003756:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <I2C_TransferConfig+0x60>)
 800375c:	430b      	orrs	r3, r1
 800375e:	43db      	mvns	r3, r3
 8003760:	ea02 0103 	and.w	r1, r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	03ff63ff 	.word	0x03ff63ff

08003780 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	d138      	bne.n	8003808 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e032      	b.n	800380a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2224      	movs	r2, #36	; 0x24
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b20      	cmp	r3, #32
 800382a:	d139      	bne.n	80038a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003836:	2302      	movs	r3, #2
 8003838:	e033      	b.n	80038a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2224      	movs	r2, #36	; 0x24
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003868:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
  }
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f001 b823 	b.w	800491c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 817d 	beq.w	8003be6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038ec:	4bbc      	ldr	r3, [pc, #752]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d00c      	beq.n	8003912 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038f8:	4bb9      	ldr	r3, [pc, #740]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b08      	cmp	r3, #8
 8003902:	d15c      	bne.n	80039be <HAL_RCC_OscConfig+0x10e>
 8003904:	4bb6      	ldr	r3, [pc, #728]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003910:	d155      	bne.n	80039be <HAL_RCC_OscConfig+0x10e>
 8003912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003916:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003926:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d102      	bne.n	8003944 <HAL_RCC_OscConfig+0x94>
 800393e:	4ba8      	ldr	r3, [pc, #672]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	e015      	b.n	8003970 <HAL_RCC_OscConfig+0xc0>
 8003944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003948:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800395c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003960:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800396c:	4b9c      	ldr	r3, [pc, #624]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003974:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003978:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800397c:	fa92 f2a2 	rbit	r2, r2
 8003980:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003984:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003988:	fab2 f282 	clz	r2, r2
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	f042 0220 	orr.w	r2, r2, #32
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f002 021f 	and.w	r2, r2, #31
 8003998:	2101      	movs	r1, #1
 800399a:	fa01 f202 	lsl.w	r2, r1, r2
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 811f 	beq.w	8003be4 <HAL_RCC_OscConfig+0x334>
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 8116 	bne.w	8003be4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f000 bfaf 	b.w	800491c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ce:	d106      	bne.n	80039de <HAL_RCC_OscConfig+0x12e>
 80039d0:	4b83      	ldr	r3, [pc, #524]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a82      	ldr	r2, [pc, #520]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	e036      	b.n	8003a4c <HAL_RCC_OscConfig+0x19c>
 80039de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x158>
 80039ee:	4b7c      	ldr	r3, [pc, #496]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a7b      	ldr	r2, [pc, #492]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 80039f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b79      	ldr	r3, [pc, #484]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a78      	ldr	r2, [pc, #480]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e021      	b.n	8003a4c <HAL_RCC_OscConfig+0x19c>
 8003a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x184>
 8003a1a:	4b71      	ldr	r3, [pc, #452]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a70      	ldr	r2, [pc, #448]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b6e      	ldr	r3, [pc, #440]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6d      	ldr	r2, [pc, #436]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0x19c>
 8003a34:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a69      	ldr	r2, [pc, #420]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b67      	ldr	r3, [pc, #412]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a66      	ldr	r2, [pc, #408]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a4c:	4b64      	ldr	r3, [pc, #400]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	f023 020f 	bic.w	r2, r3, #15
 8003a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	495f      	ldr	r1, [pc, #380]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d059      	beq.n	8003b2a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a76:	f7fe f985 	bl	8001d84 <HAL_GetTick>
 8003a7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fe f980 	bl	8001d84 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b64      	cmp	r3, #100	; 0x64
 8003a8e:	d902      	bls.n	8003a96 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	f000 bf43 	b.w	800491c <HAL_RCC_OscConfig+0x106c>
 8003a96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a9a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003aaa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d102      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x218>
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	e015      	b.n	8003af4 <HAL_RCC_OscConfig+0x244>
 8003ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003acc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003ad4:	fa93 f3a3 	rbit	r3, r3
 8003ad8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003ae4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003ae8:	fa93 f3a3 	rbit	r3, r3
 8003aec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003af0:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003af8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003afc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b00:	fa92 f2a2 	rbit	r2, r2
 8003b04:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003b08:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003b0c:	fab2 f282 	clz	r2, r2
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f042 0220 	orr.w	r2, r2, #32
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f002 021f 	and.w	r2, r2, #31
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ab      	beq.n	8003a80 <HAL_RCC_OscConfig+0x1d0>
 8003b28:	e05d      	b.n	8003be6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2a:	f7fe f92b 	bl	8001d84 <HAL_GetTick>
 8003b2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe f926 	bl	8001d84 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b64      	cmp	r3, #100	; 0x64
 8003b42:	d902      	bls.n	8003b4a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	f000 bee9 	b.w	800491c <HAL_RCC_OscConfig+0x106c>
 8003b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b4e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003b5e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d102      	bne.n	8003b7c <HAL_RCC_OscConfig+0x2cc>
 8003b76:	4b1a      	ldr	r3, [pc, #104]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	e015      	b.n	8003ba8 <HAL_RCC_OscConfig+0x2f8>
 8003b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b80:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b94:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003b98:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <HAL_RCC_OscConfig+0x330>)
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bac:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003bb0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003bb4:	fa92 f2a2 	rbit	r2, r2
 8003bb8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003bbc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003bc0:	fab2 f282 	clz	r2, r2
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	f042 0220 	orr.w	r2, r2, #32
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	f002 021f 	and.w	r2, r2, #31
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ab      	bne.n	8003b34 <HAL_RCC_OscConfig+0x284>
 8003bdc:	e003      	b.n	8003be6 <HAL_RCC_OscConfig+0x336>
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 817d 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bfc:	4ba6      	ldr	r3, [pc, #664]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00b      	beq.n	8003c20 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c08:	4ba3      	ldr	r3, [pc, #652]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d172      	bne.n	8003cfa <HAL_RCC_OscConfig+0x44a>
 8003c14:	4ba0      	ldr	r3, [pc, #640]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d16c      	bne.n	8003cfa <HAL_RCC_OscConfig+0x44a>
 8003c20:	2302      	movs	r3, #2
 8003c22:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003c32:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_RCC_OscConfig+0x3a0>
 8003c4a:	4b93      	ldr	r3, [pc, #588]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	e013      	b.n	8003c78 <HAL_RCC_OscConfig+0x3c8>
 8003c50:	2302      	movs	r3, #2
 8003c52:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003c62:	2302      	movs	r3, #2
 8003c64:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003c68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003c74:	4b88      	ldr	r3, [pc, #544]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003c7e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003c82:	fa92 f2a2 	rbit	r2, r2
 8003c86:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003c8a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003c8e:	fab2 f282 	clz	r2, r2
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	f042 0220 	orr.w	r2, r2, #32
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	f002 021f 	and.w	r2, r2, #31
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x410>
 8003caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d002      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f000 be2e 	b.w	800491c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc0:	4b75      	ldr	r3, [pc, #468]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ccc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	21f8      	movs	r1, #248	; 0xf8
 8003cd6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003cde:	fa91 f1a1 	rbit	r1, r1
 8003ce2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003ce6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003cea:	fab1 f181 	clz	r1, r1
 8003cee:	b2c9      	uxtb	r1, r1
 8003cf0:	408b      	lsls	r3, r1
 8003cf2:	4969      	ldr	r1, [pc, #420]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf8:	e0fd      	b.n	8003ef6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 8088 	beq.w	8003e1c <HAL_RCC_OscConfig+0x56c>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003d1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	461a      	mov	r2, r3
 8003d34:	2301      	movs	r3, #1
 8003d36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe f824 	bl	8001d84 <HAL_GetTick>
 8003d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fe f81f 	bl	8001d84 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d902      	bls.n	8003d58 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	f000 bde2 	b.w	800491c <HAL_RCC_OscConfig+0x106c>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003d6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d102      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4d8>
 8003d82:	4b45      	ldr	r3, [pc, #276]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	e013      	b.n	8003db0 <HAL_RCC_OscConfig+0x500>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003da0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003dac:	4b3a      	ldr	r3, [pc, #232]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	2202      	movs	r2, #2
 8003db2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003db6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003dba:	fa92 f2a2 	rbit	r2, r2
 8003dbe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003dc2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003dc6:	fab2 f282 	clz	r2, r2
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	f042 0220 	orr.w	r2, r2, #32
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	f002 021f 	and.w	r2, r2, #31
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0af      	beq.n	8003d42 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	21f8      	movs	r1, #248	; 0xf8
 8003df8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003e00:	fa91 f1a1 	rbit	r1, r1
 8003e04:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003e08:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003e0c:	fab1 f181 	clz	r1, r1
 8003e10:	b2c9      	uxtb	r1, r1
 8003e12:	408b      	lsls	r3, r1
 8003e14:	4920      	ldr	r1, [pc, #128]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
 8003e1a:	e06c      	b.n	8003ef6 <HAL_RCC_OscConfig+0x646>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003e2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	461a      	mov	r2, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fd ff9c 	bl	8001d84 <HAL_GetTick>
 8003e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fd ff97 	bl	8001d84 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d902      	bls.n	8003e68 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	f000 bd5a 	b.w	800491c <HAL_RCC_OscConfig+0x106c>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7e:	fab3 f383 	clz	r3, r3
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d104      	bne.n	8003e9c <HAL_RCC_OscConfig+0x5ec>
 8003e92:	4b01      	ldr	r3, [pc, #4]	; (8003e98 <HAL_RCC_OscConfig+0x5e8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	e015      	b.n	8003ec4 <HAL_RCC_OscConfig+0x614>
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003eae:	2302      	movs	r3, #2
 8003eb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003eb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003eb8:	fa93 f3a3 	rbit	r3, r3
 8003ebc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ec0:	4bc8      	ldr	r3, [pc, #800]	; (80041e4 <HAL_RCC_OscConfig+0x934>)
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003eca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ece:	fa92 f2a2 	rbit	r2, r2
 8003ed2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ed6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003eda:	fab2 f282 	clz	r2, r2
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	f042 0220 	orr.w	r2, r2, #32
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	f002 021f 	and.w	r2, r2, #31
 8003eea:	2101      	movs	r1, #1
 8003eec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1ad      	bne.n	8003e52 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8110 	beq.w	800412c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d079      	beq.n	8004010 <HAL_RCC_OscConfig+0x760>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f32:	fab3 f383 	clz	r3, r3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4bab      	ldr	r3, [pc, #684]	; (80041e8 <HAL_RCC_OscConfig+0x938>)
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	461a      	mov	r2, r3
 8003f42:	2301      	movs	r3, #1
 8003f44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f46:	f7fd ff1d 	bl	8001d84 <HAL_GetTick>
 8003f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f50:	f7fd ff18 	bl	8001d84 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d902      	bls.n	8003f66 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	f000 bcdb 	b.w	800491c <HAL_RCC_OscConfig+0x106c>
 8003f66:	2302      	movs	r3, #2
 8003f68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f70:	fa93 f3a3 	rbit	r3, r3
 8003f74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f80:	2202      	movs	r2, #2
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	fa93 f2a3 	rbit	r2, r3
 8003f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	fa93 f2a3 	rbit	r2, r3
 8003fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003fbe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc0:	4b88      	ldr	r3, [pc, #544]	; (80041e4 <HAL_RCC_OscConfig+0x934>)
 8003fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fcc:	2102      	movs	r1, #2
 8003fce:	6019      	str	r1, [r3, #0]
 8003fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	fa93 f1a3 	rbit	r1, r3
 8003fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fe6:	6019      	str	r1, [r3, #0]
  return result;
 8003fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2101      	movs	r1, #1
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0a0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x6a0>
 800400e:	e08d      	b.n	800412c <HAL_RCC_OscConfig+0x87c>
 8004010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004014:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004020:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	fa93 f2a3 	rbit	r2, r3
 800402a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004032:	601a      	str	r2, [r3, #0]
  return result;
 8004034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004038:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800403c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	4b68      	ldr	r3, [pc, #416]	; (80041e8 <HAL_RCC_OscConfig+0x938>)
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	461a      	mov	r2, r3
 800404e:	2300      	movs	r3, #0
 8004050:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004052:	f7fd fe97 	bl	8001d84 <HAL_GetTick>
 8004056:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405c:	f7fd fe92 	bl	8001d84 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d902      	bls.n	8004072 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	f000 bc55 	b.w	800491c <HAL_RCC_OscConfig+0x106c>
 8004072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004076:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800407a:	2202      	movs	r2, #2
 800407c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004082:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	fa93 f2a3 	rbit	r2, r3
 800408c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004090:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800409e:	2202      	movs	r2, #2
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fa93 f2a3 	rbit	r2, r3
 80040b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040c2:	2202      	movs	r2, #2
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	fa93 f2a3 	rbit	r2, r3
 80040d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80040dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040de:	4b41      	ldr	r3, [pc, #260]	; (80041e4 <HAL_RCC_OscConfig+0x934>)
 80040e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80040ea:	2102      	movs	r1, #2
 80040ec:	6019      	str	r1, [r3, #0]
 80040ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	fa93 f1a3 	rbit	r1, r3
 80040fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004100:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004104:	6019      	str	r1, [r3, #0]
  return result;
 8004106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f303 	lsl.w	r3, r1, r3
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d197      	bne.n	800405c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004130:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 81a1 	beq.w	8004484 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004142:	2300      	movs	r3, #0
 8004144:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004148:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <HAL_RCC_OscConfig+0x934>)
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d116      	bne.n	8004182 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004154:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <HAL_RCC_OscConfig+0x934>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	4a22      	ldr	r2, [pc, #136]	; (80041e4 <HAL_RCC_OscConfig+0x934>)
 800415a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415e:	61d3      	str	r3, [r2, #28]
 8004160:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <HAL_RCC_OscConfig+0x934>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004176:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800417a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004182:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <HAL_RCC_OscConfig+0x93c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d11a      	bne.n	80041c4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418e:	4b17      	ldr	r3, [pc, #92]	; (80041ec <HAL_RCC_OscConfig+0x93c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a16      	ldr	r2, [pc, #88]	; (80041ec <HAL_RCC_OscConfig+0x93c>)
 8004194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004198:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419a:	f7fd fdf3 	bl	8001d84 <HAL_GetTick>
 800419e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a2:	e009      	b.n	80041b8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a4:	f7fd fdee 	bl	8001d84 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b64      	cmp	r3, #100	; 0x64
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e3b1      	b.n	800491c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <HAL_RCC_OscConfig+0x93c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ef      	beq.n	80041a4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d10d      	bne.n	80041f0 <HAL_RCC_OscConfig+0x940>
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_RCC_OscConfig+0x934>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4a02      	ldr	r2, [pc, #8]	; (80041e4 <HAL_RCC_OscConfig+0x934>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6213      	str	r3, [r2, #32]
 80041e0:	e03c      	b.n	800425c <HAL_RCC_OscConfig+0x9ac>
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000
 80041e8:	10908120 	.word	0x10908120
 80041ec:	40007000 	.word	0x40007000
 80041f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10c      	bne.n	800421a <HAL_RCC_OscConfig+0x96a>
 8004200:	4bc1      	ldr	r3, [pc, #772]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	4ac0      	ldr	r2, [pc, #768]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	6213      	str	r3, [r2, #32]
 800420c:	4bbe      	ldr	r3, [pc, #760]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4abd      	ldr	r2, [pc, #756]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 8004212:	f023 0304 	bic.w	r3, r3, #4
 8004216:	6213      	str	r3, [r2, #32]
 8004218:	e020      	b.n	800425c <HAL_RCC_OscConfig+0x9ac>
 800421a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b05      	cmp	r3, #5
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0x994>
 800422a:	4bb7      	ldr	r3, [pc, #732]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	4ab6      	ldr	r2, [pc, #728]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 8004230:	f043 0304 	orr.w	r3, r3, #4
 8004234:	6213      	str	r3, [r2, #32]
 8004236:	4bb4      	ldr	r3, [pc, #720]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	4ab3      	ldr	r2, [pc, #716]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6213      	str	r3, [r2, #32]
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0x9ac>
 8004244:	4bb0      	ldr	r3, [pc, #704]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	4aaf      	ldr	r2, [pc, #700]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	6213      	str	r3, [r2, #32]
 8004250:	4bad      	ldr	r3, [pc, #692]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4aac      	ldr	r2, [pc, #688]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 8004256:	f023 0304 	bic.w	r3, r3, #4
 800425a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800425c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004260:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8081 	beq.w	8004370 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426e:	f7fd fd89 	bl	8001d84 <HAL_GetTick>
 8004272:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004276:	e00b      	b.n	8004290 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fd fd84 	bl	8001d84 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e345      	b.n	800491c <HAL_RCC_OscConfig+0x106c>
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004298:	2202      	movs	r2, #2
 800429a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	fa93 f2a3 	rbit	r2, r3
 80042aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80042bc:	2202      	movs	r2, #2
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	fa93 f2a3 	rbit	r2, r3
 80042ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042d6:	601a      	str	r2, [r3, #0]
  return result;
 80042d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042dc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d102      	bne.n	80042fc <HAL_RCC_OscConfig+0xa4c>
 80042f6:	4b84      	ldr	r3, [pc, #528]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	e013      	b.n	8004324 <HAL_RCC_OscConfig+0xa74>
 80042fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004300:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004304:	2202      	movs	r2, #2
 8004306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	fa93 f2a3 	rbit	r2, r3
 8004316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	4b79      	ldr	r3, [pc, #484]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004328:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800432c:	2102      	movs	r1, #2
 800432e:	6011      	str	r1, [r2, #0]
 8004330:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004334:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	fa92 f1a2 	rbit	r1, r2
 800433e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004342:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004346:	6011      	str	r1, [r2, #0]
  return result;
 8004348:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800434c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	fab2 f282 	clz	r2, r2
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	f002 021f 	and.w	r2, r2, #31
 8004362:	2101      	movs	r1, #1
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d084      	beq.n	8004278 <HAL_RCC_OscConfig+0x9c8>
 800436e:	e07f      	b.n	8004470 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004370:	f7fd fd08 	bl	8001d84 <HAL_GetTick>
 8004374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004378:	e00b      	b.n	8004392 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fd fd03 	bl	8001d84 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e2c4      	b.n	800491c <HAL_RCC_OscConfig+0x106c>
 8004392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004396:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800439a:	2202      	movs	r2, #2
 800439c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	fa93 f2a3 	rbit	r2, r3
 80043ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80043be:	2202      	movs	r2, #2
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	fa93 f2a3 	rbit	r2, r3
 80043d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80043d8:	601a      	str	r2, [r3, #0]
  return result;
 80043da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043de:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80043e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f043 0302 	orr.w	r3, r3, #2
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d102      	bne.n	80043fe <HAL_RCC_OscConfig+0xb4e>
 80043f8:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	e013      	b.n	8004426 <HAL_RCC_OscConfig+0xb76>
 80043fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004402:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004406:	2202      	movs	r2, #2
 8004408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	fa93 f2a3 	rbit	r2, r3
 8004418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	4b39      	ldr	r3, [pc, #228]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800442a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800442e:	2102      	movs	r1, #2
 8004430:	6011      	str	r1, [r2, #0]
 8004432:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004436:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	fa92 f1a2 	rbit	r1, r2
 8004440:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004444:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004448:	6011      	str	r1, [r2, #0]
  return result;
 800444a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800444e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	fab2 f282 	clz	r2, r2
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	f002 021f 	and.w	r2, r2, #31
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f202 	lsl.w	r2, r1, r2
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d184      	bne.n	800437a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004470:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004478:	4b23      	ldr	r3, [pc, #140]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	4a22      	ldr	r2, [pc, #136]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 800447e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004482:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8242 	beq.w	800491a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <HAL_RCC_OscConfig+0xc58>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b08      	cmp	r3, #8
 80044a0:	f000 8213 	beq.w	80048ca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	f040 8162 	bne.w	800477a <HAL_RCC_OscConfig+0xeca>
 80044b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80044be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	fa93 f2a3 	rbit	r2, r3
 80044d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80044da:	601a      	str	r2, [r3, #0]
  return result;
 80044dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80044e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	fab3 f383 	clz	r3, r3
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	461a      	mov	r2, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fd fc42 	bl	8001d84 <HAL_GetTick>
 8004500:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004504:	e00c      	b.n	8004520 <HAL_RCC_OscConfig+0xc70>
 8004506:	bf00      	nop
 8004508:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd fc3a 	bl	8001d84 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e1fd      	b.n	800491c <HAL_RCC_OscConfig+0x106c>
 8004520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004524:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800452c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004532:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	fa93 f2a3 	rbit	r2, r3
 800453c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004540:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004544:	601a      	str	r2, [r3, #0]
  return result;
 8004546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800454e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d102      	bne.n	800456a <HAL_RCC_OscConfig+0xcba>
 8004564:	4bb0      	ldr	r3, [pc, #704]	; (8004828 <HAL_RCC_OscConfig+0xf78>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	e027      	b.n	80045ba <HAL_RCC_OscConfig+0xd0a>
 800456a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800457c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	fa93 f2a3 	rbit	r2, r3
 8004586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800458a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004594:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	fa93 f2a3 	rbit	r2, r3
 80045ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	4b9c      	ldr	r3, [pc, #624]	; (8004828 <HAL_RCC_OscConfig+0xf78>)
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045be:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80045c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045c6:	6011      	str	r1, [r2, #0]
 80045c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045cc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	fa92 f1a2 	rbit	r1, r2
 80045d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045da:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80045de:	6011      	str	r1, [r2, #0]
  return result;
 80045e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045e4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	fab2 f282 	clz	r2, r2
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	f042 0220 	orr.w	r2, r2, #32
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	f002 021f 	and.w	r2, r2, #31
 80045fa:	2101      	movs	r1, #1
 80045fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d182      	bne.n	800450c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004606:	4b88      	ldr	r3, [pc, #544]	; (8004828 <HAL_RCC_OscConfig+0xf78>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800460e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800461a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	430b      	orrs	r3, r1
 8004628:	497f      	ldr	r1, [pc, #508]	; (8004828 <HAL_RCC_OscConfig+0xf78>)
 800462a:	4313      	orrs	r3, r2
 800462c:	604b      	str	r3, [r1, #4]
 800462e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004632:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004636:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800463a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004640:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	fa93 f2a3 	rbit	r2, r3
 800464a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004652:	601a      	str	r2, [r3, #0]
  return result;
 8004654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004658:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800465c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800465e:	fab3 f383 	clz	r3, r3
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004668:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	461a      	mov	r2, r3
 8004670:	2301      	movs	r3, #1
 8004672:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fd fb86 	bl	8001d84 <HAL_GetTick>
 8004678:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800467c:	e009      	b.n	8004692 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467e:	f7fd fb81 	bl	8001d84 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e144      	b.n	800491c <HAL_RCC_OscConfig+0x106c>
 8004692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004696:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800469a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800469e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	fa93 f2a3 	rbit	r2, r3
 80046ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80046b6:	601a      	str	r2, [r3, #0]
  return result;
 80046b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046bc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80046c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d102      	bne.n	80046dc <HAL_RCC_OscConfig+0xe2c>
 80046d6:	4b54      	ldr	r3, [pc, #336]	; (8004828 <HAL_RCC_OscConfig+0xf78>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	e027      	b.n	800472c <HAL_RCC_OscConfig+0xe7c>
 80046dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80046e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	fa93 f2a3 	rbit	r2, r3
 80046f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004706:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800470a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004714:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	fa93 f2a3 	rbit	r2, r3
 800471e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004722:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	4b3f      	ldr	r3, [pc, #252]	; (8004828 <HAL_RCC_OscConfig+0xf78>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004730:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004734:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004738:	6011      	str	r1, [r2, #0]
 800473a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800473e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	fa92 f1a2 	rbit	r1, r2
 8004748:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800474c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004750:	6011      	str	r1, [r2, #0]
  return result;
 8004752:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004756:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	fab2 f282 	clz	r2, r2
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	f042 0220 	orr.w	r2, r2, #32
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	f002 021f 	and.w	r2, r2, #31
 800476c:	2101      	movs	r1, #1
 800476e:	fa01 f202 	lsl.w	r2, r1, r2
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d082      	beq.n	800467e <HAL_RCC_OscConfig+0xdce>
 8004778:	e0cf      	b.n	800491a <HAL_RCC_OscConfig+0x106a>
 800477a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004782:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	fa93 f2a3 	rbit	r2, r3
 8004796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800479e:	601a      	str	r2, [r3, #0]
  return result;
 80047a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80047a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	461a      	mov	r2, r3
 80047bc:	2300      	movs	r3, #0
 80047be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c0:	f7fd fae0 	bl	8001d84 <HAL_GetTick>
 80047c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c8:	e009      	b.n	80047de <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ca:	f7fd fadb 	bl	8001d84 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e09e      	b.n	800491c <HAL_RCC_OscConfig+0x106c>
 80047de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80047e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	fa93 f2a3 	rbit	r2, r3
 80047fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004802:	601a      	str	r2, [r3, #0]
  return result;
 8004804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004808:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800480c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d104      	bne.n	800482c <HAL_RCC_OscConfig+0xf7c>
 8004822:	4b01      	ldr	r3, [pc, #4]	; (8004828 <HAL_RCC_OscConfig+0xf78>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	e029      	b.n	800487c <HAL_RCC_OscConfig+0xfcc>
 8004828:	40021000 	.word	0x40021000
 800482c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004830:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	fa93 f2a3 	rbit	r2, r3
 8004848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004856:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800485a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004864:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	fa93 f2a3 	rbit	r2, r3
 800486e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004872:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <HAL_RCC_OscConfig+0x1078>)
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004880:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004884:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004888:	6011      	str	r1, [r2, #0]
 800488a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800488e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	fa92 f1a2 	rbit	r1, r2
 8004898:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800489c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80048a0:	6011      	str	r1, [r2, #0]
  return result;
 80048a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	fab2 f282 	clz	r2, r2
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	f042 0220 	orr.w	r2, r2, #32
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	f002 021f 	and.w	r2, r2, #31
 80048bc:	2101      	movs	r1, #1
 80048be:	fa01 f202 	lsl.w	r2, r1, r2
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d180      	bne.n	80047ca <HAL_RCC_OscConfig+0xf1a>
 80048c8:	e027      	b.n	800491a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e01e      	b.n	800491c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <HAL_RCC_OscConfig+0x1078>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048ea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d10b      	bne.n	8004916 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80048fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004902:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004912:	429a      	cmp	r2, r3
 8004914:	d001      	beq.n	800491a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000

0800492c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b09e      	sub	sp, #120	; 0x78
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e162      	b.n	8004c0a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004944:	4b90      	ldr	r3, [pc, #576]	; (8004b88 <HAL_RCC_ClockConfig+0x25c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d910      	bls.n	8004974 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b8d      	ldr	r3, [pc, #564]	; (8004b88 <HAL_RCC_ClockConfig+0x25c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 0207 	bic.w	r2, r3, #7
 800495a:	498b      	ldr	r1, [pc, #556]	; (8004b88 <HAL_RCC_ClockConfig+0x25c>)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	4313      	orrs	r3, r2
 8004960:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b89      	ldr	r3, [pc, #548]	; (8004b88 <HAL_RCC_ClockConfig+0x25c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e14a      	b.n	8004c0a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004980:	4b82      	ldr	r3, [pc, #520]	; (8004b8c <HAL_RCC_ClockConfig+0x260>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	497f      	ldr	r1, [pc, #508]	; (8004b8c <HAL_RCC_ClockConfig+0x260>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80dc 	beq.w	8004b58 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d13c      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xf6>
 80049a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80049b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b8:	fab3 f383 	clz	r3, r3
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d102      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xa6>
 80049cc:	4b6f      	ldr	r3, [pc, #444]	; (8004b8c <HAL_RCC_ClockConfig+0x260>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	e00f      	b.n	80049f2 <HAL_RCC_ClockConfig+0xc6>
 80049d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	667b      	str	r3, [r7, #100]	; 0x64
 80049e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049e4:	663b      	str	r3, [r7, #96]	; 0x60
 80049e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049e8:	fa93 f3a3 	rbit	r3, r3
 80049ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ee:	4b67      	ldr	r3, [pc, #412]	; (8004b8c <HAL_RCC_ClockConfig+0x260>)
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80049f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049fa:	fa92 f2a2 	rbit	r2, r2
 80049fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004a00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a02:	fab2 f282 	clz	r2, r2
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	f042 0220 	orr.w	r2, r2, #32
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	f002 021f 	and.w	r2, r2, #31
 8004a12:	2101      	movs	r1, #1
 8004a14:	fa01 f202 	lsl.w	r2, r1, r2
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d17b      	bne.n	8004b16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e0f3      	b.n	8004c0a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d13c      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x178>
 8004a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a32:	fa93 f3a3 	rbit	r3, r3
 8004a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d102      	bne.n	8004a54 <HAL_RCC_ClockConfig+0x128>
 8004a4e:	4b4f      	ldr	r3, [pc, #316]	; (8004b8c <HAL_RCC_ClockConfig+0x260>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	e00f      	b.n	8004a74 <HAL_RCC_ClockConfig+0x148>
 8004a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5c:	fa93 f3a3 	rbit	r3, r3
 8004a60:	647b      	str	r3, [r7, #68]	; 0x44
 8004a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a66:	643b      	str	r3, [r7, #64]	; 0x40
 8004a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6a:	fa93 f3a3 	rbit	r3, r3
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a70:	4b46      	ldr	r3, [pc, #280]	; (8004b8c <HAL_RCC_ClockConfig+0x260>)
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a78:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a7c:	fa92 f2a2 	rbit	r2, r2
 8004a80:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a84:	fab2 f282 	clz	r2, r2
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	f042 0220 	orr.w	r2, r2, #32
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	f002 021f 	and.w	r2, r2, #31
 8004a94:	2101      	movs	r1, #1
 8004a96:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d13a      	bne.n	8004b16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0b2      	b.n	8004c0a <HAL_RCC_ClockConfig+0x2de>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	fa93 f3a3 	rbit	r3, r3
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d102      	bne.n	8004acc <HAL_RCC_ClockConfig+0x1a0>
 8004ac6:	4b31      	ldr	r3, [pc, #196]	; (8004b8c <HAL_RCC_ClockConfig+0x260>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	e00d      	b.n	8004ae8 <HAL_RCC_ClockConfig+0x1bc>
 8004acc:	2302      	movs	r3, #2
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad8:	2302      	movs	r3, #2
 8004ada:	623b      	str	r3, [r7, #32]
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	fa93 f3a3 	rbit	r3, r3
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <HAL_RCC_ClockConfig+0x260>)
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	2202      	movs	r2, #2
 8004aea:	61ba      	str	r2, [r7, #24]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	fa92 f2a2 	rbit	r2, r2
 8004af2:	617a      	str	r2, [r7, #20]
  return result;
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	fab2 f282 	clz	r2, r2
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	f042 0220 	orr.w	r2, r2, #32
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	f002 021f 	and.w	r2, r2, #31
 8004b06:	2101      	movs	r1, #1
 8004b08:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e079      	b.n	8004c0a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b16:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <HAL_RCC_ClockConfig+0x260>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f023 0203 	bic.w	r2, r3, #3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	491a      	ldr	r1, [pc, #104]	; (8004b8c <HAL_RCC_ClockConfig+0x260>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b28:	f7fd f92c 	bl	8001d84 <HAL_GetTick>
 8004b2c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2e:	e00a      	b.n	8004b46 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b30:	f7fd f928 	bl	8001d84 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e061      	b.n	8004c0a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b46:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <HAL_RCC_ClockConfig+0x260>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 020c 	and.w	r2, r3, #12
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d1eb      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_RCC_ClockConfig+0x25c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d214      	bcs.n	8004b90 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b66:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <HAL_RCC_ClockConfig+0x25c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 0207 	bic.w	r2, r3, #7
 8004b6e:	4906      	ldr	r1, [pc, #24]	; (8004b88 <HAL_RCC_ClockConfig+0x25c>)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <HAL_RCC_ClockConfig+0x25c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e040      	b.n	8004c0a <HAL_RCC_ClockConfig+0x2de>
 8004b88:	40022000 	.word	0x40022000
 8004b8c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <HAL_RCC_ClockConfig+0x2e8>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	491a      	ldr	r1, [pc, #104]	; (8004c14 <HAL_RCC_ClockConfig+0x2e8>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bba:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <HAL_RCC_ClockConfig+0x2e8>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4912      	ldr	r1, [pc, #72]	; (8004c14 <HAL_RCC_ClockConfig+0x2e8>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004bce:	f000 f829 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <HAL_RCC_ClockConfig+0x2e8>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bdc:	22f0      	movs	r2, #240	; 0xf0
 8004bde:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	fa92 f2a2 	rbit	r2, r2
 8004be6:	60fa      	str	r2, [r7, #12]
  return result;
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	fab2 f282 	clz	r2, r2
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	40d3      	lsrs	r3, r2
 8004bf2:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <HAL_RCC_ClockConfig+0x2ec>)
 8004bf4:	5cd3      	ldrb	r3, [r2, r3]
 8004bf6:	fa21 f303 	lsr.w	r3, r1, r3
 8004bfa:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <HAL_RCC_ClockConfig+0x2f0>)
 8004bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004bfe:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <HAL_RCC_ClockConfig+0x2f4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd f87a 	bl	8001cfc <HAL_InitTick>
  
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3778      	adds	r7, #120	; 0x78
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
 8004c18:	080075e0 	.word	0x080075e0
 8004c1c:	20000058 	.word	0x20000058
 8004c20:	2000005c 	.word	0x2000005c

08004c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b08b      	sub	sp, #44	; 0x2c
 8004c28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	2300      	movs	r3, #0
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004c3e:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 030c 	and.w	r3, r3, #12
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d002      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x30>
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d003      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x36>
 8004c52:	e03c      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c54:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c56:	623b      	str	r3, [r7, #32]
      break;
 8004c58:	e03c      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c60:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004c64:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	fa92 f2a2 	rbit	r2, r2
 8004c6c:	607a      	str	r2, [r7, #4]
  return result;
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	fab2 f282 	clz	r2, r2
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	40d3      	lsrs	r3, r2
 8004c78:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c7a:	5cd3      	ldrb	r3, [r2, r3]
 8004c7c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c7e:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	220f      	movs	r2, #15
 8004c88:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	fa92 f2a2 	rbit	r2, r2
 8004c90:	60fa      	str	r2, [r7, #12]
  return result;
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	fab2 f282 	clz	r2, r2
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	40d3      	lsrs	r3, r2
 8004c9c:	4a14      	ldr	r2, [pc, #80]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ca0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cac:	4a0e      	ldr	r2, [pc, #56]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbc:	e004      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	623b      	str	r3, [r7, #32]
      break;
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004cd0:	623b      	str	r3, [r7, #32]
      break;
 8004cd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	372c      	adds	r7, #44	; 0x2c
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	007a1200 	.word	0x007a1200
 8004cec:	080075f8 	.word	0x080075f8
 8004cf0:	08007608 	.word	0x08007608
 8004cf4:	003d0900 	.word	0x003d0900

08004cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000058 	.word	0x20000058

08004d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004d16:	f7ff ffef 	bl	8004cf8 <HAL_RCC_GetHCLKFreq>
 8004d1a:	4601      	mov	r1, r0
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d24:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004d28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	fa92 f2a2 	rbit	r2, r2
 8004d30:	603a      	str	r2, [r7, #0]
  return result;
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	fab2 f282 	clz	r2, r2
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	40d3      	lsrs	r3, r2
 8004d3c:	4a04      	ldr	r2, [pc, #16]	; (8004d50 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d3e:	5cd3      	ldrb	r3, [r2, r3]
 8004d40:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	080075f0 	.word	0x080075f0

08004d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d5a:	f7ff ffcd 	bl	8004cf8 <HAL_RCC_GetHCLKFreq>
 8004d5e:	4601      	mov	r1, r0
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004d68:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004d6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	fa92 f2a2 	rbit	r2, r2
 8004d74:	603a      	str	r2, [r7, #0]
  return result;
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	fab2 f282 	clz	r2, r2
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	40d3      	lsrs	r3, r2
 8004d80:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d82:	5cd3      	ldrb	r3, [r2, r3]
 8004d84:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40021000 	.word	0x40021000
 8004d94:	080075f0 	.word	0x080075f0

08004d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b092      	sub	sp, #72	; 0x48
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004da8:	2300      	movs	r3, #0
 8004daa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80cd 	beq.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dbc:	4b86      	ldr	r3, [pc, #536]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10e      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc8:	4b83      	ldr	r3, [pc, #524]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	4a82      	ldr	r2, [pc, #520]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	61d3      	str	r3, [r2, #28]
 8004dd4:	4b80      	ldr	r3, [pc, #512]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de6:	4b7d      	ldr	r3, [pc, #500]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d118      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004df2:	4b7a      	ldr	r3, [pc, #488]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a79      	ldr	r2, [pc, #484]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dfe:	f7fc ffc1 	bl	8001d84 <HAL_GetTick>
 8004e02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e04:	e008      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e06:	f7fc ffbd 	bl	8001d84 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b64      	cmp	r3, #100	; 0x64
 8004e12:	d901      	bls.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0db      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	4b70      	ldr	r3, [pc, #448]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e24:	4b6c      	ldr	r3, [pc, #432]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d07d      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d076      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e42:	4b65      	ldr	r3, [pc, #404]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e50:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	fa93 f3a3 	rbit	r3, r3
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e5c:	fab3 f383 	clz	r3, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	4b5e      	ldr	r3, [pc, #376]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	fa93 f3a3 	rbit	r3, r3
 8004e7c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e80:	fab3 f383 	clz	r3, r3
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	4b55      	ldr	r3, [pc, #340]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2300      	movs	r3, #0
 8004e92:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e94:	4a50      	ldr	r2, [pc, #320]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e98:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d045      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fc ff6e 	bl	8001d84 <HAL_GetTick>
 8004ea8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eac:	f7fc ff6a 	bl	8001d84 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e086      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	fa93 f3a3 	rbit	r3, r3
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ece:	2302      	movs	r3, #2
 8004ed0:	623b      	str	r3, [r7, #32]
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	fa93 f3a3 	rbit	r3, r3
 8004ed8:	61fb      	str	r3, [r7, #28]
  return result;
 8004eda:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004edc:	fab3 f383 	clz	r3, r3
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f043 0302 	orr.w	r3, r3, #2
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d102      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ef0:	4b39      	ldr	r3, [pc, #228]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	e007      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	fa93 f3a3 	rbit	r3, r3
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	4b35      	ldr	r3, [pc, #212]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	2202      	movs	r2, #2
 8004f08:	613a      	str	r2, [r7, #16]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	fa92 f2a2 	rbit	r2, r2
 8004f10:	60fa      	str	r2, [r7, #12]
  return result;
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	fab2 f282 	clz	r2, r2
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	f002 021f 	and.w	r2, r2, #31
 8004f24:	2101      	movs	r1, #1
 8004f26:	fa01 f202 	lsl.w	r2, r1, r2
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0bd      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004f30:	4b29      	ldr	r3, [pc, #164]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	4926      	ldr	r1, [pc, #152]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d105      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4a:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	4a22      	ldr	r2, [pc, #136]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f54:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f62:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	f023 0203 	bic.w	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	491a      	ldr	r1, [pc, #104]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f80:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	f023 0210 	bic.w	r2, r3, #16
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4912      	ldr	r1, [pc, #72]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d008      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	490b      	ldr	r1, [pc, #44]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	4903      	ldr	r1, [pc, #12]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3748      	adds	r7, #72	; 0x48
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40007000 	.word	0x40007000
 8004fe0:	10908100 	.word	0x10908100

08004fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e049      	b.n	800508a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fc fcf2 	bl	80019f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f000 fd62 	bl	8005aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d001      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e040      	b.n	800512e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1c      	ldr	r2, [pc, #112]	; (800513c <HAL_TIM_Base_Start_IT+0xa8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00e      	beq.n	80050ec <HAL_TIM_Base_Start_IT+0x58>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d6:	d009      	beq.n	80050ec <HAL_TIM_Base_Start_IT+0x58>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_TIM_Base_Start_IT+0xac>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_TIM_Base_Start_IT+0x58>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a17      	ldr	r2, [pc, #92]	; (8005144 <HAL_TIM_Base_Start_IT+0xb0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d115      	bne.n	8005118 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <HAL_TIM_Base_Start_IT+0xb4>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b06      	cmp	r3, #6
 80050fc:	d015      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x96>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005104:	d011      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005116:	e008      	b.n	800512a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e000      	b.n	800512c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40000400 	.word	0x40000400
 8005144:	40014000 	.word	0x40014000
 8005148:	00010007 	.word	0x00010007

0800514c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f841 	bl	80051fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 fcae 	bl	8005aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e097      	b.n	8005352 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fc fc16 	bl	8001a68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005252:	f023 0307 	bic.w	r3, r3, #7
 8005256:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3304      	adds	r3, #4
 8005260:	4619      	mov	r1, r3
 8005262:	4610      	mov	r0, r2
 8005264:	f000 fc42 	bl	8005aec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005290:	f023 0303 	bic.w	r3, r3, #3
 8005294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	4313      	orrs	r3, r2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052ae:	f023 030c 	bic.w	r3, r3, #12
 80052b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	021b      	lsls	r3, r3, #8
 80052ca:	4313      	orrs	r3, r2
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	011a      	lsls	r2, r3, #4
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	031b      	lsls	r3, r3, #12
 80052de:	4313      	orrs	r3, r2
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052ec:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80052f4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	4313      	orrs	r3, r2
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800536a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005372:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800537a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005382:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d110      	bne.n	80053ac <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d102      	bne.n	8005396 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005390:	7b7b      	ldrb	r3, [r7, #13]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d001      	beq.n	800539a <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e089      	b.n	80054ae <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053aa:	e031      	b.n	8005410 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d110      	bne.n	80053d4 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053b2:	7bbb      	ldrb	r3, [r7, #14]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d102      	bne.n	80053be <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053b8:	7b3b      	ldrb	r3, [r7, #12]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d001      	beq.n	80053c2 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e075      	b.n	80054ae <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053d2:	e01d      	b.n	8005410 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d108      	bne.n	80053ec <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053da:	7bbb      	ldrb	r3, [r7, #14]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d105      	bne.n	80053ec <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053e0:	7b7b      	ldrb	r3, [r7, #13]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d102      	bne.n	80053ec <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053e6:	7b3b      	ldrb	r3, [r7, #12]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d001      	beq.n	80053f0 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e05e      	b.n	80054ae <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_Encoder_Start_IT+0xc4>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b04      	cmp	r3, #4
 800541a:	d010      	beq.n	800543e <HAL_TIM_Encoder_Start_IT+0xe4>
 800541c:	e01f      	b.n	800545e <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2201      	movs	r2, #1
 8005424:	2100      	movs	r1, #0
 8005426:	4618      	mov	r0, r3
 8005428:	f000 ff18 	bl	800625c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0202 	orr.w	r2, r2, #2
 800543a:	60da      	str	r2, [r3, #12]
      break;
 800543c:	e02e      	b.n	800549c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2201      	movs	r2, #1
 8005444:	2104      	movs	r1, #4
 8005446:	4618      	mov	r0, r3
 8005448:	f000 ff08 	bl	800625c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0204 	orr.w	r2, r2, #4
 800545a:	60da      	str	r2, [r3, #12]
      break;
 800545c:	e01e      	b.n	800549c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2201      	movs	r2, #1
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fef8 	bl	800625c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2201      	movs	r2, #1
 8005472:	2104      	movs	r1, #4
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fef1 	bl	800625c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0202 	orr.w	r2, r2, #2
 8005488:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0204 	orr.w	r2, r2, #4
 8005498:	60da      	str	r2, [r3, #12]
      break;
 800549a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d122      	bne.n	8005512 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d11b      	bne.n	8005512 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f06f 0202 	mvn.w	r2, #2
 80054e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7fb fbb5 	bl	8000c68 <HAL_TIM_IC_CaptureCallback>
 80054fe:	e005      	b.n	800550c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fad4 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fadb 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b04      	cmp	r3, #4
 800551e:	d122      	bne.n	8005566 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b04      	cmp	r3, #4
 800552c:	d11b      	bne.n	8005566 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0204 	mvn.w	r2, #4
 8005536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fb fb8b 	bl	8000c68 <HAL_TIM_IC_CaptureCallback>
 8005552:	e005      	b.n	8005560 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 faaa 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fab1 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b08      	cmp	r3, #8
 8005572:	d122      	bne.n	80055ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b08      	cmp	r3, #8
 8005580:	d11b      	bne.n	80055ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f06f 0208 	mvn.w	r2, #8
 800558a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2204      	movs	r2, #4
 8005590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fb fb61 	bl	8000c68 <HAL_TIM_IC_CaptureCallback>
 80055a6:	e005      	b.n	80055b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fa80 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa87 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d122      	bne.n	800560e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b10      	cmp	r3, #16
 80055d4:	d11b      	bne.n	800560e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f06f 0210 	mvn.w	r2, #16
 80055de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2208      	movs	r2, #8
 80055e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7fb fb37 	bl	8000c68 <HAL_TIM_IC_CaptureCallback>
 80055fa:	e005      	b.n	8005608 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fa56 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa5d 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d10e      	bne.n	800563a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b01      	cmp	r3, #1
 8005628:	d107      	bne.n	800563a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f06f 0201 	mvn.w	r2, #1
 8005632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7fb fb01 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005644:	2b80      	cmp	r3, #128	; 0x80
 8005646:	d10e      	bne.n	8005666 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	d107      	bne.n	8005666 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800565e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 ff11 	bl	8006488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005674:	d10e      	bne.n	8005694 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005680:	2b80      	cmp	r3, #128	; 0x80
 8005682:	d107      	bne.n	8005694 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 ff04 	bl	800649c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d10e      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d107      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa0b 	bl	8005ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d10e      	bne.n	80056ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d107      	bne.n	80056ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0220 	mvn.w	r2, #32
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fec4 	bl	8006474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800570e:	2302      	movs	r3, #2
 8005710:	e0ff      	b.n	8005912 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b14      	cmp	r3, #20
 800571e:	f200 80f0 	bhi.w	8005902 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	0800577d 	.word	0x0800577d
 800572c:	08005903 	.word	0x08005903
 8005730:	08005903 	.word	0x08005903
 8005734:	08005903 	.word	0x08005903
 8005738:	080057bd 	.word	0x080057bd
 800573c:	08005903 	.word	0x08005903
 8005740:	08005903 	.word	0x08005903
 8005744:	08005903 	.word	0x08005903
 8005748:	080057ff 	.word	0x080057ff
 800574c:	08005903 	.word	0x08005903
 8005750:	08005903 	.word	0x08005903
 8005754:	08005903 	.word	0x08005903
 8005758:	0800583f 	.word	0x0800583f
 800575c:	08005903 	.word	0x08005903
 8005760:	08005903 	.word	0x08005903
 8005764:	08005903 	.word	0x08005903
 8005768:	08005881 	.word	0x08005881
 800576c:	08005903 	.word	0x08005903
 8005770:	08005903 	.word	0x08005903
 8005774:	08005903 	.word	0x08005903
 8005778:	080058c1 	.word	0x080058c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fa2a 	bl	8005bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0208 	orr.w	r2, r2, #8
 8005796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0204 	bic.w	r2, r2, #4
 80057a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6999      	ldr	r1, [r3, #24]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	619a      	str	r2, [r3, #24]
      break;
 80057ba:	e0a5      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fa90 	bl	8005ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6999      	ldr	r1, [r3, #24]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	021a      	lsls	r2, r3, #8
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	619a      	str	r2, [r3, #24]
      break;
 80057fc:	e084      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 faef 	bl	8005de8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0208 	orr.w	r2, r2, #8
 8005818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69da      	ldr	r2, [r3, #28]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0204 	bic.w	r2, r2, #4
 8005828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69d9      	ldr	r1, [r3, #28]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	61da      	str	r2, [r3, #28]
      break;
 800583c:	e064      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fb4d 	bl	8005ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69da      	ldr	r2, [r3, #28]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69d9      	ldr	r1, [r3, #28]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	021a      	lsls	r2, r3, #8
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	61da      	str	r2, [r3, #28]
      break;
 800587e:	e043      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fb90 	bl	8005fac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0208 	orr.w	r2, r2, #8
 800589a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0204 	bic.w	r2, r2, #4
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	691a      	ldr	r2, [r3, #16]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058be:	e023      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fbce 	bl	8006068 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	021a      	lsls	r2, r3, #8
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005900:	e002      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	75fb      	strb	r3, [r7, #23]
      break;
 8005906:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005910:	7dfb      	ldrb	r3, [r7, #23]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop

0800591c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIM_ConfigClockSource+0x1c>
 8005934:	2302      	movs	r3, #2
 8005936:	e0b6      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x18a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800595a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005974:	d03e      	beq.n	80059f4 <HAL_TIM_ConfigClockSource+0xd8>
 8005976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597a:	f200 8087 	bhi.w	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005982:	f000 8086 	beq.w	8005a92 <HAL_TIM_ConfigClockSource+0x176>
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	d87f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 800598c:	2b70      	cmp	r3, #112	; 0x70
 800598e:	d01a      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0xaa>
 8005990:	2b70      	cmp	r3, #112	; 0x70
 8005992:	d87b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 8005994:	2b60      	cmp	r3, #96	; 0x60
 8005996:	d050      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x11e>
 8005998:	2b60      	cmp	r3, #96	; 0x60
 800599a:	d877      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 800599c:	2b50      	cmp	r3, #80	; 0x50
 800599e:	d03c      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0xfe>
 80059a0:	2b50      	cmp	r3, #80	; 0x50
 80059a2:	d873      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d058      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x13e>
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d86f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 80059ac:	2b30      	cmp	r3, #48	; 0x30
 80059ae:	d064      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15e>
 80059b0:	2b30      	cmp	r3, #48	; 0x30
 80059b2:	d86b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d060      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15e>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d867      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d05c      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15e>
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d05a      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15e>
 80059c4:	e062      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6899      	ldr	r1, [r3, #8]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f000 fc21 	bl	800621c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	609a      	str	r2, [r3, #8]
      break;
 80059f2:	e04f      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	6899      	ldr	r1, [r3, #8]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f000 fc0a 	bl	800621c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a16:	609a      	str	r2, [r3, #8]
      break;
 8005a18:	e03c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6859      	ldr	r1, [r3, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f000 fb7e 	bl	8006128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2150      	movs	r1, #80	; 0x50
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fbd7 	bl	80061e6 <TIM_ITRx_SetConfig>
      break;
 8005a38:	e02c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6859      	ldr	r1, [r3, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f000 fb9d 	bl	8006186 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2160      	movs	r1, #96	; 0x60
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fbc7 	bl	80061e6 <TIM_ITRx_SetConfig>
      break;
 8005a58:	e01c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6859      	ldr	r1, [r3, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f000 fb5e 	bl	8006128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2140      	movs	r1, #64	; 0x40
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fbb7 	bl	80061e6 <TIM_ITRx_SetConfig>
      break;
 8005a78:	e00c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f000 fbae 	bl	80061e6 <TIM_ITRx_SetConfig>
      break;
 8005a8a:	e003      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a90:	e000      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a32      	ldr	r2, [pc, #200]	; (8005bc8 <TIM_Base_SetConfig+0xdc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d007      	beq.n	8005b14 <TIM_Base_SetConfig+0x28>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0a:	d003      	beq.n	8005b14 <TIM_Base_SetConfig+0x28>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a2f      	ldr	r2, [pc, #188]	; (8005bcc <TIM_Base_SetConfig+0xe0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d108      	bne.n	8005b26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a27      	ldr	r2, [pc, #156]	; (8005bc8 <TIM_Base_SetConfig+0xdc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <TIM_Base_SetConfig+0x6a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b34:	d00f      	beq.n	8005b56 <TIM_Base_SetConfig+0x6a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a24      	ldr	r2, [pc, #144]	; (8005bcc <TIM_Base_SetConfig+0xe0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <TIM_Base_SetConfig+0x6a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a23      	ldr	r2, [pc, #140]	; (8005bd0 <TIM_Base_SetConfig+0xe4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <TIM_Base_SetConfig+0x6a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <TIM_Base_SetConfig+0xe8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_Base_SetConfig+0x6a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <TIM_Base_SetConfig+0xec>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d108      	bne.n	8005b68 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a0e      	ldr	r2, [pc, #56]	; (8005bc8 <TIM_Base_SetConfig+0xdc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00b      	beq.n	8005bac <TIM_Base_SetConfig+0xc0>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a0e      	ldr	r2, [pc, #56]	; (8005bd0 <TIM_Base_SetConfig+0xe4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d007      	beq.n	8005bac <TIM_Base_SetConfig+0xc0>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a0d      	ldr	r2, [pc, #52]	; (8005bd4 <TIM_Base_SetConfig+0xe8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_Base_SetConfig+0xc0>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a0c      	ldr	r2, [pc, #48]	; (8005bd8 <TIM_Base_SetConfig+0xec>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d103      	bne.n	8005bb4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	615a      	str	r2, [r3, #20]
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40014400 	.word	0x40014400
 8005bd8:	40014800 	.word	0x40014800

08005bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0303 	bic.w	r3, r3, #3
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f023 0302 	bic.w	r3, r3, #2
 8005c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <TIM_OC1_SetConfig+0xfc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_OC1_SetConfig+0x78>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a27      	ldr	r2, [pc, #156]	; (8005cdc <TIM_OC1_SetConfig+0x100>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_OC1_SetConfig+0x78>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a26      	ldr	r2, [pc, #152]	; (8005ce0 <TIM_OC1_SetConfig+0x104>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_OC1_SetConfig+0x78>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a25      	ldr	r2, [pc, #148]	; (8005ce4 <TIM_OC1_SetConfig+0x108>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d10c      	bne.n	8005c6e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0308 	bic.w	r3, r3, #8
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 0304 	bic.w	r3, r3, #4
 8005c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a19      	ldr	r2, [pc, #100]	; (8005cd8 <TIM_OC1_SetConfig+0xfc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00b      	beq.n	8005c8e <TIM_OC1_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <TIM_OC1_SetConfig+0x100>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d007      	beq.n	8005c8e <TIM_OC1_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a17      	ldr	r2, [pc, #92]	; (8005ce0 <TIM_OC1_SetConfig+0x104>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_OC1_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <TIM_OC1_SetConfig+0x108>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d111      	bne.n	8005cb2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	621a      	str	r2, [r3, #32]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40012c00 	.word	0x40012c00
 8005cdc:	40014000 	.word	0x40014000
 8005ce0:	40014400 	.word	0x40014400
 8005ce4:	40014800 	.word	0x40014800

08005ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0210 	bic.w	r2, r3, #16
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0320 	bic.w	r3, r3, #32
 8005d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a24      	ldr	r2, [pc, #144]	; (8005dd8 <TIM_OC2_SetConfig+0xf0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10d      	bne.n	8005d68 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <TIM_OC2_SetConfig+0xf0>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00b      	beq.n	8005d88 <TIM_OC2_SetConfig+0xa0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1a      	ldr	r2, [pc, #104]	; (8005ddc <TIM_OC2_SetConfig+0xf4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d007      	beq.n	8005d88 <TIM_OC2_SetConfig+0xa0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a19      	ldr	r2, [pc, #100]	; (8005de0 <TIM_OC2_SetConfig+0xf8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC2_SetConfig+0xa0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <TIM_OC2_SetConfig+0xfc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d113      	bne.n	8005db0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d8e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d96:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40012c00 	.word	0x40012c00
 8005ddc:	40014000 	.word	0x40014000
 8005de0:	40014400 	.word	0x40014400
 8005de4:	40014800 	.word	0x40014800

08005de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a23      	ldr	r2, [pc, #140]	; (8005ed4 <TIM_OC3_SetConfig+0xec>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d10d      	bne.n	8005e66 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e64:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1a      	ldr	r2, [pc, #104]	; (8005ed4 <TIM_OC3_SetConfig+0xec>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00b      	beq.n	8005e86 <TIM_OC3_SetConfig+0x9e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a19      	ldr	r2, [pc, #100]	; (8005ed8 <TIM_OC3_SetConfig+0xf0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d007      	beq.n	8005e86 <TIM_OC3_SetConfig+0x9e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a18      	ldr	r2, [pc, #96]	; (8005edc <TIM_OC3_SetConfig+0xf4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d003      	beq.n	8005e86 <TIM_OC3_SetConfig+0x9e>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a17      	ldr	r2, [pc, #92]	; (8005ee0 <TIM_OC3_SetConfig+0xf8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d113      	bne.n	8005eae <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	40012c00 	.word	0x40012c00
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40014400 	.word	0x40014400
 8005ee0:	40014800 	.word	0x40014800

08005ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	031b      	lsls	r3, r3, #12
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <TIM_OC4_SetConfig+0xb8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00b      	beq.n	8005f60 <TIM_OC4_SetConfig+0x7c>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <TIM_OC4_SetConfig+0xbc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d007      	beq.n	8005f60 <TIM_OC4_SetConfig+0x7c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <TIM_OC4_SetConfig+0xc0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_OC4_SetConfig+0x7c>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <TIM_OC4_SetConfig+0xc4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d109      	bne.n	8005f74 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	019b      	lsls	r3, r3, #6
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40014800 	.word	0x40014800

08005fac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ff0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	041b      	lsls	r3, r3, #16
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a15      	ldr	r2, [pc, #84]	; (8006058 <TIM_OC5_SetConfig+0xac>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00b      	beq.n	800601e <TIM_OC5_SetConfig+0x72>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a14      	ldr	r2, [pc, #80]	; (800605c <TIM_OC5_SetConfig+0xb0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d007      	beq.n	800601e <TIM_OC5_SetConfig+0x72>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a13      	ldr	r2, [pc, #76]	; (8006060 <TIM_OC5_SetConfig+0xb4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d003      	beq.n	800601e <TIM_OC5_SetConfig+0x72>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a12      	ldr	r2, [pc, #72]	; (8006064 <TIM_OC5_SetConfig+0xb8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d109      	bne.n	8006032 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006024:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	621a      	str	r2, [r3, #32]
}
 800604c:	bf00      	nop
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	40012c00 	.word	0x40012c00
 800605c:	40014000 	.word	0x40014000
 8006060:	40014400 	.word	0x40014400
 8006064:	40014800 	.word	0x40014800

08006068 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	051b      	lsls	r3, r3, #20
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a16      	ldr	r2, [pc, #88]	; (8006118 <TIM_OC6_SetConfig+0xb0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00b      	beq.n	80060dc <TIM_OC6_SetConfig+0x74>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <TIM_OC6_SetConfig+0xb4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d007      	beq.n	80060dc <TIM_OC6_SetConfig+0x74>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a14      	ldr	r2, [pc, #80]	; (8006120 <TIM_OC6_SetConfig+0xb8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_OC6_SetConfig+0x74>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a13      	ldr	r2, [pc, #76]	; (8006124 <TIM_OC6_SetConfig+0xbc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d109      	bne.n	80060f0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	029b      	lsls	r3, r3, #10
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800

08006128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f023 0201 	bic.w	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f023 030a 	bic.w	r3, r3, #10
 8006164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	621a      	str	r2, [r3, #32]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006186:	b480      	push	{r7}
 8006188:	b087      	sub	sp, #28
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	f023 0210 	bic.w	r2, r3, #16
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	031b      	lsls	r3, r3, #12
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	f043 0307 	orr.w	r3, r3, #7
 8006208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	609a      	str	r2, [r3, #8]
}
 8006210:	bf00      	nop
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006236:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	021a      	lsls	r2, r3, #8
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	431a      	orrs	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4313      	orrs	r3, r2
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	609a      	str	r2, [r3, #8]
}
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	2201      	movs	r2, #1
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1a      	ldr	r2, [r3, #32]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	43db      	mvns	r3, r3
 800627e:	401a      	ands	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	fa01 f303 	lsl.w	r3, r1, r3
 8006294:	431a      	orrs	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062bc:	2302      	movs	r3, #2
 80062be:	e054      	b.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a24      	ldr	r2, [pc, #144]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d108      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a17      	ldr	r2, [pc, #92]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00e      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006328:	d009      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a13      	ldr	r2, [pc, #76]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a11      	ldr	r2, [pc, #68]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10c      	bne.n	8006358 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4313      	orrs	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40000400 	.word	0x40000400
 8006380:	40014000 	.word	0x40014000

08006384 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800639c:	2302      	movs	r3, #2
 800639e:	e060      	b.n	8006462 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	041b      	lsls	r3, r3, #16
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a14      	ldr	r2, [pc, #80]	; (8006470 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d115      	bne.n	8006450 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	051b      	lsls	r3, r3, #20
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40012c00 	.word	0x40012c00

08006474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e040      	b.n	8006544 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fb fb8e 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2224      	movs	r2, #36	; 0x24
 80064dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0201 	bic.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f82c 	bl	800654c <UART_SetConfig>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e022      	b.n	8006544 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f956 	bl	80067b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800651a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800652a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f9dd 	bl	80068fc <UART_CheckIdleState>
 8006542:	4603      	mov	r3, r0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b8a      	ldr	r3, [pc, #552]	; (80067a0 <UART_SetConfig+0x254>)
 8006578:	4013      	ands	r3, r2
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	6979      	ldr	r1, [r7, #20]
 8006580:	430b      	orrs	r3, r1
 8006582:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a78      	ldr	r2, [pc, #480]	; (80067a4 <UART_SetConfig+0x258>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d120      	bne.n	800660a <UART_SetConfig+0xbe>
 80065c8:	4b77      	ldr	r3, [pc, #476]	; (80067a8 <UART_SetConfig+0x25c>)
 80065ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065cc:	f003 0303 	and.w	r3, r3, #3
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	d817      	bhi.n	8006604 <UART_SetConfig+0xb8>
 80065d4:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <UART_SetConfig+0x90>)
 80065d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065da:	bf00      	nop
 80065dc:	080065ed 	.word	0x080065ed
 80065e0:	080065f9 	.word	0x080065f9
 80065e4:	080065ff 	.word	0x080065ff
 80065e8:	080065f3 	.word	0x080065f3
 80065ec:	2300      	movs	r3, #0
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e01d      	b.n	800662e <UART_SetConfig+0xe2>
 80065f2:	2302      	movs	r3, #2
 80065f4:	77fb      	strb	r3, [r7, #31]
 80065f6:	e01a      	b.n	800662e <UART_SetConfig+0xe2>
 80065f8:	2304      	movs	r3, #4
 80065fa:	77fb      	strb	r3, [r7, #31]
 80065fc:	e017      	b.n	800662e <UART_SetConfig+0xe2>
 80065fe:	2308      	movs	r3, #8
 8006600:	77fb      	strb	r3, [r7, #31]
 8006602:	e014      	b.n	800662e <UART_SetConfig+0xe2>
 8006604:	2310      	movs	r3, #16
 8006606:	77fb      	strb	r3, [r7, #31]
 8006608:	e011      	b.n	800662e <UART_SetConfig+0xe2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a67      	ldr	r2, [pc, #412]	; (80067ac <UART_SetConfig+0x260>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d102      	bne.n	800661a <UART_SetConfig+0xce>
 8006614:	2300      	movs	r3, #0
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e009      	b.n	800662e <UART_SetConfig+0xe2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a64      	ldr	r2, [pc, #400]	; (80067b0 <UART_SetConfig+0x264>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d102      	bne.n	800662a <UART_SetConfig+0xde>
 8006624:	2300      	movs	r3, #0
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e001      	b.n	800662e <UART_SetConfig+0xe2>
 800662a:	2310      	movs	r3, #16
 800662c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006636:	d15a      	bne.n	80066ee <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006638:	7ffb      	ldrb	r3, [r7, #31]
 800663a:	2b08      	cmp	r3, #8
 800663c:	d827      	bhi.n	800668e <UART_SetConfig+0x142>
 800663e:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0xf8>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	08006669 	.word	0x08006669
 8006648:	08006671 	.word	0x08006671
 800664c:	08006679 	.word	0x08006679
 8006650:	0800668f 	.word	0x0800668f
 8006654:	0800667f 	.word	0x0800667f
 8006658:	0800668f 	.word	0x0800668f
 800665c:	0800668f 	.word	0x0800668f
 8006660:	0800668f 	.word	0x0800668f
 8006664:	08006687 	.word	0x08006687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006668:	f7fe fb52 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 800666c:	61b8      	str	r0, [r7, #24]
        break;
 800666e:	e013      	b.n	8006698 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006670:	f7fe fb70 	bl	8004d54 <HAL_RCC_GetPCLK2Freq>
 8006674:	61b8      	str	r0, [r7, #24]
        break;
 8006676:	e00f      	b.n	8006698 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006678:	4b4e      	ldr	r3, [pc, #312]	; (80067b4 <UART_SetConfig+0x268>)
 800667a:	61bb      	str	r3, [r7, #24]
        break;
 800667c:	e00c      	b.n	8006698 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667e:	f7fe fad1 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8006682:	61b8      	str	r0, [r7, #24]
        break;
 8006684:	e008      	b.n	8006698 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800668a:	61bb      	str	r3, [r7, #24]
        break;
 800668c:	e004      	b.n	8006698 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	77bb      	strb	r3, [r7, #30]
        break;
 8006696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d074      	beq.n	8006788 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	005a      	lsls	r2, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	441a      	add	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b0f      	cmp	r3, #15
 80066b8:	d916      	bls.n	80066e8 <UART_SetConfig+0x19c>
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c0:	d212      	bcs.n	80066e8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f023 030f 	bic.w	r3, r3, #15
 80066ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	89fb      	ldrh	r3, [r7, #14]
 80066da:	4313      	orrs	r3, r2
 80066dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	89fa      	ldrh	r2, [r7, #14]
 80066e4:	60da      	str	r2, [r3, #12]
 80066e6:	e04f      	b.n	8006788 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	77bb      	strb	r3, [r7, #30]
 80066ec:	e04c      	b.n	8006788 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066ee:	7ffb      	ldrb	r3, [r7, #31]
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d828      	bhi.n	8006746 <UART_SetConfig+0x1fa>
 80066f4:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <UART_SetConfig+0x1b0>)
 80066f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fa:	bf00      	nop
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006729 	.word	0x08006729
 8006704:	08006731 	.word	0x08006731
 8006708:	08006747 	.word	0x08006747
 800670c:	08006737 	.word	0x08006737
 8006710:	08006747 	.word	0x08006747
 8006714:	08006747 	.word	0x08006747
 8006718:	08006747 	.word	0x08006747
 800671c:	0800673f 	.word	0x0800673f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006720:	f7fe faf6 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8006724:	61b8      	str	r0, [r7, #24]
        break;
 8006726:	e013      	b.n	8006750 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006728:	f7fe fb14 	bl	8004d54 <HAL_RCC_GetPCLK2Freq>
 800672c:	61b8      	str	r0, [r7, #24]
        break;
 800672e:	e00f      	b.n	8006750 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006730:	4b20      	ldr	r3, [pc, #128]	; (80067b4 <UART_SetConfig+0x268>)
 8006732:	61bb      	str	r3, [r7, #24]
        break;
 8006734:	e00c      	b.n	8006750 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006736:	f7fe fa75 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 800673a:	61b8      	str	r0, [r7, #24]
        break;
 800673c:	e008      	b.n	8006750 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800673e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006742:	61bb      	str	r3, [r7, #24]
        break;
 8006744:	e004      	b.n	8006750 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	77bb      	strb	r3, [r7, #30]
        break;
 800674e:	bf00      	nop
    }

    if (pclk != 0U)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d018      	beq.n	8006788 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	085a      	lsrs	r2, r3, #1
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	441a      	add	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	fbb2 f3f3 	udiv	r3, r2, r3
 8006768:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b0f      	cmp	r3, #15
 800676e:	d909      	bls.n	8006784 <UART_SetConfig+0x238>
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006776:	d205      	bcs.n	8006784 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60da      	str	r2, [r3, #12]
 8006782:	e001      	b.n	8006788 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006794:	7fbb      	ldrb	r3, [r7, #30]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	efff69f3 	.word	0xefff69f3
 80067a4:	40013800 	.word	0x40013800
 80067a8:	40021000 	.word	0x40021000
 80067ac:	40004400 	.word	0x40004400
 80067b0:	40004800 	.word	0x40004800
 80067b4:	007a1200 	.word	0x007a1200

080067b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01a      	beq.n	80068ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b6:	d10a      	bne.n	80068ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	605a      	str	r2, [r3, #4]
  }
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b098      	sub	sp, #96	; 0x60
 8006900:	af02      	add	r7, sp, #8
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800690c:	f7fb fa3a 	bl	8001d84 <HAL_GetTick>
 8006910:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b08      	cmp	r3, #8
 800691e:	d12e      	bne.n	800697e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006928:	2200      	movs	r2, #0
 800692a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f88c 	bl	8006a4c <UART_WaitOnFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d021      	beq.n	800697e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800694e:	653b      	str	r3, [r7, #80]	; 0x50
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006958:	647b      	str	r3, [r7, #68]	; 0x44
 800695a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800695e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e6      	bne.n	800693a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e062      	b.n	8006a44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b04      	cmp	r3, #4
 800698a:	d149      	bne.n	8006a20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800698c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006994:	2200      	movs	r2, #0
 8006996:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f856 	bl	8006a4c <UART_WaitOnFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d03c      	beq.n	8006a20 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	623b      	str	r3, [r7, #32]
   return(result);
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c4:	633b      	str	r3, [r7, #48]	; 0x30
 80069c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069cc:	e841 2300 	strex	r3, r2, [r1]
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e6      	bne.n	80069a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3308      	adds	r3, #8
 80069de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	e853 3f00 	ldrex	r3, [r3]
 80069e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0301 	bic.w	r3, r3, #1
 80069ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069f8:	61fa      	str	r2, [r7, #28]
 80069fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	69b9      	ldr	r1, [r7, #24]
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	e841 2300 	strex	r3, r2, [r1]
 8006a04:	617b      	str	r3, [r7, #20]
   return(result);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e5      	bne.n	80069d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e011      	b.n	8006a44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3758      	adds	r7, #88	; 0x58
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5c:	e049      	b.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a64:	d045      	beq.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a66:	f7fb f98d 	bl	8001d84 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e048      	b.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0304 	and.w	r3, r3, #4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d031      	beq.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d110      	bne.n	8006abe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f838 	bl	8006b1a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2208      	movs	r2, #8
 8006aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e029      	b.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006acc:	d111      	bne.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f81e 	bl	8006b1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e00f      	b.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4013      	ands	r3, r2
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	bf0c      	ite	eq
 8006b02:	2301      	moveq	r3, #1
 8006b04:	2300      	movne	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	79fb      	ldrb	r3, [r7, #7]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d0a6      	beq.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b095      	sub	sp, #84	; 0x54
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b40:	643b      	str	r3, [r7, #64]	; 0x40
 8006b42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e6      	bne.n	8006b22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3308      	adds	r3, #8
 8006b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e5      	bne.n	8006b54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d118      	bne.n	8006bc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f023 0310 	bic.w	r3, r3, #16
 8006ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6979      	ldr	r1, [r7, #20]
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	613b      	str	r3, [r7, #16]
   return(result);
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e6      	bne.n	8006b90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006bd6:	bf00      	nop
 8006bd8:	3754      	adds	r7, #84	; 0x54
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <__errno>:
 8006be4:	4b01      	ldr	r3, [pc, #4]	; (8006bec <__errno+0x8>)
 8006be6:	6818      	ldr	r0, [r3, #0]
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000064 	.word	0x20000064

08006bf0 <__libc_init_array>:
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	4d0d      	ldr	r5, [pc, #52]	; (8006c28 <__libc_init_array+0x38>)
 8006bf4:	4c0d      	ldr	r4, [pc, #52]	; (8006c2c <__libc_init_array+0x3c>)
 8006bf6:	1b64      	subs	r4, r4, r5
 8006bf8:	10a4      	asrs	r4, r4, #2
 8006bfa:	2600      	movs	r6, #0
 8006bfc:	42a6      	cmp	r6, r4
 8006bfe:	d109      	bne.n	8006c14 <__libc_init_array+0x24>
 8006c00:	4d0b      	ldr	r5, [pc, #44]	; (8006c30 <__libc_init_array+0x40>)
 8006c02:	4c0c      	ldr	r4, [pc, #48]	; (8006c34 <__libc_init_array+0x44>)
 8006c04:	f000 fc8e 	bl	8007524 <_init>
 8006c08:	1b64      	subs	r4, r4, r5
 8006c0a:	10a4      	asrs	r4, r4, #2
 8006c0c:	2600      	movs	r6, #0
 8006c0e:	42a6      	cmp	r6, r4
 8006c10:	d105      	bne.n	8006c1e <__libc_init_array+0x2e>
 8006c12:	bd70      	pop	{r4, r5, r6, pc}
 8006c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c18:	4798      	blx	r3
 8006c1a:	3601      	adds	r6, #1
 8006c1c:	e7ee      	b.n	8006bfc <__libc_init_array+0xc>
 8006c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c22:	4798      	blx	r3
 8006c24:	3601      	adds	r6, #1
 8006c26:	e7f2      	b.n	8006c0e <__libc_init_array+0x1e>
 8006c28:	0800764c 	.word	0x0800764c
 8006c2c:	0800764c 	.word	0x0800764c
 8006c30:	0800764c 	.word	0x0800764c
 8006c34:	08007650 	.word	0x08007650

08006c38 <memset>:
 8006c38:	4402      	add	r2, r0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d100      	bne.n	8006c42 <memset+0xa>
 8006c40:	4770      	bx	lr
 8006c42:	f803 1b01 	strb.w	r1, [r3], #1
 8006c46:	e7f9      	b.n	8006c3c <memset+0x4>

08006c48 <siprintf>:
 8006c48:	b40e      	push	{r1, r2, r3}
 8006c4a:	b500      	push	{lr}
 8006c4c:	b09c      	sub	sp, #112	; 0x70
 8006c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c50:	9002      	str	r0, [sp, #8]
 8006c52:	9006      	str	r0, [sp, #24]
 8006c54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c58:	4809      	ldr	r0, [pc, #36]	; (8006c80 <siprintf+0x38>)
 8006c5a:	9107      	str	r1, [sp, #28]
 8006c5c:	9104      	str	r1, [sp, #16]
 8006c5e:	4909      	ldr	r1, [pc, #36]	; (8006c84 <siprintf+0x3c>)
 8006c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c64:	9105      	str	r1, [sp, #20]
 8006c66:	6800      	ldr	r0, [r0, #0]
 8006c68:	9301      	str	r3, [sp, #4]
 8006c6a:	a902      	add	r1, sp, #8
 8006c6c:	f000 f868 	bl	8006d40 <_svfiprintf_r>
 8006c70:	9b02      	ldr	r3, [sp, #8]
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	b01c      	add	sp, #112	; 0x70
 8006c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c7c:	b003      	add	sp, #12
 8006c7e:	4770      	bx	lr
 8006c80:	20000064 	.word	0x20000064
 8006c84:	ffff0208 	.word	0xffff0208

08006c88 <__ssputs_r>:
 8006c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c8c:	688e      	ldr	r6, [r1, #8]
 8006c8e:	429e      	cmp	r6, r3
 8006c90:	4682      	mov	sl, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	4690      	mov	r8, r2
 8006c96:	461f      	mov	r7, r3
 8006c98:	d838      	bhi.n	8006d0c <__ssputs_r+0x84>
 8006c9a:	898a      	ldrh	r2, [r1, #12]
 8006c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ca0:	d032      	beq.n	8006d08 <__ssputs_r+0x80>
 8006ca2:	6825      	ldr	r5, [r4, #0]
 8006ca4:	6909      	ldr	r1, [r1, #16]
 8006ca6:	eba5 0901 	sub.w	r9, r5, r1
 8006caa:	6965      	ldr	r5, [r4, #20]
 8006cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	444b      	add	r3, r9
 8006cb8:	106d      	asrs	r5, r5, #1
 8006cba:	429d      	cmp	r5, r3
 8006cbc:	bf38      	it	cc
 8006cbe:	461d      	movcc	r5, r3
 8006cc0:	0553      	lsls	r3, r2, #21
 8006cc2:	d531      	bpl.n	8006d28 <__ssputs_r+0xa0>
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	f000 fb63 	bl	8007390 <_malloc_r>
 8006cca:	4606      	mov	r6, r0
 8006ccc:	b950      	cbnz	r0, 8006ce4 <__ssputs_r+0x5c>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	f8ca 3000 	str.w	r3, [sl]
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cda:	81a3      	strh	r3, [r4, #12]
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce4:	6921      	ldr	r1, [r4, #16]
 8006ce6:	464a      	mov	r2, r9
 8006ce8:	f000 fabe 	bl	8007268 <memcpy>
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf6:	81a3      	strh	r3, [r4, #12]
 8006cf8:	6126      	str	r6, [r4, #16]
 8006cfa:	6165      	str	r5, [r4, #20]
 8006cfc:	444e      	add	r6, r9
 8006cfe:	eba5 0509 	sub.w	r5, r5, r9
 8006d02:	6026      	str	r6, [r4, #0]
 8006d04:	60a5      	str	r5, [r4, #8]
 8006d06:	463e      	mov	r6, r7
 8006d08:	42be      	cmp	r6, r7
 8006d0a:	d900      	bls.n	8006d0e <__ssputs_r+0x86>
 8006d0c:	463e      	mov	r6, r7
 8006d0e:	6820      	ldr	r0, [r4, #0]
 8006d10:	4632      	mov	r2, r6
 8006d12:	4641      	mov	r1, r8
 8006d14:	f000 fab6 	bl	8007284 <memmove>
 8006d18:	68a3      	ldr	r3, [r4, #8]
 8006d1a:	1b9b      	subs	r3, r3, r6
 8006d1c:	60a3      	str	r3, [r4, #8]
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	4433      	add	r3, r6
 8006d22:	6023      	str	r3, [r4, #0]
 8006d24:	2000      	movs	r0, #0
 8006d26:	e7db      	b.n	8006ce0 <__ssputs_r+0x58>
 8006d28:	462a      	mov	r2, r5
 8006d2a:	f000 fba5 	bl	8007478 <_realloc_r>
 8006d2e:	4606      	mov	r6, r0
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d1e1      	bne.n	8006cf8 <__ssputs_r+0x70>
 8006d34:	6921      	ldr	r1, [r4, #16]
 8006d36:	4650      	mov	r0, sl
 8006d38:	f000 fabe 	bl	80072b8 <_free_r>
 8006d3c:	e7c7      	b.n	8006cce <__ssputs_r+0x46>
	...

08006d40 <_svfiprintf_r>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	4698      	mov	r8, r3
 8006d46:	898b      	ldrh	r3, [r1, #12]
 8006d48:	061b      	lsls	r3, r3, #24
 8006d4a:	b09d      	sub	sp, #116	; 0x74
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	460d      	mov	r5, r1
 8006d50:	4614      	mov	r4, r2
 8006d52:	d50e      	bpl.n	8006d72 <_svfiprintf_r+0x32>
 8006d54:	690b      	ldr	r3, [r1, #16]
 8006d56:	b963      	cbnz	r3, 8006d72 <_svfiprintf_r+0x32>
 8006d58:	2140      	movs	r1, #64	; 0x40
 8006d5a:	f000 fb19 	bl	8007390 <_malloc_r>
 8006d5e:	6028      	str	r0, [r5, #0]
 8006d60:	6128      	str	r0, [r5, #16]
 8006d62:	b920      	cbnz	r0, 8006d6e <_svfiprintf_r+0x2e>
 8006d64:	230c      	movs	r3, #12
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d6c:	e0d1      	b.n	8006f12 <_svfiprintf_r+0x1d2>
 8006d6e:	2340      	movs	r3, #64	; 0x40
 8006d70:	616b      	str	r3, [r5, #20]
 8006d72:	2300      	movs	r3, #0
 8006d74:	9309      	str	r3, [sp, #36]	; 0x24
 8006d76:	2320      	movs	r3, #32
 8006d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d80:	2330      	movs	r3, #48	; 0x30
 8006d82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f2c <_svfiprintf_r+0x1ec>
 8006d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d8a:	f04f 0901 	mov.w	r9, #1
 8006d8e:	4623      	mov	r3, r4
 8006d90:	469a      	mov	sl, r3
 8006d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d96:	b10a      	cbz	r2, 8006d9c <_svfiprintf_r+0x5c>
 8006d98:	2a25      	cmp	r2, #37	; 0x25
 8006d9a:	d1f9      	bne.n	8006d90 <_svfiprintf_r+0x50>
 8006d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8006da0:	d00b      	beq.n	8006dba <_svfiprintf_r+0x7a>
 8006da2:	465b      	mov	r3, fp
 8006da4:	4622      	mov	r2, r4
 8006da6:	4629      	mov	r1, r5
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7ff ff6d 	bl	8006c88 <__ssputs_r>
 8006dae:	3001      	adds	r0, #1
 8006db0:	f000 80aa 	beq.w	8006f08 <_svfiprintf_r+0x1c8>
 8006db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006db6:	445a      	add	r2, fp
 8006db8:	9209      	str	r2, [sp, #36]	; 0x24
 8006dba:	f89a 3000 	ldrb.w	r3, [sl]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80a2 	beq.w	8006f08 <_svfiprintf_r+0x1c8>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dce:	f10a 0a01 	add.w	sl, sl, #1
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	9307      	str	r3, [sp, #28]
 8006dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dda:	931a      	str	r3, [sp, #104]	; 0x68
 8006ddc:	4654      	mov	r4, sl
 8006dde:	2205      	movs	r2, #5
 8006de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de4:	4851      	ldr	r0, [pc, #324]	; (8006f2c <_svfiprintf_r+0x1ec>)
 8006de6:	f7f9 f9f3 	bl	80001d0 <memchr>
 8006dea:	9a04      	ldr	r2, [sp, #16]
 8006dec:	b9d8      	cbnz	r0, 8006e26 <_svfiprintf_r+0xe6>
 8006dee:	06d0      	lsls	r0, r2, #27
 8006df0:	bf44      	itt	mi
 8006df2:	2320      	movmi	r3, #32
 8006df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df8:	0711      	lsls	r1, r2, #28
 8006dfa:	bf44      	itt	mi
 8006dfc:	232b      	movmi	r3, #43	; 0x2b
 8006dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e02:	f89a 3000 	ldrb.w	r3, [sl]
 8006e06:	2b2a      	cmp	r3, #42	; 0x2a
 8006e08:	d015      	beq.n	8006e36 <_svfiprintf_r+0xf6>
 8006e0a:	9a07      	ldr	r2, [sp, #28]
 8006e0c:	4654      	mov	r4, sl
 8006e0e:	2000      	movs	r0, #0
 8006e10:	f04f 0c0a 	mov.w	ip, #10
 8006e14:	4621      	mov	r1, r4
 8006e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e1a:	3b30      	subs	r3, #48	; 0x30
 8006e1c:	2b09      	cmp	r3, #9
 8006e1e:	d94e      	bls.n	8006ebe <_svfiprintf_r+0x17e>
 8006e20:	b1b0      	cbz	r0, 8006e50 <_svfiprintf_r+0x110>
 8006e22:	9207      	str	r2, [sp, #28]
 8006e24:	e014      	b.n	8006e50 <_svfiprintf_r+0x110>
 8006e26:	eba0 0308 	sub.w	r3, r0, r8
 8006e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	9304      	str	r3, [sp, #16]
 8006e32:	46a2      	mov	sl, r4
 8006e34:	e7d2      	b.n	8006ddc <_svfiprintf_r+0x9c>
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	1d19      	adds	r1, r3, #4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	9103      	str	r1, [sp, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bfbb      	ittet	lt
 8006e42:	425b      	neglt	r3, r3
 8006e44:	f042 0202 	orrlt.w	r2, r2, #2
 8006e48:	9307      	strge	r3, [sp, #28]
 8006e4a:	9307      	strlt	r3, [sp, #28]
 8006e4c:	bfb8      	it	lt
 8006e4e:	9204      	strlt	r2, [sp, #16]
 8006e50:	7823      	ldrb	r3, [r4, #0]
 8006e52:	2b2e      	cmp	r3, #46	; 0x2e
 8006e54:	d10c      	bne.n	8006e70 <_svfiprintf_r+0x130>
 8006e56:	7863      	ldrb	r3, [r4, #1]
 8006e58:	2b2a      	cmp	r3, #42	; 0x2a
 8006e5a:	d135      	bne.n	8006ec8 <_svfiprintf_r+0x188>
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	1d1a      	adds	r2, r3, #4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	9203      	str	r2, [sp, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bfb8      	it	lt
 8006e68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e6c:	3402      	adds	r4, #2
 8006e6e:	9305      	str	r3, [sp, #20]
 8006e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f3c <_svfiprintf_r+0x1fc>
 8006e74:	7821      	ldrb	r1, [r4, #0]
 8006e76:	2203      	movs	r2, #3
 8006e78:	4650      	mov	r0, sl
 8006e7a:	f7f9 f9a9 	bl	80001d0 <memchr>
 8006e7e:	b140      	cbz	r0, 8006e92 <_svfiprintf_r+0x152>
 8006e80:	2340      	movs	r3, #64	; 0x40
 8006e82:	eba0 000a 	sub.w	r0, r0, sl
 8006e86:	fa03 f000 	lsl.w	r0, r3, r0
 8006e8a:	9b04      	ldr	r3, [sp, #16]
 8006e8c:	4303      	orrs	r3, r0
 8006e8e:	3401      	adds	r4, #1
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e96:	4826      	ldr	r0, [pc, #152]	; (8006f30 <_svfiprintf_r+0x1f0>)
 8006e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e9c:	2206      	movs	r2, #6
 8006e9e:	f7f9 f997 	bl	80001d0 <memchr>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d038      	beq.n	8006f18 <_svfiprintf_r+0x1d8>
 8006ea6:	4b23      	ldr	r3, [pc, #140]	; (8006f34 <_svfiprintf_r+0x1f4>)
 8006ea8:	bb1b      	cbnz	r3, 8006ef2 <_svfiprintf_r+0x1b2>
 8006eaa:	9b03      	ldr	r3, [sp, #12]
 8006eac:	3307      	adds	r3, #7
 8006eae:	f023 0307 	bic.w	r3, r3, #7
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	9303      	str	r3, [sp, #12]
 8006eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb8:	4433      	add	r3, r6
 8006eba:	9309      	str	r3, [sp, #36]	; 0x24
 8006ebc:	e767      	b.n	8006d8e <_svfiprintf_r+0x4e>
 8006ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	e7a5      	b.n	8006e14 <_svfiprintf_r+0xd4>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	3401      	adds	r4, #1
 8006ecc:	9305      	str	r3, [sp, #20]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	f04f 0c0a 	mov.w	ip, #10
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eda:	3a30      	subs	r2, #48	; 0x30
 8006edc:	2a09      	cmp	r2, #9
 8006ede:	d903      	bls.n	8006ee8 <_svfiprintf_r+0x1a8>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0c5      	beq.n	8006e70 <_svfiprintf_r+0x130>
 8006ee4:	9105      	str	r1, [sp, #20]
 8006ee6:	e7c3      	b.n	8006e70 <_svfiprintf_r+0x130>
 8006ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eec:	4604      	mov	r4, r0
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e7f0      	b.n	8006ed4 <_svfiprintf_r+0x194>
 8006ef2:	ab03      	add	r3, sp, #12
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	462a      	mov	r2, r5
 8006ef8:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <_svfiprintf_r+0x1f8>)
 8006efa:	a904      	add	r1, sp, #16
 8006efc:	4638      	mov	r0, r7
 8006efe:	f3af 8000 	nop.w
 8006f02:	1c42      	adds	r2, r0, #1
 8006f04:	4606      	mov	r6, r0
 8006f06:	d1d6      	bne.n	8006eb6 <_svfiprintf_r+0x176>
 8006f08:	89ab      	ldrh	r3, [r5, #12]
 8006f0a:	065b      	lsls	r3, r3, #25
 8006f0c:	f53f af2c 	bmi.w	8006d68 <_svfiprintf_r+0x28>
 8006f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f12:	b01d      	add	sp, #116	; 0x74
 8006f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f18:	ab03      	add	r3, sp, #12
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	462a      	mov	r2, r5
 8006f1e:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <_svfiprintf_r+0x1f8>)
 8006f20:	a904      	add	r1, sp, #16
 8006f22:	4638      	mov	r0, r7
 8006f24:	f000 f87a 	bl	800701c <_printf_i>
 8006f28:	e7eb      	b.n	8006f02 <_svfiprintf_r+0x1c2>
 8006f2a:	bf00      	nop
 8006f2c:	08007618 	.word	0x08007618
 8006f30:	08007622 	.word	0x08007622
 8006f34:	00000000 	.word	0x00000000
 8006f38:	08006c89 	.word	0x08006c89
 8006f3c:	0800761e 	.word	0x0800761e

08006f40 <_printf_common>:
 8006f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	4616      	mov	r6, r2
 8006f46:	4699      	mov	r9, r3
 8006f48:	688a      	ldr	r2, [r1, #8]
 8006f4a:	690b      	ldr	r3, [r1, #16]
 8006f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f50:	4293      	cmp	r3, r2
 8006f52:	bfb8      	it	lt
 8006f54:	4613      	movlt	r3, r2
 8006f56:	6033      	str	r3, [r6, #0]
 8006f58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	b10a      	cbz	r2, 8006f66 <_printf_common+0x26>
 8006f62:	3301      	adds	r3, #1
 8006f64:	6033      	str	r3, [r6, #0]
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	0699      	lsls	r1, r3, #26
 8006f6a:	bf42      	ittt	mi
 8006f6c:	6833      	ldrmi	r3, [r6, #0]
 8006f6e:	3302      	addmi	r3, #2
 8006f70:	6033      	strmi	r3, [r6, #0]
 8006f72:	6825      	ldr	r5, [r4, #0]
 8006f74:	f015 0506 	ands.w	r5, r5, #6
 8006f78:	d106      	bne.n	8006f88 <_printf_common+0x48>
 8006f7a:	f104 0a19 	add.w	sl, r4, #25
 8006f7e:	68e3      	ldr	r3, [r4, #12]
 8006f80:	6832      	ldr	r2, [r6, #0]
 8006f82:	1a9b      	subs	r3, r3, r2
 8006f84:	42ab      	cmp	r3, r5
 8006f86:	dc26      	bgt.n	8006fd6 <_printf_common+0x96>
 8006f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f8c:	1e13      	subs	r3, r2, #0
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	bf18      	it	ne
 8006f92:	2301      	movne	r3, #1
 8006f94:	0692      	lsls	r2, r2, #26
 8006f96:	d42b      	bmi.n	8006ff0 <_printf_common+0xb0>
 8006f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	47c0      	blx	r8
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d01e      	beq.n	8006fe4 <_printf_common+0xa4>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	68e5      	ldr	r5, [r4, #12]
 8006faa:	6832      	ldr	r2, [r6, #0]
 8006fac:	f003 0306 	and.w	r3, r3, #6
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	bf08      	it	eq
 8006fb4:	1aad      	subeq	r5, r5, r2
 8006fb6:	68a3      	ldr	r3, [r4, #8]
 8006fb8:	6922      	ldr	r2, [r4, #16]
 8006fba:	bf0c      	ite	eq
 8006fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fc0:	2500      	movne	r5, #0
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	bfc4      	itt	gt
 8006fc6:	1a9b      	subgt	r3, r3, r2
 8006fc8:	18ed      	addgt	r5, r5, r3
 8006fca:	2600      	movs	r6, #0
 8006fcc:	341a      	adds	r4, #26
 8006fce:	42b5      	cmp	r5, r6
 8006fd0:	d11a      	bne.n	8007008 <_printf_common+0xc8>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e008      	b.n	8006fe8 <_printf_common+0xa8>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4652      	mov	r2, sl
 8006fda:	4649      	mov	r1, r9
 8006fdc:	4638      	mov	r0, r7
 8006fde:	47c0      	blx	r8
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d103      	bne.n	8006fec <_printf_common+0xac>
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fec:	3501      	adds	r5, #1
 8006fee:	e7c6      	b.n	8006f7e <_printf_common+0x3e>
 8006ff0:	18e1      	adds	r1, r4, r3
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	2030      	movs	r0, #48	; 0x30
 8006ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ffa:	4422      	add	r2, r4
 8006ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007004:	3302      	adds	r3, #2
 8007006:	e7c7      	b.n	8006f98 <_printf_common+0x58>
 8007008:	2301      	movs	r3, #1
 800700a:	4622      	mov	r2, r4
 800700c:	4649      	mov	r1, r9
 800700e:	4638      	mov	r0, r7
 8007010:	47c0      	blx	r8
 8007012:	3001      	adds	r0, #1
 8007014:	d0e6      	beq.n	8006fe4 <_printf_common+0xa4>
 8007016:	3601      	adds	r6, #1
 8007018:	e7d9      	b.n	8006fce <_printf_common+0x8e>
	...

0800701c <_printf_i>:
 800701c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007020:	7e0f      	ldrb	r7, [r1, #24]
 8007022:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007024:	2f78      	cmp	r7, #120	; 0x78
 8007026:	4691      	mov	r9, r2
 8007028:	4680      	mov	r8, r0
 800702a:	460c      	mov	r4, r1
 800702c:	469a      	mov	sl, r3
 800702e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007032:	d807      	bhi.n	8007044 <_printf_i+0x28>
 8007034:	2f62      	cmp	r7, #98	; 0x62
 8007036:	d80a      	bhi.n	800704e <_printf_i+0x32>
 8007038:	2f00      	cmp	r7, #0
 800703a:	f000 80d8 	beq.w	80071ee <_printf_i+0x1d2>
 800703e:	2f58      	cmp	r7, #88	; 0x58
 8007040:	f000 80a3 	beq.w	800718a <_printf_i+0x16e>
 8007044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800704c:	e03a      	b.n	80070c4 <_printf_i+0xa8>
 800704e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007052:	2b15      	cmp	r3, #21
 8007054:	d8f6      	bhi.n	8007044 <_printf_i+0x28>
 8007056:	a101      	add	r1, pc, #4	; (adr r1, 800705c <_printf_i+0x40>)
 8007058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800705c:	080070b5 	.word	0x080070b5
 8007060:	080070c9 	.word	0x080070c9
 8007064:	08007045 	.word	0x08007045
 8007068:	08007045 	.word	0x08007045
 800706c:	08007045 	.word	0x08007045
 8007070:	08007045 	.word	0x08007045
 8007074:	080070c9 	.word	0x080070c9
 8007078:	08007045 	.word	0x08007045
 800707c:	08007045 	.word	0x08007045
 8007080:	08007045 	.word	0x08007045
 8007084:	08007045 	.word	0x08007045
 8007088:	080071d5 	.word	0x080071d5
 800708c:	080070f9 	.word	0x080070f9
 8007090:	080071b7 	.word	0x080071b7
 8007094:	08007045 	.word	0x08007045
 8007098:	08007045 	.word	0x08007045
 800709c:	080071f7 	.word	0x080071f7
 80070a0:	08007045 	.word	0x08007045
 80070a4:	080070f9 	.word	0x080070f9
 80070a8:	08007045 	.word	0x08007045
 80070ac:	08007045 	.word	0x08007045
 80070b0:	080071bf 	.word	0x080071bf
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	1d1a      	adds	r2, r3, #4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	602a      	str	r2, [r5, #0]
 80070bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070c4:	2301      	movs	r3, #1
 80070c6:	e0a3      	b.n	8007210 <_printf_i+0x1f4>
 80070c8:	6820      	ldr	r0, [r4, #0]
 80070ca:	6829      	ldr	r1, [r5, #0]
 80070cc:	0606      	lsls	r6, r0, #24
 80070ce:	f101 0304 	add.w	r3, r1, #4
 80070d2:	d50a      	bpl.n	80070ea <_printf_i+0xce>
 80070d4:	680e      	ldr	r6, [r1, #0]
 80070d6:	602b      	str	r3, [r5, #0]
 80070d8:	2e00      	cmp	r6, #0
 80070da:	da03      	bge.n	80070e4 <_printf_i+0xc8>
 80070dc:	232d      	movs	r3, #45	; 0x2d
 80070de:	4276      	negs	r6, r6
 80070e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070e4:	485e      	ldr	r0, [pc, #376]	; (8007260 <_printf_i+0x244>)
 80070e6:	230a      	movs	r3, #10
 80070e8:	e019      	b.n	800711e <_printf_i+0x102>
 80070ea:	680e      	ldr	r6, [r1, #0]
 80070ec:	602b      	str	r3, [r5, #0]
 80070ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070f2:	bf18      	it	ne
 80070f4:	b236      	sxthne	r6, r6
 80070f6:	e7ef      	b.n	80070d8 <_printf_i+0xbc>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	6820      	ldr	r0, [r4, #0]
 80070fc:	1d19      	adds	r1, r3, #4
 80070fe:	6029      	str	r1, [r5, #0]
 8007100:	0601      	lsls	r1, r0, #24
 8007102:	d501      	bpl.n	8007108 <_printf_i+0xec>
 8007104:	681e      	ldr	r6, [r3, #0]
 8007106:	e002      	b.n	800710e <_printf_i+0xf2>
 8007108:	0646      	lsls	r6, r0, #25
 800710a:	d5fb      	bpl.n	8007104 <_printf_i+0xe8>
 800710c:	881e      	ldrh	r6, [r3, #0]
 800710e:	4854      	ldr	r0, [pc, #336]	; (8007260 <_printf_i+0x244>)
 8007110:	2f6f      	cmp	r7, #111	; 0x6f
 8007112:	bf0c      	ite	eq
 8007114:	2308      	moveq	r3, #8
 8007116:	230a      	movne	r3, #10
 8007118:	2100      	movs	r1, #0
 800711a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800711e:	6865      	ldr	r5, [r4, #4]
 8007120:	60a5      	str	r5, [r4, #8]
 8007122:	2d00      	cmp	r5, #0
 8007124:	bfa2      	ittt	ge
 8007126:	6821      	ldrge	r1, [r4, #0]
 8007128:	f021 0104 	bicge.w	r1, r1, #4
 800712c:	6021      	strge	r1, [r4, #0]
 800712e:	b90e      	cbnz	r6, 8007134 <_printf_i+0x118>
 8007130:	2d00      	cmp	r5, #0
 8007132:	d04d      	beq.n	80071d0 <_printf_i+0x1b4>
 8007134:	4615      	mov	r5, r2
 8007136:	fbb6 f1f3 	udiv	r1, r6, r3
 800713a:	fb03 6711 	mls	r7, r3, r1, r6
 800713e:	5dc7      	ldrb	r7, [r0, r7]
 8007140:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007144:	4637      	mov	r7, r6
 8007146:	42bb      	cmp	r3, r7
 8007148:	460e      	mov	r6, r1
 800714a:	d9f4      	bls.n	8007136 <_printf_i+0x11a>
 800714c:	2b08      	cmp	r3, #8
 800714e:	d10b      	bne.n	8007168 <_printf_i+0x14c>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	07de      	lsls	r6, r3, #31
 8007154:	d508      	bpl.n	8007168 <_printf_i+0x14c>
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	6861      	ldr	r1, [r4, #4]
 800715a:	4299      	cmp	r1, r3
 800715c:	bfde      	ittt	le
 800715e:	2330      	movle	r3, #48	; 0x30
 8007160:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007164:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007168:	1b52      	subs	r2, r2, r5
 800716a:	6122      	str	r2, [r4, #16]
 800716c:	f8cd a000 	str.w	sl, [sp]
 8007170:	464b      	mov	r3, r9
 8007172:	aa03      	add	r2, sp, #12
 8007174:	4621      	mov	r1, r4
 8007176:	4640      	mov	r0, r8
 8007178:	f7ff fee2 	bl	8006f40 <_printf_common>
 800717c:	3001      	adds	r0, #1
 800717e:	d14c      	bne.n	800721a <_printf_i+0x1fe>
 8007180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007184:	b004      	add	sp, #16
 8007186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718a:	4835      	ldr	r0, [pc, #212]	; (8007260 <_printf_i+0x244>)
 800718c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007190:	6829      	ldr	r1, [r5, #0]
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	f851 6b04 	ldr.w	r6, [r1], #4
 8007198:	6029      	str	r1, [r5, #0]
 800719a:	061d      	lsls	r5, r3, #24
 800719c:	d514      	bpl.n	80071c8 <_printf_i+0x1ac>
 800719e:	07df      	lsls	r7, r3, #31
 80071a0:	bf44      	itt	mi
 80071a2:	f043 0320 	orrmi.w	r3, r3, #32
 80071a6:	6023      	strmi	r3, [r4, #0]
 80071a8:	b91e      	cbnz	r6, 80071b2 <_printf_i+0x196>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	f023 0320 	bic.w	r3, r3, #32
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	2310      	movs	r3, #16
 80071b4:	e7b0      	b.n	8007118 <_printf_i+0xfc>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	f043 0320 	orr.w	r3, r3, #32
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	2378      	movs	r3, #120	; 0x78
 80071c0:	4828      	ldr	r0, [pc, #160]	; (8007264 <_printf_i+0x248>)
 80071c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071c6:	e7e3      	b.n	8007190 <_printf_i+0x174>
 80071c8:	0659      	lsls	r1, r3, #25
 80071ca:	bf48      	it	mi
 80071cc:	b2b6      	uxthmi	r6, r6
 80071ce:	e7e6      	b.n	800719e <_printf_i+0x182>
 80071d0:	4615      	mov	r5, r2
 80071d2:	e7bb      	b.n	800714c <_printf_i+0x130>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	6826      	ldr	r6, [r4, #0]
 80071d8:	6961      	ldr	r1, [r4, #20]
 80071da:	1d18      	adds	r0, r3, #4
 80071dc:	6028      	str	r0, [r5, #0]
 80071de:	0635      	lsls	r5, r6, #24
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	d501      	bpl.n	80071e8 <_printf_i+0x1cc>
 80071e4:	6019      	str	r1, [r3, #0]
 80071e6:	e002      	b.n	80071ee <_printf_i+0x1d2>
 80071e8:	0670      	lsls	r0, r6, #25
 80071ea:	d5fb      	bpl.n	80071e4 <_printf_i+0x1c8>
 80071ec:	8019      	strh	r1, [r3, #0]
 80071ee:	2300      	movs	r3, #0
 80071f0:	6123      	str	r3, [r4, #16]
 80071f2:	4615      	mov	r5, r2
 80071f4:	e7ba      	b.n	800716c <_printf_i+0x150>
 80071f6:	682b      	ldr	r3, [r5, #0]
 80071f8:	1d1a      	adds	r2, r3, #4
 80071fa:	602a      	str	r2, [r5, #0]
 80071fc:	681d      	ldr	r5, [r3, #0]
 80071fe:	6862      	ldr	r2, [r4, #4]
 8007200:	2100      	movs	r1, #0
 8007202:	4628      	mov	r0, r5
 8007204:	f7f8 ffe4 	bl	80001d0 <memchr>
 8007208:	b108      	cbz	r0, 800720e <_printf_i+0x1f2>
 800720a:	1b40      	subs	r0, r0, r5
 800720c:	6060      	str	r0, [r4, #4]
 800720e:	6863      	ldr	r3, [r4, #4]
 8007210:	6123      	str	r3, [r4, #16]
 8007212:	2300      	movs	r3, #0
 8007214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007218:	e7a8      	b.n	800716c <_printf_i+0x150>
 800721a:	6923      	ldr	r3, [r4, #16]
 800721c:	462a      	mov	r2, r5
 800721e:	4649      	mov	r1, r9
 8007220:	4640      	mov	r0, r8
 8007222:	47d0      	blx	sl
 8007224:	3001      	adds	r0, #1
 8007226:	d0ab      	beq.n	8007180 <_printf_i+0x164>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	079b      	lsls	r3, r3, #30
 800722c:	d413      	bmi.n	8007256 <_printf_i+0x23a>
 800722e:	68e0      	ldr	r0, [r4, #12]
 8007230:	9b03      	ldr	r3, [sp, #12]
 8007232:	4298      	cmp	r0, r3
 8007234:	bfb8      	it	lt
 8007236:	4618      	movlt	r0, r3
 8007238:	e7a4      	b.n	8007184 <_printf_i+0x168>
 800723a:	2301      	movs	r3, #1
 800723c:	4632      	mov	r2, r6
 800723e:	4649      	mov	r1, r9
 8007240:	4640      	mov	r0, r8
 8007242:	47d0      	blx	sl
 8007244:	3001      	adds	r0, #1
 8007246:	d09b      	beq.n	8007180 <_printf_i+0x164>
 8007248:	3501      	adds	r5, #1
 800724a:	68e3      	ldr	r3, [r4, #12]
 800724c:	9903      	ldr	r1, [sp, #12]
 800724e:	1a5b      	subs	r3, r3, r1
 8007250:	42ab      	cmp	r3, r5
 8007252:	dcf2      	bgt.n	800723a <_printf_i+0x21e>
 8007254:	e7eb      	b.n	800722e <_printf_i+0x212>
 8007256:	2500      	movs	r5, #0
 8007258:	f104 0619 	add.w	r6, r4, #25
 800725c:	e7f5      	b.n	800724a <_printf_i+0x22e>
 800725e:	bf00      	nop
 8007260:	08007629 	.word	0x08007629
 8007264:	0800763a 	.word	0x0800763a

08007268 <memcpy>:
 8007268:	440a      	add	r2, r1
 800726a:	4291      	cmp	r1, r2
 800726c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007270:	d100      	bne.n	8007274 <memcpy+0xc>
 8007272:	4770      	bx	lr
 8007274:	b510      	push	{r4, lr}
 8007276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800727a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727e:	4291      	cmp	r1, r2
 8007280:	d1f9      	bne.n	8007276 <memcpy+0xe>
 8007282:	bd10      	pop	{r4, pc}

08007284 <memmove>:
 8007284:	4288      	cmp	r0, r1
 8007286:	b510      	push	{r4, lr}
 8007288:	eb01 0402 	add.w	r4, r1, r2
 800728c:	d902      	bls.n	8007294 <memmove+0x10>
 800728e:	4284      	cmp	r4, r0
 8007290:	4623      	mov	r3, r4
 8007292:	d807      	bhi.n	80072a4 <memmove+0x20>
 8007294:	1e43      	subs	r3, r0, #1
 8007296:	42a1      	cmp	r1, r4
 8007298:	d008      	beq.n	80072ac <memmove+0x28>
 800729a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800729e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072a2:	e7f8      	b.n	8007296 <memmove+0x12>
 80072a4:	4402      	add	r2, r0
 80072a6:	4601      	mov	r1, r0
 80072a8:	428a      	cmp	r2, r1
 80072aa:	d100      	bne.n	80072ae <memmove+0x2a>
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072b6:	e7f7      	b.n	80072a8 <memmove+0x24>

080072b8 <_free_r>:
 80072b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ba:	2900      	cmp	r1, #0
 80072bc:	d044      	beq.n	8007348 <_free_r+0x90>
 80072be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c2:	9001      	str	r0, [sp, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f1a1 0404 	sub.w	r4, r1, #4
 80072ca:	bfb8      	it	lt
 80072cc:	18e4      	addlt	r4, r4, r3
 80072ce:	f000 f913 	bl	80074f8 <__malloc_lock>
 80072d2:	4a1e      	ldr	r2, [pc, #120]	; (800734c <_free_r+0x94>)
 80072d4:	9801      	ldr	r0, [sp, #4]
 80072d6:	6813      	ldr	r3, [r2, #0]
 80072d8:	b933      	cbnz	r3, 80072e8 <_free_r+0x30>
 80072da:	6063      	str	r3, [r4, #4]
 80072dc:	6014      	str	r4, [r2, #0]
 80072de:	b003      	add	sp, #12
 80072e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072e4:	f000 b90e 	b.w	8007504 <__malloc_unlock>
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d908      	bls.n	80072fe <_free_r+0x46>
 80072ec:	6825      	ldr	r5, [r4, #0]
 80072ee:	1961      	adds	r1, r4, r5
 80072f0:	428b      	cmp	r3, r1
 80072f2:	bf01      	itttt	eq
 80072f4:	6819      	ldreq	r1, [r3, #0]
 80072f6:	685b      	ldreq	r3, [r3, #4]
 80072f8:	1949      	addeq	r1, r1, r5
 80072fa:	6021      	streq	r1, [r4, #0]
 80072fc:	e7ed      	b.n	80072da <_free_r+0x22>
 80072fe:	461a      	mov	r2, r3
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	b10b      	cbz	r3, 8007308 <_free_r+0x50>
 8007304:	42a3      	cmp	r3, r4
 8007306:	d9fa      	bls.n	80072fe <_free_r+0x46>
 8007308:	6811      	ldr	r1, [r2, #0]
 800730a:	1855      	adds	r5, r2, r1
 800730c:	42a5      	cmp	r5, r4
 800730e:	d10b      	bne.n	8007328 <_free_r+0x70>
 8007310:	6824      	ldr	r4, [r4, #0]
 8007312:	4421      	add	r1, r4
 8007314:	1854      	adds	r4, r2, r1
 8007316:	42a3      	cmp	r3, r4
 8007318:	6011      	str	r1, [r2, #0]
 800731a:	d1e0      	bne.n	80072de <_free_r+0x26>
 800731c:	681c      	ldr	r4, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	6053      	str	r3, [r2, #4]
 8007322:	4421      	add	r1, r4
 8007324:	6011      	str	r1, [r2, #0]
 8007326:	e7da      	b.n	80072de <_free_r+0x26>
 8007328:	d902      	bls.n	8007330 <_free_r+0x78>
 800732a:	230c      	movs	r3, #12
 800732c:	6003      	str	r3, [r0, #0]
 800732e:	e7d6      	b.n	80072de <_free_r+0x26>
 8007330:	6825      	ldr	r5, [r4, #0]
 8007332:	1961      	adds	r1, r4, r5
 8007334:	428b      	cmp	r3, r1
 8007336:	bf04      	itt	eq
 8007338:	6819      	ldreq	r1, [r3, #0]
 800733a:	685b      	ldreq	r3, [r3, #4]
 800733c:	6063      	str	r3, [r4, #4]
 800733e:	bf04      	itt	eq
 8007340:	1949      	addeq	r1, r1, r5
 8007342:	6021      	streq	r1, [r4, #0]
 8007344:	6054      	str	r4, [r2, #4]
 8007346:	e7ca      	b.n	80072de <_free_r+0x26>
 8007348:	b003      	add	sp, #12
 800734a:	bd30      	pop	{r4, r5, pc}
 800734c:	20000378 	.word	0x20000378

08007350 <sbrk_aligned>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	4e0e      	ldr	r6, [pc, #56]	; (800738c <sbrk_aligned+0x3c>)
 8007354:	460c      	mov	r4, r1
 8007356:	6831      	ldr	r1, [r6, #0]
 8007358:	4605      	mov	r5, r0
 800735a:	b911      	cbnz	r1, 8007362 <sbrk_aligned+0x12>
 800735c:	f000 f8bc 	bl	80074d8 <_sbrk_r>
 8007360:	6030      	str	r0, [r6, #0]
 8007362:	4621      	mov	r1, r4
 8007364:	4628      	mov	r0, r5
 8007366:	f000 f8b7 	bl	80074d8 <_sbrk_r>
 800736a:	1c43      	adds	r3, r0, #1
 800736c:	d00a      	beq.n	8007384 <sbrk_aligned+0x34>
 800736e:	1cc4      	adds	r4, r0, #3
 8007370:	f024 0403 	bic.w	r4, r4, #3
 8007374:	42a0      	cmp	r0, r4
 8007376:	d007      	beq.n	8007388 <sbrk_aligned+0x38>
 8007378:	1a21      	subs	r1, r4, r0
 800737a:	4628      	mov	r0, r5
 800737c:	f000 f8ac 	bl	80074d8 <_sbrk_r>
 8007380:	3001      	adds	r0, #1
 8007382:	d101      	bne.n	8007388 <sbrk_aligned+0x38>
 8007384:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007388:	4620      	mov	r0, r4
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	2000037c 	.word	0x2000037c

08007390 <_malloc_r>:
 8007390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007394:	1ccd      	adds	r5, r1, #3
 8007396:	f025 0503 	bic.w	r5, r5, #3
 800739a:	3508      	adds	r5, #8
 800739c:	2d0c      	cmp	r5, #12
 800739e:	bf38      	it	cc
 80073a0:	250c      	movcc	r5, #12
 80073a2:	2d00      	cmp	r5, #0
 80073a4:	4607      	mov	r7, r0
 80073a6:	db01      	blt.n	80073ac <_malloc_r+0x1c>
 80073a8:	42a9      	cmp	r1, r5
 80073aa:	d905      	bls.n	80073b8 <_malloc_r+0x28>
 80073ac:	230c      	movs	r3, #12
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	2600      	movs	r6, #0
 80073b2:	4630      	mov	r0, r6
 80073b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b8:	4e2e      	ldr	r6, [pc, #184]	; (8007474 <_malloc_r+0xe4>)
 80073ba:	f000 f89d 	bl	80074f8 <__malloc_lock>
 80073be:	6833      	ldr	r3, [r6, #0]
 80073c0:	461c      	mov	r4, r3
 80073c2:	bb34      	cbnz	r4, 8007412 <_malloc_r+0x82>
 80073c4:	4629      	mov	r1, r5
 80073c6:	4638      	mov	r0, r7
 80073c8:	f7ff ffc2 	bl	8007350 <sbrk_aligned>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	4604      	mov	r4, r0
 80073d0:	d14d      	bne.n	800746e <_malloc_r+0xde>
 80073d2:	6834      	ldr	r4, [r6, #0]
 80073d4:	4626      	mov	r6, r4
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	d140      	bne.n	800745c <_malloc_r+0xcc>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	4631      	mov	r1, r6
 80073de:	4638      	mov	r0, r7
 80073e0:	eb04 0803 	add.w	r8, r4, r3
 80073e4:	f000 f878 	bl	80074d8 <_sbrk_r>
 80073e8:	4580      	cmp	r8, r0
 80073ea:	d13a      	bne.n	8007462 <_malloc_r+0xd2>
 80073ec:	6821      	ldr	r1, [r4, #0]
 80073ee:	3503      	adds	r5, #3
 80073f0:	1a6d      	subs	r5, r5, r1
 80073f2:	f025 0503 	bic.w	r5, r5, #3
 80073f6:	3508      	adds	r5, #8
 80073f8:	2d0c      	cmp	r5, #12
 80073fa:	bf38      	it	cc
 80073fc:	250c      	movcc	r5, #12
 80073fe:	4629      	mov	r1, r5
 8007400:	4638      	mov	r0, r7
 8007402:	f7ff ffa5 	bl	8007350 <sbrk_aligned>
 8007406:	3001      	adds	r0, #1
 8007408:	d02b      	beq.n	8007462 <_malloc_r+0xd2>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	442b      	add	r3, r5
 800740e:	6023      	str	r3, [r4, #0]
 8007410:	e00e      	b.n	8007430 <_malloc_r+0xa0>
 8007412:	6822      	ldr	r2, [r4, #0]
 8007414:	1b52      	subs	r2, r2, r5
 8007416:	d41e      	bmi.n	8007456 <_malloc_r+0xc6>
 8007418:	2a0b      	cmp	r2, #11
 800741a:	d916      	bls.n	800744a <_malloc_r+0xba>
 800741c:	1961      	adds	r1, r4, r5
 800741e:	42a3      	cmp	r3, r4
 8007420:	6025      	str	r5, [r4, #0]
 8007422:	bf18      	it	ne
 8007424:	6059      	strne	r1, [r3, #4]
 8007426:	6863      	ldr	r3, [r4, #4]
 8007428:	bf08      	it	eq
 800742a:	6031      	streq	r1, [r6, #0]
 800742c:	5162      	str	r2, [r4, r5]
 800742e:	604b      	str	r3, [r1, #4]
 8007430:	4638      	mov	r0, r7
 8007432:	f104 060b 	add.w	r6, r4, #11
 8007436:	f000 f865 	bl	8007504 <__malloc_unlock>
 800743a:	f026 0607 	bic.w	r6, r6, #7
 800743e:	1d23      	adds	r3, r4, #4
 8007440:	1af2      	subs	r2, r6, r3
 8007442:	d0b6      	beq.n	80073b2 <_malloc_r+0x22>
 8007444:	1b9b      	subs	r3, r3, r6
 8007446:	50a3      	str	r3, [r4, r2]
 8007448:	e7b3      	b.n	80073b2 <_malloc_r+0x22>
 800744a:	6862      	ldr	r2, [r4, #4]
 800744c:	42a3      	cmp	r3, r4
 800744e:	bf0c      	ite	eq
 8007450:	6032      	streq	r2, [r6, #0]
 8007452:	605a      	strne	r2, [r3, #4]
 8007454:	e7ec      	b.n	8007430 <_malloc_r+0xa0>
 8007456:	4623      	mov	r3, r4
 8007458:	6864      	ldr	r4, [r4, #4]
 800745a:	e7b2      	b.n	80073c2 <_malloc_r+0x32>
 800745c:	4634      	mov	r4, r6
 800745e:	6876      	ldr	r6, [r6, #4]
 8007460:	e7b9      	b.n	80073d6 <_malloc_r+0x46>
 8007462:	230c      	movs	r3, #12
 8007464:	603b      	str	r3, [r7, #0]
 8007466:	4638      	mov	r0, r7
 8007468:	f000 f84c 	bl	8007504 <__malloc_unlock>
 800746c:	e7a1      	b.n	80073b2 <_malloc_r+0x22>
 800746e:	6025      	str	r5, [r4, #0]
 8007470:	e7de      	b.n	8007430 <_malloc_r+0xa0>
 8007472:	bf00      	nop
 8007474:	20000378 	.word	0x20000378

08007478 <_realloc_r>:
 8007478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747c:	4680      	mov	r8, r0
 800747e:	4614      	mov	r4, r2
 8007480:	460e      	mov	r6, r1
 8007482:	b921      	cbnz	r1, 800748e <_realloc_r+0x16>
 8007484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007488:	4611      	mov	r1, r2
 800748a:	f7ff bf81 	b.w	8007390 <_malloc_r>
 800748e:	b92a      	cbnz	r2, 800749c <_realloc_r+0x24>
 8007490:	f7ff ff12 	bl	80072b8 <_free_r>
 8007494:	4625      	mov	r5, r4
 8007496:	4628      	mov	r0, r5
 8007498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800749c:	f000 f838 	bl	8007510 <_malloc_usable_size_r>
 80074a0:	4284      	cmp	r4, r0
 80074a2:	4607      	mov	r7, r0
 80074a4:	d802      	bhi.n	80074ac <_realloc_r+0x34>
 80074a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074aa:	d812      	bhi.n	80074d2 <_realloc_r+0x5a>
 80074ac:	4621      	mov	r1, r4
 80074ae:	4640      	mov	r0, r8
 80074b0:	f7ff ff6e 	bl	8007390 <_malloc_r>
 80074b4:	4605      	mov	r5, r0
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d0ed      	beq.n	8007496 <_realloc_r+0x1e>
 80074ba:	42bc      	cmp	r4, r7
 80074bc:	4622      	mov	r2, r4
 80074be:	4631      	mov	r1, r6
 80074c0:	bf28      	it	cs
 80074c2:	463a      	movcs	r2, r7
 80074c4:	f7ff fed0 	bl	8007268 <memcpy>
 80074c8:	4631      	mov	r1, r6
 80074ca:	4640      	mov	r0, r8
 80074cc:	f7ff fef4 	bl	80072b8 <_free_r>
 80074d0:	e7e1      	b.n	8007496 <_realloc_r+0x1e>
 80074d2:	4635      	mov	r5, r6
 80074d4:	e7df      	b.n	8007496 <_realloc_r+0x1e>
	...

080074d8 <_sbrk_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d06      	ldr	r5, [pc, #24]	; (80074f4 <_sbrk_r+0x1c>)
 80074dc:	2300      	movs	r3, #0
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f7fa f906 	bl	80016f4 <_sbrk>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_sbrk_r+0x1a>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_sbrk_r+0x1a>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20000380 	.word	0x20000380

080074f8 <__malloc_lock>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__malloc_lock+0x8>)
 80074fa:	f000 b811 	b.w	8007520 <__retarget_lock_acquire_recursive>
 80074fe:	bf00      	nop
 8007500:	20000384 	.word	0x20000384

08007504 <__malloc_unlock>:
 8007504:	4801      	ldr	r0, [pc, #4]	; (800750c <__malloc_unlock+0x8>)
 8007506:	f000 b80c 	b.w	8007522 <__retarget_lock_release_recursive>
 800750a:	bf00      	nop
 800750c:	20000384 	.word	0x20000384

08007510 <_malloc_usable_size_r>:
 8007510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007514:	1f18      	subs	r0, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	bfbc      	itt	lt
 800751a:	580b      	ldrlt	r3, [r1, r0]
 800751c:	18c0      	addlt	r0, r0, r3
 800751e:	4770      	bx	lr

08007520 <__retarget_lock_acquire_recursive>:
 8007520:	4770      	bx	lr

08007522 <__retarget_lock_release_recursive>:
 8007522:	4770      	bx	lr

08007524 <_init>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	bf00      	nop
 8007528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752a:	bc08      	pop	{r3}
 800752c:	469e      	mov	lr, r3
 800752e:	4770      	bx	lr

08007530 <_fini>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	bf00      	nop
 8007534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007536:	bc08      	pop	{r3}
 8007538:	469e      	mov	lr, r3
 800753a:	4770      	bx	lr
