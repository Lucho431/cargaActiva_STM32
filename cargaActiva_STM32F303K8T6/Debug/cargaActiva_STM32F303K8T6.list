
cargaActiva_STM32F303K8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd0  08006fd0  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08006fd0  08006fd0  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fd0  08006fd0  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fd4  08006fd4  00016fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08006fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          0000027c  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000344  20000344  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a88  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003028  00000000  00000000  00035b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  00038ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f8  00000000  00000000  00039e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d5bd  00000000  00000000  0003af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018021  00000000  00000000  000584bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8c7e  00000000  00000000  000704de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011915c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f94  00000000  00000000  001191ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ea8 	.word	0x08006ea8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08006ea8 	.word	0x08006ea8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Read16>:




uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af04      	add	r7, sp, #16
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6818      	ldr	r0, [r3, #0]
 8000280:	78fb      	ldrb	r3, [r7, #3]
 8000282:	b29a      	uxth	r2, r3
 8000284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000288:	9302      	str	r3, [sp, #8]
 800028a:	2302      	movs	r3, #2
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	f107 030c 	add.w	r3, r7, #12
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2301      	movs	r3, #1
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	f002 fb58 	bl	800294c <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 800029c:	7b3b      	ldrb	r3, [r7, #12]
 800029e:	021b      	lsls	r3, r3, #8
 80002a0:	b21a      	sxth	r2, r3
 80002a2:	7b7b      	ldrb	r3, [r7, #13]
 80002a4:	b21b      	sxth	r3, r3
 80002a6:	4313      	orrs	r3, r2
 80002a8:	b21b      	sxth	r3, r3
 80002aa:	b29b      	uxth	r3, r3
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b088      	sub	sp, #32
 80002b8:	af04      	add	r7, sp, #16
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	70fb      	strb	r3, [r7, #3]
 80002c0:	4613      	mov	r3, r2
 80002c2:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80002c4:	883b      	ldrh	r3, [r7, #0]
 80002c6:	0a1b      	lsrs	r3, r3, #8
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80002ce:	883b      	ldrh	r3, [r7, #0]
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	6818      	ldr	r0, [r3, #0]
 80002d8:	78fb      	ldrb	r3, [r7, #3]
 80002da:	b29a      	uxth	r2, r3
 80002dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e0:	9302      	str	r3, [sp, #8]
 80002e2:	2302      	movs	r3, #2
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2301      	movs	r3, #1
 80002ee:	2180      	movs	r1, #128	; 0x80
 80002f0:	f002 fa18 	bl	8002724 <HAL_I2C_Mem_Write>
}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <INA219_ReadCurrent_raw>:
	return ((result >> 3  ) * 4);

}

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000304:	2104      	movs	r1, #4
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f7ff ffb2 	bl	8000270 <Read16>
 800030c:	4603      	mov	r3, r0
 800030e:	81fb      	strh	r3, [r7, #14]

	return (result );
 8000310:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <INA219_ReadCurrent_float>:
	int16_t result = INA219_ReadCurrent_raw(ina219);

	return (result / ina219_currentDivider_mA );
}

float INA219_ReadCurrent_float(INA219_t *ina219){
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f7ff ffe9 	bl	80002fc <INA219_ReadCurrent_raw>
 800032a:	4603      	mov	r3, r0
 800032c:	81fb      	strh	r3, [r7, #14]

	return ( result * currentLSB );
 800032e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000332:	ee07 3a90 	vmov	s15, r3
 8000336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <INA219_ReadCurrent_float+0x34>)
 800033c:	edd3 7a00 	vldr	s15, [r3]
 8000340:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000344:	eeb0 0a67 	vmov.f32	s0, s15
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000

08000354 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 800035c:	2101      	movs	r1, #1
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f7ff ff86 	bl	8000270 <Read16>
 8000364:	4603      	mov	r3, r0
 8000366:	81fb      	strh	r3, [r7, #14]

	return result;
 8000368:	89fb      	ldrh	r3, [r7, #14]
	return (result * 0.01 );
}
 800036a:	4618      	mov	r0, r3
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <INA219_setCalibration>:
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
	HAL_Delay(1);
}

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
 800037a:	460b      	mov	r3, r1
 800037c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800037e:	887b      	ldrh	r3, [r7, #2]
 8000380:	461a      	mov	r2, r3
 8000382:	2105      	movs	r1, #5
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	f7ff ff95 	bl	80002b4 <Write16>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <MX_DAC2_Init>:

DAC_HandleTypeDef hdac2;

/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_DAC2_Init+0x4c>)
 80003a6:	4a0f      	ldr	r2, [pc, #60]	; (80003e4 <MX_DAC2_Init+0x50>)
 80003a8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80003aa:	480d      	ldr	r0, [pc, #52]	; (80003e0 <MX_DAC2_Init+0x4c>)
 80003ac:	f001 fdb3 	bl	8001f16 <HAL_DAC_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 80003b6:	f000 fbc5 	bl	8000b44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 80003be:	2302      	movs	r3, #2
 80003c0:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	4619      	mov	r1, r3
 80003c8:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_DAC2_Init+0x4c>)
 80003ca:	f001 fe2b 	bl	8002024 <HAL_DAC_ConfigChannel>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 80003d4:	f000 fbb6 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	200000e4 	.word	0x200000e4
 80003e4:	40009800 	.word	0x40009800

080003e8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	; 0x28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC2)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a19      	ldr	r2, [pc, #100]	; (800046c <HAL_DAC_MspInit+0x84>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d12c      	bne.n	8000464 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* DAC2 clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <HAL_DAC_MspInit+0x88>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a18      	ldr	r2, [pc, #96]	; (8000470 <HAL_DAC_MspInit+0x88>)
 8000410:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b16      	ldr	r3, [pc, #88]	; (8000470 <HAL_DAC_MspInit+0x88>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800041e:	613b      	str	r3, [r7, #16]
 8000420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <HAL_DAC_MspInit+0x88>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a12      	ldr	r2, [pc, #72]	; (8000470 <HAL_DAC_MspInit+0x88>)
 8000428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <HAL_DAC_MspInit+0x88>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800043a:	2340      	movs	r3, #64	; 0x40
 800043c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800043e:	2303      	movs	r3, #3
 8000440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000446:	f107 0314 	add.w	r3, r7, #20
 800044a:	4619      	mov	r1, r3
 800044c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000450:	f001 fe5a 	bl	8002108 <HAL_GPIO_Init>

    /* DAC2 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8000454:	2200      	movs	r2, #0
 8000456:	2100      	movs	r1, #0
 8000458:	2037      	movs	r0, #55	; 0x37
 800045a:	f001 fd26 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 800045e:	2037      	movs	r0, #55	; 0x37
 8000460:	f001 fd3f 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000464:	bf00      	nop
 8000466:	3728      	adds	r7, #40	; 0x28
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40009800 	.word	0x40009800
 8000470:	40021000 	.word	0x40021000

08000474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 030c 	add.w	r3, r7, #12
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048a:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <MX_GPIO_Init+0x80>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a19      	ldr	r2, [pc, #100]	; (80004f4 <MX_GPIO_Init+0x80>)
 8000490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <MX_GPIO_Init+0x80>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <MX_GPIO_Init+0x80>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <MX_GPIO_Init+0x80>)
 80004a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_GPIO_Init+0x80>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_GPIO_Init+0x80>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <MX_GPIO_Init+0x80>)
 80004c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_GPIO_Init+0x80>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_D4_sw_Pin;
 80004d2:	2320      	movs	r3, #32
 80004d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004da:	2301      	movs	r3, #1
 80004dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IN_D4_sw_GPIO_Port, &GPIO_InitStruct);
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	4619      	mov	r1, r3
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <MX_GPIO_Init+0x84>)
 80004e6:	f001 fe0f 	bl	8002108 <HAL_GPIO_Init>

}
 80004ea:	bf00      	nop
 80004ec:	3720      	adds	r7, #32
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	48000400 	.word	0x48000400

080004fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_I2C1_Init+0x74>)
 8000502:	4a1c      	ldr	r2, [pc, #112]	; (8000574 <MX_I2C1_Init+0x78>)
 8000504:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_I2C1_Init+0x74>)
 8000508:	f240 220b 	movw	r2, #523	; 0x20b
 800050c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_I2C1_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_I2C1_Init+0x74>)
 8000516:	2201      	movs	r2, #1
 8000518:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_I2C1_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <MX_I2C1_Init+0x74>)
 8000522:	2200      	movs	r2, #0
 8000524:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_I2C1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <MX_I2C1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_I2C1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_I2C1_Init+0x74>)
 800053a:	f001 ff6f 	bl	800241c <HAL_I2C_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000544:	f000 fafe 	bl	8000b44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000548:	2100      	movs	r1, #0
 800054a:	4809      	ldr	r0, [pc, #36]	; (8000570 <MX_I2C1_Init+0x74>)
 800054c:	f002 fdd0 	bl	80030f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000556:	f000 faf5 	bl	8000b44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800055a:	2100      	movs	r1, #0
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <MX_I2C1_Init+0x74>)
 800055e:	f002 fe12 	bl	8003186 <HAL_I2CEx_ConfigDigitalFilter>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000568:	f000 faec 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000f8 	.word	0x200000f8
 8000574:	40005400 	.word	0x40005400

08000578 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <HAL_I2C_MspInit+0x7c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d127      	bne.n	80005ea <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <HAL_I2C_MspInit+0x80>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a16      	ldr	r2, [pc, #88]	; (80005f8 <HAL_I2C_MspInit+0x80>)
 80005a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HAL_I2C_MspInit+0x80>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005b2:	23c0      	movs	r3, #192	; 0xc0
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b6:	2312      	movs	r3, #18
 80005b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005c2:	2304      	movs	r3, #4
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <HAL_I2C_MspInit+0x84>)
 80005ce:	f001 fd9b 	bl	8002108 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_I2C_MspInit+0x80>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <HAL_I2C_MspInit+0x80>)
 80005d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_I2C_MspInit+0x80>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40005400 	.word	0x40005400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	48000400 	.word	0x48000400

08000600 <lcd_send_cmd>:

I2C_HandleTypeDef* i2c_handler;  // change your handler here accordingly
uint8_t SLAVE_ADDRESS_LCD; //(0x27)<<1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	f043 030c 	orr.w	r3, r3, #12
 800061e:	b2db      	uxtb	r3, r3
 8000620:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	b2db      	uxtb	r3, r3
 800062a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	f043 030c 	orr.w	r3, r3, #12
 8000632:	b2db      	uxtb	r3, r3
 8000634:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	b2db      	uxtb	r3, r3
 800063e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <lcd_send_cmd+0x60>)
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <lcd_send_cmd+0x64>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b299      	uxth	r1, r3
 800064a:	f107 0208 	add.w	r2, r7, #8
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2304      	movs	r3, #4
 8000654:	f001 ff72 	bl	800253c <HAL_I2C_Master_Transmit>
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000014c 	.word	0x2000014c
 8000664:	20000150 	.word	0x20000150

08000668 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af02      	add	r7, sp, #8
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f023 030f 	bic.w	r3, r3, #15
 8000678:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	f043 030d 	orr.w	r3, r3, #13
 8000686:	b2db      	uxtb	r3, r3
 8000688:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	f043 0309 	orr.w	r3, r3, #9
 8000690:	b2db      	uxtb	r3, r3
 8000692:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000694:	7bbb      	ldrb	r3, [r7, #14]
 8000696:	f043 030d 	orr.w	r3, r3, #13
 800069a:	b2db      	uxtb	r3, r3
 800069c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800069e:	7bbb      	ldrb	r3, [r7, #14]
 80006a0:	f043 0309 	orr.w	r3, r3, #9
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <lcd_send_data+0x60>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <lcd_send_data+0x64>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b299      	uxth	r1, r3
 80006b2:	f107 0208 	add.w	r2, r7, #8
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2304      	movs	r3, #4
 80006bc:	f001 ff3e 	bl	800253c <HAL_I2C_Master_Transmit>
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000014c 	.word	0x2000014c
 80006cc:	20000150 	.word	0x20000150

080006d0 <lcd_clear>:

void lcd_clear (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80006d6:	2080      	movs	r0, #128	; 0x80
 80006d8:	f7ff ff92 	bl	8000600 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	e005      	b.n	80006ee <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80006e2:	2020      	movs	r0, #32
 80006e4:	f7ff ffc0 	bl	8000668 <lcd_send_data>
	for (int i=0; i<70; i++)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3301      	adds	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b45      	cmp	r3, #69	; 0x45
 80006f2:	ddf6      	ble.n	80006e2 <lcd_clear+0x12>
	}
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <lcd_put_cur>:

void lcd_put_cur(int x, int y)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
    switch (y){
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	2b03      	cmp	r3, #3
 800070e:	d82b      	bhi.n	8000768 <lcd_put_cur+0x68>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <lcd_put_cur+0x18>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000729 	.word	0x08000729
 800071c:	08000739 	.word	0x08000739
 8000720:	08000749 	.word	0x08000749
 8000724:	08000759 	.word	0x08000759
    	case 0:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	3b80      	subs	r3, #128	; 0x80
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff65 	bl	8000600 <lcd_send_cmd>
    	break;
 8000736:	e017      	b.n	8000768 <lcd_put_cur+0x68>
    	case 1:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	3b40      	subs	r3, #64	; 0x40
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff5d 	bl	8000600 <lcd_send_cmd>
    	break;
 8000746:	e00f      	b.n	8000768 <lcd_put_cur+0x68>
    	case 2:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	3b6c      	subs	r3, #108	; 0x6c
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff55 	bl	8000600 <lcd_send_cmd>
    	break;
 8000756:	e007      	b.n	8000768 <lcd_put_cur+0x68>
    	case 3:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	3b2c      	subs	r3, #44	; 0x2c
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff4d 	bl	8000600 <lcd_send_cmd>
    	break;
 8000766:	bf00      	nop
    }
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <lcd_init+0x98>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <lcd_init+0x9c>)
 800078a:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800078c:	2032      	movs	r0, #50	; 0x32
 800078e:	f001 fa8d 	bl	8001cac <HAL_Delay>
	lcd_send_cmd (0x30);
 8000792:	2030      	movs	r0, #48	; 0x30
 8000794:	f7ff ff34 	bl	8000600 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000798:	2005      	movs	r0, #5
 800079a:	f001 fa87 	bl	8001cac <HAL_Delay>
	lcd_send_cmd (0x30);
 800079e:	2030      	movs	r0, #48	; 0x30
 80007a0:	f7ff ff2e 	bl	8000600 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80007a4:	2001      	movs	r0, #1
 80007a6:	f001 fa81 	bl	8001cac <HAL_Delay>
	lcd_send_cmd (0x30);
 80007aa:	2030      	movs	r0, #48	; 0x30
 80007ac:	f7ff ff28 	bl	8000600 <lcd_send_cmd>
	HAL_Delay(10);
 80007b0:	200a      	movs	r0, #10
 80007b2:	f001 fa7b 	bl	8001cac <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80007b6:	2020      	movs	r0, #32
 80007b8:	f7ff ff22 	bl	8000600 <lcd_send_cmd>
	HAL_Delay(10);
 80007bc:	200a      	movs	r0, #10
 80007be:	f001 fa75 	bl	8001cac <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80007c2:	2028      	movs	r0, #40	; 0x28
 80007c4:	f7ff ff1c 	bl	8000600 <lcd_send_cmd>
	HAL_Delay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f001 fa6f 	bl	8001cac <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80007ce:	2008      	movs	r0, #8
 80007d0:	f7ff ff16 	bl	8000600 <lcd_send_cmd>
	HAL_Delay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f001 fa69 	bl	8001cac <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff ff10 	bl	8000600 <lcd_send_cmd>
	HAL_Delay(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f001 fa63 	bl	8001cac <HAL_Delay>
	HAL_Delay(1);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f001 fa60 	bl	8001cac <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80007ec:	2006      	movs	r0, #6
 80007ee:	f7ff ff07 	bl	8000600 <lcd_send_cmd>
	HAL_Delay(1);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f001 fa5a 	bl	8001cac <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80007f8:	200c      	movs	r0, #12
 80007fa:	f7ff ff01 	bl	8000600 <lcd_send_cmd>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000014c 	.word	0x2000014c
 800080c:	20000150 	.word	0x20000150

08000810 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000818:	e006      	b.n	8000828 <lcd_send_string+0x18>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff20 	bl	8000668 <lcd_send_data>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f4      	bne.n	800081a <lcd_send_string+0xa>
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <lcd_CustomChar_create>:

void lcd_CustomChar_create(uint8_t location, uint8_t charmap[])
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	6039      	str	r1, [r7, #0]
 8000844:	71fb      	strb	r3, [r7, #7]
	location <<= 3;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	71fb      	strb	r3, [r7, #7]

	lcd_send_cmd (0x40 | (location & 0x38) );
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000854:	b25b      	sxtb	r3, r3
 8000856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085a:	b25b      	sxtb	r3, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fece 	bl	8000600 <lcd_send_cmd>
	for (int i=0; i<8; i++)
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e009      	b.n	800087e <lcd_CustomChar_create+0x44>
	{
		lcd_send_data(charmap[i]);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fef8 	bl	8000668 <lcd_send_data>
	for (int i=0; i<8; i++)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	3301      	adds	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2b07      	cmp	r3, #7
 8000882:	ddf2      	ble.n	800086a <lcd_CustomChar_create+0x30>
	}
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f001 f9a3 	bl	8001be0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(100);
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f001 fa06 	bl	8001cac <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a0:	f000 f8de 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a4:	f7ff fde6 	bl	8000474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008a8:	f001 f8fc 	bl	8001aa4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80008ac:	f000 ff10 	bl	80016d0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80008b0:	f7ff fe24 	bl	80004fc <MX_I2C1_Init>
  MX_TIM2_Init();
 80008b4:	f000 ffb8 	bl	8001828 <MX_TIM2_Init>
  MX_TIM7_Init();
 80008b8:	f001 f80a 	bl	80018d0 <MX_TIM7_Init>
  MX_DAC2_Init();
 80008bc:	f7ff fd6a 	bl	8000394 <MX_DAC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7); //overflow: 10 ms
 80008c0:	4854      	ldr	r0, [pc, #336]	; (8000a14 <main+0x184>)
 80008c2:	f004 f89f 	bl	8004a04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80008c6:	213c      	movs	r1, #60	; 0x3c
 80008c8:	4853      	ldr	r0, [pc, #332]	; (8000a18 <main+0x188>)
 80008ca:	f004 f9fe 	bl	8004cca <HAL_TIM_Encoder_Start_IT>
//	  if(i2c_status == HAL_OK){
//		  __NOP();
//	  }
//  }

  lcd_init(&hi2c1, 0x27);
 80008ce:	2127      	movs	r1, #39	; 0x27
 80008d0:	4852      	ldr	r0, [pc, #328]	; (8000a1c <main+0x18c>)
 80008d2:	f7ff ff4d 	bl	8000770 <lcd_init>

 // INA219_Init(&ina219, &hi2c1, INA219_ADDRESS);

  start_menu ();
 80008d6:	f000 f93b 	bl	8000b50 <start_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  corriente = INA219_ReadCurrent_float(&ina219);
 80008da:	4851      	ldr	r0, [pc, #324]	; (8000a20 <main+0x190>)
 80008dc:	f7ff fd1e 	bl	800031c <INA219_ReadCurrent_float>
 80008e0:	eef0 7a40 	vmov.f32	s15, s0
 80008e4:	4b4f      	ldr	r3, [pc, #316]	; (8000a24 <main+0x194>)
 80008e6:	edc3 7a00 	vstr	s15, [r3]

	  c2 = corriente * 1000;
 80008ea:	4b4e      	ldr	r3, [pc, #312]	; (8000a24 <main+0x194>)
 80008ec:	edd3 7a00 	vldr	s15, [r3]
 80008f0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8000a28 <main+0x198>
 80008f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008f8:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <main+0x19c>)
 80008fa:	edc3 7a00 	vstr	s15, [r3]
	  c3 = c2;
 80008fe:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <main+0x19c>)
 8000900:	edd3 7a00 	vldr	s15, [r3]
 8000904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000908:	ee17 3a90 	vmov	r3, s15
 800090c:	b21a      	sxth	r2, r3
 800090e:	4b48      	ldr	r3, [pc, #288]	; (8000a30 <main+0x1a0>)
 8000910:	801a      	strh	r2, [r3, #0]

	  rango_I = corriente * factor_rango;
 8000912:	4b44      	ldr	r3, [pc, #272]	; (8000a24 <main+0x194>)
 8000914:	ed93 7a00 	vldr	s14, [r3]
 8000918:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <main+0x1a4>)
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000926:	edc7 7a01 	vstr	s15, [r7, #4]
 800092a:	793b      	ldrb	r3, [r7, #4]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <main+0x1a8>)
 8000930:	701a      	strb	r2, [r3, #0]
	  //if (!rango_I) rango_I++;

//	  INA219_setCalibration(&ina219, cal_dinamico[rango_I]);


	  switch (rango_I){
 8000932:	4b41      	ldr	r3, [pc, #260]	; (8000a38 <main+0x1a8>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d82a      	bhi.n	8000990 <main+0x100>
 800093a:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <main+0xb0>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	08000955 	.word	0x08000955
 8000944:	08000961 	.word	0x08000961
 8000948:	0800096d 	.word	0x0800096d
 800094c:	08000979 	.word	0x08000979
 8000950:	08000985 	.word	0x08000985
		  case 0:
			  INA219_setCalibration(&ina219, 4002);
 8000954:	f640 71a2 	movw	r1, #4002	; 0xfa2
 8000958:	4831      	ldr	r0, [pc, #196]	; (8000a20 <main+0x190>)
 800095a:	f7ff fd0a 	bl	8000372 <INA219_setCalibration>
		  break;
 800095e:	e018      	b.n	8000992 <main+0x102>
		  case 1:
			  INA219_setCalibration(&ina219, 3971);
 8000960:	f640 7183 	movw	r1, #3971	; 0xf83
 8000964:	482e      	ldr	r0, [pc, #184]	; (8000a20 <main+0x190>)
 8000966:	f7ff fd04 	bl	8000372 <INA219_setCalibration>
		  break;
 800096a:	e012      	b.n	8000992 <main+0x102>
		  case 2:
			  INA219_setCalibration(&ina219, 3937);
 800096c:	f640 7161 	movw	r1, #3937	; 0xf61
 8000970:	482b      	ldr	r0, [pc, #172]	; (8000a20 <main+0x190>)
 8000972:	f7ff fcfe 	bl	8000372 <INA219_setCalibration>
		  break;
 8000976:	e00c      	b.n	8000992 <main+0x102>
		  case 3:
			  INA219_setCalibration(&ina219, 3846);
 8000978:	f640 7106 	movw	r1, #3846	; 0xf06
 800097c:	4828      	ldr	r0, [pc, #160]	; (8000a20 <main+0x190>)
 800097e:	f7ff fcf8 	bl	8000372 <INA219_setCalibration>
		  break;
 8000982:	e006      	b.n	8000992 <main+0x102>
		  case 4:
			  INA219_setCalibration(&ina219, 3798);
 8000984:	f640 61d6 	movw	r1, #3798	; 0xed6
 8000988:	4825      	ldr	r0, [pc, #148]	; (8000a20 <main+0x190>)
 800098a:	f7ff fcf2 	bl	8000372 <INA219_setCalibration>
		  break;
 800098e:	e000      	b.n	8000992 <main+0x102>
		  default:

		  break;
 8000990:	bf00      	nop
	  }

	  vshunt = INA219_ReadShuntVolage(&ina219);
 8000992:	4823      	ldr	r0, [pc, #140]	; (8000a20 <main+0x190>)
 8000994:	f7ff fcde 	bl	8000354 <INA219_ReadShuntVolage>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <main+0x1ac>)
 800099e:	801a      	strh	r2, [r3, #0]
	  raw_c = INA219_ReadCurrent_raw(&ina219);
 80009a0:	481f      	ldr	r0, [pc, #124]	; (8000a20 <main+0x190>)
 80009a2:	f7ff fcab 	bl	80002fc <INA219_ReadCurrent_raw>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <main+0x1b0>)
 80009ac:	801a      	strh	r2, [r3, #0]


//	  continue;
	  if (flag_tim7 != 0){
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <main+0x1b4>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d00e      	beq.n	80009d4 <main+0x144>
		  periodo_enc++;
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <main+0x1b8>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <main+0x1b8>)
 80009c0:	701a      	strb	r2, [r3, #0]
		  periodo_impMed++;
 80009c2:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <main+0x1bc>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <main+0x1bc>)
 80009cc:	701a      	strb	r2, [r3, #0]
		  flag_tim7 = 0;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <main+0x1b4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	  } //end if flag_tim7

	  if (periodo_enc > 19){
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <main+0x1b8>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b13      	cmp	r3, #19
 80009da:	d914      	bls.n	8000a06 <main+0x176>
		  lecturaEnc = __HAL_TIM_GET_COUNTER(&htim2);
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <main+0x188>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <main+0x1c0>)
 80009e6:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <main+0x188>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
		  periodo_enc = 0;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <main+0x1b8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]

		  lectura_boton = HAL_GPIO_ReadPin(IN_D4_sw_GPIO_Port, IN_D4_sw_Pin);
 80009f6:	2120      	movs	r1, #32
 80009f8:	4816      	ldr	r0, [pc, #88]	; (8000a54 <main+0x1c4>)
 80009fa:	f001 fcf7 	bl	80023ec <HAL_GPIO_ReadPin>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <main+0x1c8>)
 8000a04:	701a      	strb	r2, [r3, #0]

	  } //end if periodo_enc

	  check_menu();
 8000a06:	f000 f8bd 	bl	8000b84 <check_menu>
	  last_boton = lectura_boton;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <main+0x1c8>)
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <main+0x1cc>)
 8000a10:	701a      	strb	r2, [r3, #0]
	  corriente = INA219_ReadCurrent_float(&ina219);
 8000a12:	e762      	b.n	80008da <main+0x4a>
 8000a14:	2000025c 	.word	0x2000025c
 8000a18:	20000210 	.word	0x20000210
 8000a1c:	200000f8 	.word	0x200000f8
 8000a20:	2000015c 	.word	0x2000015c
 8000a24:	20000164 	.word	0x20000164
 8000a28:	447a0000 	.word	0x447a0000
 8000a2c:	20000170 	.word	0x20000170
 8000a30:	20000174 	.word	0x20000174
 8000a34:	20000008 	.word	0x20000008
 8000a38:	2000016c 	.word	0x2000016c
 8000a3c:	20000168 	.word	0x20000168
 8000a40:	2000016a 	.word	0x2000016a
 8000a44:	20000158 	.word	0x20000158
 8000a48:	20000159 	.word	0x20000159
 8000a4c:	2000015a 	.word	0x2000015a
 8000a50:	20000154 	.word	0x20000154
 8000a54:	48000400 	.word	0x48000400
 8000a58:	20000004 	.word	0x20000004
 8000a5c:	20000005 	.word	0x20000005

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b096      	sub	sp, #88	; 0x58
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a6a:	2228      	movs	r2, #40	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f005 fda4 	bl	80065bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000aa8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000aac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fbb4 	bl	8003220 <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000abe:	f000 f841 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	2102      	movs	r1, #2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 fbdc 	bl	800429c <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000aea:	f000 f82b 	bl	8000b44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8000aee:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000af2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fe02 	bl	8004708 <HAL_RCCEx_PeriphCLKConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b0a:	f000 f81b 	bl	8000b44 <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3758      	adds	r7, #88	; 0x58
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d102      	bne.n	8000b30 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tim7 = 1;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
	}
} //end HAL_TIM_PeriodElapsedCallback()
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40001400 	.word	0x40001400
 8000b40:	20000158 	.word	0x20000158

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <start_menu>:

/////////////////////////////////////////
//         FUNCIONES PUBLICAS          //
/////////////////////////////////////////

void start_menu (void){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	//init_pantalla();
	lcd_CustomChar_create(0, arriba);
 8000b54:	4907      	ldr	r1, [pc, #28]	; (8000b74 <start_menu+0x24>)
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff fe6f 	bl	800083a <lcd_CustomChar_create>
	lcd_CustomChar_create(1, abajo);
 8000b5c:	4906      	ldr	r1, [pc, #24]	; (8000b78 <start_menu+0x28>)
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f7ff fe6b 	bl	800083a <lcd_CustomChar_create>
	init_menuPrincipal();
 8000b64:	f000 f818 	bl	8000b98 <init_menuPrincipal>
	pantallaActual = &pantalla[MENU_PRINCIPAL];
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <start_menu+0x2c>)
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <start_menu+0x30>)
 8000b6c:	601a      	str	r2, [r3, #0]
} //fin start_menu()
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000000c 	.word	0x2000000c
 8000b78:	20000014 	.word	0x20000014
 8000b7c:	20000178 	.word	0x20000178
 8000b80:	2000001c 	.word	0x2000001c

08000b84 <check_menu>:


void check_menu (void){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	pantallaActual->accion();
 8000b88:	4b02      	ldr	r3, [pc, #8]	; (8000b94 <check_menu+0x10>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4798      	blx	r3
} //fin check_menu()
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000178 	.word	0x20000178

08000b98 <init_menuPrincipal>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

void init_menuPrincipal (void){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	lcd_clear();
 8000b9c:	f7ff fd98 	bl	80006d0 <lcd_clear>
	lcd_put_cur(1, 0);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f7ff fdac 	bl	8000700 <lcd_put_cur>
	lcd_send_string("Modo Potencia");
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <init_menuPrincipal+0x3c>)
 8000baa:	f7ff fe31 	bl	8000810 <lcd_send_string>
	lcd_put_cur(1, 1);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff fda5 	bl	8000700 <lcd_put_cur>
	lcd_send_string("Modo Corriente");
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <init_menuPrincipal+0x40>)
 8000bb8:	f7ff fe2a 	bl	8000810 <lcd_send_string>
	cursor = 0;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <init_menuPrincipal+0x44>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
	lcd_put_cur(0, 0);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff fd9b 	bl	8000700 <lcd_put_cur>
	lcd_send_data(0x7E); // ->
 8000bca:	207e      	movs	r0, #126	; 0x7e
 8000bcc:	f7ff fd4c 	bl	8000668 <lcd_send_data>
} //fin init_menuPrincipal()
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	08006ec0 	.word	0x08006ec0
 8000bd8:	08006ed0 	.word	0x08006ed0
 8000bdc:	200001ae 	.word	0x200001ae

08000be0 <init_menuCorriente>:


void init_menuCorriente (void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	lcd_clear();
 8000be4:	f7ff fd74 	bl	80006d0 <lcd_clear>
	lcd_put_cur(1, 0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff fd88 	bl	8000700 <lcd_put_cur>
	sprintf(texto, "C:  %d mA", setPoint_corriente );
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <init_menuCorriente+0x54>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4910      	ldr	r1, [pc, #64]	; (8000c38 <init_menuCorriente+0x58>)
 8000bf8:	4810      	ldr	r0, [pc, #64]	; (8000c3c <init_menuCorriente+0x5c>)
 8000bfa:	f005 fce7 	bl	80065cc <siprintf>
	lcd_send_string(texto);
 8000bfe:	480f      	ldr	r0, [pc, #60]	; (8000c3c <init_menuCorriente+0x5c>)
 8000c00:	f7ff fe06 	bl	8000810 <lcd_send_string>
	lcd_put_cur(1, 1);
 8000c04:	2101      	movs	r1, #1
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fd7a 	bl	8000700 <lcd_put_cur>
	lcd_send_string("INICIAR");
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <init_menuCorriente+0x60>)
 8000c0e:	f7ff fdff 	bl	8000810 <lcd_send_string>
	lcd_put_cur(11, 1);
 8000c12:	2101      	movs	r1, #1
 8000c14:	200b      	movs	r0, #11
 8000c16:	f7ff fd73 	bl	8000700 <lcd_put_cur>
	lcd_send_string("ATRAS");
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <init_menuCorriente+0x64>)
 8000c1c:	f7ff fdf8 	bl	8000810 <lcd_send_string>
	lcd_put_cur(0, 0);
 8000c20:	2100      	movs	r1, #0
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fd6c 	bl	8000700 <lcd_put_cur>
	lcd_send_data(0x7E); // ->
 8000c28:	207e      	movs	r0, #126	; 0x7e
 8000c2a:	f7ff fd1d 	bl	8000668 <lcd_send_data>
} //fin init_menuCorriente()
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200001b4 	.word	0x200001b4
 8000c38:	08006ee0 	.word	0x08006ee0
 8000c3c:	2000017c 	.word	0x2000017c
 8000c40:	08006eec 	.word	0x08006eec
 8000c44:	08006ef4 	.word	0x08006ef4

08000c48 <init_menuPotencia>:


void init_menuPotencia (void){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	lcd_clear();
 8000c4c:	f7ff fd40 	bl	80006d0 <lcd_clear>
	lcd_put_cur(1, 0);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff fd54 	bl	8000700 <lcd_put_cur>
	sprintf(texto, "P:  %d mW", setPoint_potencia);
 8000c58:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <init_menuPotencia+0x54>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4910      	ldr	r1, [pc, #64]	; (8000ca0 <init_menuPotencia+0x58>)
 8000c60:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <init_menuPotencia+0x5c>)
 8000c62:	f005 fcb3 	bl	80065cc <siprintf>
	lcd_send_string(texto);
 8000c66:	480f      	ldr	r0, [pc, #60]	; (8000ca4 <init_menuPotencia+0x5c>)
 8000c68:	f7ff fdd2 	bl	8000810 <lcd_send_string>
	lcd_put_cur(1, 1);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff fd46 	bl	8000700 <lcd_put_cur>
	lcd_send_string("INICIAR");
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <init_menuPotencia+0x60>)
 8000c76:	f7ff fdcb 	bl	8000810 <lcd_send_string>
	lcd_put_cur(11, 1);
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	200b      	movs	r0, #11
 8000c7e:	f7ff fd3f 	bl	8000700 <lcd_put_cur>
	lcd_send_string("ATRAS");
 8000c82:	480a      	ldr	r0, [pc, #40]	; (8000cac <init_menuPotencia+0x64>)
 8000c84:	f7ff fdc4 	bl	8000810 <lcd_send_string>
	lcd_put_cur(0, 0);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fd38 	bl	8000700 <lcd_put_cur>
	lcd_send_data(0x7E); // ->
 8000c90:	207e      	movs	r0, #126	; 0x7e
 8000c92:	f7ff fce9 	bl	8000668 <lcd_send_data>
} //fin init_menuPotencia()
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001b0 	.word	0x200001b0
 8000ca0:	08006efc 	.word	0x08006efc
 8000ca4:	2000017c 	.word	0x2000017c
 8000ca8:	08006eec 	.word	0x08006eec
 8000cac:	08006ef4 	.word	0x08006ef4

08000cb0 <init_medicionCorriente>:


void init_medicionCorriente (void){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	lcd_clear();
 8000cb4:	f7ff fd0c 	bl	80006d0 <lcd_clear>
	lcd_put_cur(0, 0);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fd20 	bl	8000700 <lcd_put_cur>
	sprintf(texto, "set: %d mA", setPoint_corriente);
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <init_medicionCorriente+0x74>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4918      	ldr	r1, [pc, #96]	; (8000d28 <init_medicionCorriente+0x78>)
 8000cc8:	4818      	ldr	r0, [pc, #96]	; (8000d2c <init_medicionCorriente+0x7c>)
 8000cca:	f005 fc7f 	bl	80065cc <siprintf>
	lcd_send_string(texto);
 8000cce:	4817      	ldr	r0, [pc, #92]	; (8000d2c <init_medicionCorriente+0x7c>)
 8000cd0:	f7ff fd9e 	bl	8000810 <lcd_send_string>
	lcd_put_cur(0, 1);
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fd12 	bl	8000700 <lcd_put_cur>
	sprintf(texto, "med: %d.%dmA", medida_corriente / 10, medida_corriente % 10 );
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <init_medicionCorriente+0x80>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <init_medicionCorriente+0x84>)
 8000ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce6:	1092      	asrs	r2, r2, #2
 8000ce8:	17db      	asrs	r3, r3, #31
 8000cea:	1ad0      	subs	r0, r2, r3
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <init_medicionCorriente+0x80>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <init_medicionCorriente+0x84>)
 8000cf2:	fb83 1302 	smull	r1, r3, r3, r2
 8000cf6:	1099      	asrs	r1, r3, #2
 8000cf8:	17d3      	asrs	r3, r2, #31
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	440b      	add	r3, r1
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	1ad1      	subs	r1, r2, r3
 8000d06:	460b      	mov	r3, r1
 8000d08:	4602      	mov	r2, r0
 8000d0a:	490b      	ldr	r1, [pc, #44]	; (8000d38 <init_medicionCorriente+0x88>)
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <init_medicionCorriente+0x7c>)
 8000d0e:	f005 fc5d 	bl	80065cc <siprintf>
	lcd_send_string(texto);
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <init_medicionCorriente+0x7c>)
 8000d14:	f7ff fd7c 	bl	8000810 <lcd_send_string>
	periodo_impMed = 0;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <init_medicionCorriente+0x8c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
} //fin init_medicionCorriente()
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001b4 	.word	0x200001b4
 8000d28:	08006f08 	.word	0x08006f08
 8000d2c:	2000017c 	.word	0x2000017c
 8000d30:	200001bc 	.word	0x200001bc
 8000d34:	66666667 	.word	0x66666667
 8000d38:	08006f14 	.word	0x08006f14
 8000d3c:	2000015a 	.word	0x2000015a

08000d40 <init_medicionPotencia>:


void init_medicionPotencia (void){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	lcd_clear();
 8000d44:	f7ff fcc4 	bl	80006d0 <lcd_clear>
	lcd_put_cur(0, 0);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fcd8 	bl	8000700 <lcd_put_cur>
	sprintf(texto, "set: %d.%dmW", setPoint_potencia / 10, setPoint_potencia % 10 );
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <init_medicionPotencia+0x94>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <init_medicionPotencia+0x98>)
 8000d56:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5a:	1092      	asrs	r2, r2, #2
 8000d5c:	17db      	asrs	r3, r3, #31
 8000d5e:	1ad0      	subs	r0, r2, r3
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <init_medicionPotencia+0x94>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <init_medicionPotencia+0x98>)
 8000d66:	fb83 1302 	smull	r1, r3, r3, r2
 8000d6a:	1099      	asrs	r1, r3, #2
 8000d6c:	17d3      	asrs	r3, r2, #31
 8000d6e:	1ac9      	subs	r1, r1, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad1      	subs	r1, r2, r3
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	4917      	ldr	r1, [pc, #92]	; (8000ddc <init_medicionPotencia+0x9c>)
 8000d80:	4817      	ldr	r0, [pc, #92]	; (8000de0 <init_medicionPotencia+0xa0>)
 8000d82:	f005 fc23 	bl	80065cc <siprintf>
	lcd_send_string(texto);
 8000d86:	4816      	ldr	r0, [pc, #88]	; (8000de0 <init_medicionPotencia+0xa0>)
 8000d88:	f7ff fd42 	bl	8000810 <lcd_send_string>
	lcd_put_cur(0, 1);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fcb6 	bl	8000700 <lcd_put_cur>
	sprintf(texto, "med: %d.%dmW", medida_potencia / 10, medida_potencia % 10 );
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <init_medicionPotencia+0xa4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <init_medicionPotencia+0x98>)
 8000d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d9e:	1092      	asrs	r2, r2, #2
 8000da0:	17db      	asrs	r3, r3, #31
 8000da2:	1ad0      	subs	r0, r2, r3
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <init_medicionPotencia+0xa4>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <init_medicionPotencia+0x98>)
 8000daa:	fb83 1302 	smull	r1, r3, r3, r2
 8000dae:	1099      	asrs	r1, r3, #2
 8000db0:	17d3      	asrs	r3, r2, #31
 8000db2:	1ac9      	subs	r1, r1, r3
 8000db4:	460b      	mov	r3, r1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	440b      	add	r3, r1
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	1ad1      	subs	r1, r2, r3
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	4909      	ldr	r1, [pc, #36]	; (8000de8 <init_medicionPotencia+0xa8>)
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <init_medicionPotencia+0xa0>)
 8000dc6:	f005 fc01 	bl	80065cc <siprintf>
	lcd_send_string(texto);
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <init_medicionPotencia+0xa0>)
 8000dcc:	f7ff fd20 	bl	8000810 <lcd_send_string>

} //fin init_medicionPotencia()
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200001b0 	.word	0x200001b0
 8000dd8:	66666667 	.word	0x66666667
 8000ddc:	08006f24 	.word	0x08006f24
 8000de0:	2000017c 	.word	0x2000017c
 8000de4:	200001b8 	.word	0x200001b8
 8000de8:	08006f34 	.word	0x08006f34

08000dec <acc_menuPrincipal>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

void acc_menuPrincipal (void){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	switch (cursor){
 8000df0:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <acc_menuPrincipal+0xcc>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <acc_menuPrincipal+0x12>
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d02a      	beq.n	8000e52 <acc_menuPrincipal+0x66>
				pantallaActual = &pantalla [MENU_CORRIENTE];
				pantallaActual->inicia_menu();
			}
		break;
		default:
		break;
 8000dfc:	e059      	b.n	8000eb2 <acc_menuPrincipal+0xc6>
			if (lecturaEnc > 0){
 8000dfe:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <acc_menuPrincipal+0xd0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	dd10      	ble.n	8000e28 <acc_menuPrincipal+0x3c>
				cursor = 1;
 8000e06:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <acc_menuPrincipal+0xcc>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 1);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fc76 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8000e14:	207e      	movs	r0, #126	; 0x7e
 8000e16:	f7ff fc27 	bl	8000668 <lcd_send_data>
				lcd_put_cur(0, 0);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fc6f 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8000e22:	4827      	ldr	r0, [pc, #156]	; (8000ec0 <acc_menuPrincipal+0xd4>)
 8000e24:	f7ff fcf4 	bl	8000810 <lcd_send_string>
			if (PULSO != 0){
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <acc_menuPrincipal+0xd8>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d005      	beq.n	8000e3c <acc_menuPrincipal+0x50>
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <acc_menuPrincipal+0xdc>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <acc_menuPrincipal+0x50>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <acc_menuPrincipal+0x52>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d034      	beq.n	8000eac <acc_menuPrincipal+0xc0>
				pantallaActual = &pantalla [MENU_POTENCIA];
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <acc_menuPrincipal+0xe0>)
 8000e44:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <acc_menuPrincipal+0xe4>)
 8000e46:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <acc_menuPrincipal+0xe0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4798      	blx	r3
		break;
 8000e50:	e02c      	b.n	8000eac <acc_menuPrincipal+0xc0>
			if (lecturaEnc < 0){
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <acc_menuPrincipal+0xd0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	da10      	bge.n	8000e7c <acc_menuPrincipal+0x90>
				cursor = 0;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <acc_menuPrincipal+0xcc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 0);
 8000e60:	2100      	movs	r1, #0
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fc4c 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8000e68:	207e      	movs	r0, #126	; 0x7e
 8000e6a:	f7ff fbfd 	bl	8000668 <lcd_send_data>
				lcd_put_cur(0, 1);
 8000e6e:	2101      	movs	r1, #1
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff fc45 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8000e76:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <acc_menuPrincipal+0xd4>)
 8000e78:	f7ff fcca 	bl	8000810 <lcd_send_string>
			if (PULSO != 0){
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <acc_menuPrincipal+0xd8>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d005      	beq.n	8000e90 <acc_menuPrincipal+0xa4>
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <acc_menuPrincipal+0xdc>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <acc_menuPrincipal+0xa4>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <acc_menuPrincipal+0xa6>
 8000e90:	2300      	movs	r3, #0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00c      	beq.n	8000eb0 <acc_menuPrincipal+0xc4>
				cursor = 0;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <acc_menuPrincipal+0xcc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
				pantallaActual = &pantalla [MENU_CORRIENTE];
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <acc_menuPrincipal+0xe0>)
 8000e9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <acc_menuPrincipal+0xe8>)
 8000ea0:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <acc_menuPrincipal+0xe0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4798      	blx	r3
		break;
 8000eaa:	e001      	b.n	8000eb0 <acc_menuPrincipal+0xc4>
		break;
 8000eac:	bf00      	nop
 8000eae:	e000      	b.n	8000eb2 <acc_menuPrincipal+0xc6>
		break;
 8000eb0:	bf00      	nop
	} //end switch cursor

} //fin acc_menuPrincipal()
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200001ae 	.word	0x200001ae
 8000ebc:	20000154 	.word	0x20000154
 8000ec0:	08006f44 	.word	0x08006f44
 8000ec4:	20000005 	.word	0x20000005
 8000ec8:	20000004 	.word	0x20000004
 8000ecc:	20000178 	.word	0x20000178
 8000ed0:	20000028 	.word	0x20000028
 8000ed4:	20000034 	.word	0x20000034

08000ed8 <acc_menuCorriente>:


void acc_menuCorriente (void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	switch (cursor){
 8000edc:	4b9d      	ldr	r3, [pc, #628]	; (8001154 <acc_menuCorriente+0x27c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	f000 80f5 	beq.w	80010d0 <acc_menuCorriente+0x1f8>
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	f300 8129 	bgt.w	800113e <acc_menuCorriente+0x266>
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <acc_menuCorriente+0x20>
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	f000 809f 	beq.w	8001034 <acc_menuCorriente+0x15c>
				pantallaActual = &pantalla [MENU_PRINCIPAL];
				pantallaActual->inicia_menu();
			}
		break;
		default:
		break;
 8000ef6:	e122      	b.n	800113e <acc_menuCorriente+0x266>
			if (flag_setValor != 0){
 8000ef8:	4b97      	ldr	r3, [pc, #604]	; (8001158 <acc_menuCorriente+0x280>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d053      	beq.n	8000fa8 <acc_menuCorriente+0xd0>
				if (PULSO != 0){
 8000f00:	4b96      	ldr	r3, [pc, #600]	; (800115c <acc_menuCorriente+0x284>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <acc_menuCorriente+0x3c>
 8000f08:	4b95      	ldr	r3, [pc, #596]	; (8001160 <acc_menuCorriente+0x288>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <acc_menuCorriente+0x3c>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <acc_menuCorriente+0x3e>
 8000f14:	2300      	movs	r3, #0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d017      	beq.n	8000f4a <acc_menuCorriente+0x72>
					lcd_put_cur(0, 0);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fbef 	bl	8000700 <lcd_put_cur>
					lcd_send_data(0x7E); // ->
 8000f22:	207e      	movs	r0, #126	; 0x7e
 8000f24:	f7ff fba0 	bl	8000668 <lcd_send_data>
					lcd_put_cur(4, 0);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f7ff fbe8 	bl	8000700 <lcd_put_cur>
					lcd_send_string(" ");
 8000f30:	488c      	ldr	r0, [pc, #560]	; (8001164 <acc_menuCorriente+0x28c>)
 8000f32:	f7ff fc6d 	bl	8000810 <lcd_send_string>
					lcd_put_cur(14, 0);
 8000f36:	2100      	movs	r1, #0
 8000f38:	200e      	movs	r0, #14
 8000f3a:	f7ff fbe1 	bl	8000700 <lcd_put_cur>
					lcd_send_string(" ");
 8000f3e:	4889      	ldr	r0, [pc, #548]	; (8001164 <acc_menuCorriente+0x28c>)
 8000f40:	f7ff fc66 	bl	8000810 <lcd_send_string>
					flag_setValor = 0;
 8000f44:	4b84      	ldr	r3, [pc, #528]	; (8001158 <acc_menuCorriente+0x280>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
				if (lecturaEnc != 0){
 8000f4a:	4b87      	ldr	r3, [pc, #540]	; (8001168 <acc_menuCorriente+0x290>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80f7 	beq.w	8001142 <acc_menuCorriente+0x26a>
					if (abs(lecturaEnc) > 10) lecturaEnc *= 10;
 8000f54:	4b84      	ldr	r3, [pc, #528]	; (8001168 <acc_menuCorriente+0x290>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bfb8      	it	lt
 8000f5c:	425b      	neglt	r3, r3
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	dd08      	ble.n	8000f74 <acc_menuCorriente+0x9c>
 8000f62:	4b81      	ldr	r3, [pc, #516]	; (8001168 <acc_menuCorriente+0x290>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b7d      	ldr	r3, [pc, #500]	; (8001168 <acc_menuCorriente+0x290>)
 8000f72:	601a      	str	r2, [r3, #0]
					setPoint_corriente += (lecturaEnc >> 1);
 8000f74:	4b7c      	ldr	r3, [pc, #496]	; (8001168 <acc_menuCorriente+0x290>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	105a      	asrs	r2, r3, #1
 8000f7a:	4b7c      	ldr	r3, [pc, #496]	; (800116c <acc_menuCorriente+0x294>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a7a      	ldr	r2, [pc, #488]	; (800116c <acc_menuCorriente+0x294>)
 8000f82:	6013      	str	r3, [r2, #0]
					lcd_put_cur(5, 0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	2005      	movs	r0, #5
 8000f88:	f7ff fbba 	bl	8000700 <lcd_put_cur>
					sprintf(texto, "%d mA", setPoint_corriente);
 8000f8c:	4b77      	ldr	r3, [pc, #476]	; (800116c <acc_menuCorriente+0x294>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4977      	ldr	r1, [pc, #476]	; (8001170 <acc_menuCorriente+0x298>)
 8000f94:	4877      	ldr	r0, [pc, #476]	; (8001174 <acc_menuCorriente+0x29c>)
 8000f96:	f005 fb19 	bl	80065cc <siprintf>
					lcd_send_string(texto);
 8000f9a:	4876      	ldr	r0, [pc, #472]	; (8001174 <acc_menuCorriente+0x29c>)
 8000f9c:	f7ff fc38 	bl	8000810 <lcd_send_string>
					lecturaEnc = 0;
 8000fa0:	4b71      	ldr	r3, [pc, #452]	; (8001168 <acc_menuCorriente+0x290>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
				break;
 8000fa6:	e0cc      	b.n	8001142 <acc_menuCorriente+0x26a>
			if (lecturaEnc > 0){
 8000fa8:	4b6f      	ldr	r3, [pc, #444]	; (8001168 <acc_menuCorriente+0x290>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	dd1a      	ble.n	8000fe6 <acc_menuCorriente+0x10e>
				cursor = 1;
 8000fb0:	4b68      	ldr	r3, [pc, #416]	; (8001154 <acc_menuCorriente+0x27c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 1);
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fba1 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8000fbe:	207e      	movs	r0, #126	; 0x7e
 8000fc0:	f7ff fb52 	bl	8000668 <lcd_send_data>
				lcd_put_cur(0, 0);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff fb9a 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8000fcc:	4865      	ldr	r0, [pc, #404]	; (8001164 <acc_menuCorriente+0x28c>)
 8000fce:	f7ff fc1f 	bl	8000810 <lcd_send_string>
				lcd_put_cur(10, 1);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	200a      	movs	r0, #10
 8000fd6:	f7ff fb93 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8000fda:	4862      	ldr	r0, [pc, #392]	; (8001164 <acc_menuCorriente+0x28c>)
 8000fdc:	f7ff fc18 	bl	8000810 <lcd_send_string>
				lecturaEnc = 0;
 8000fe0:	4b61      	ldr	r3, [pc, #388]	; (8001168 <acc_menuCorriente+0x290>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
			if (PULSO != 0){
 8000fe6:	4b5d      	ldr	r3, [pc, #372]	; (800115c <acc_menuCorriente+0x284>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d005      	beq.n	8000ffa <acc_menuCorriente+0x122>
 8000fee:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <acc_menuCorriente+0x288>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <acc_menuCorriente+0x122>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <acc_menuCorriente+0x124>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80a2 	beq.w	8001146 <acc_menuCorriente+0x26e>
				lcd_put_cur(0, 0);
 8001002:	2100      	movs	r1, #0
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fb7b 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 800100a:	4856      	ldr	r0, [pc, #344]	; (8001164 <acc_menuCorriente+0x28c>)
 800100c:	f7ff fc00 	bl	8000810 <lcd_send_string>
				lcd_put_cur(4, 0);
 8001010:	2100      	movs	r1, #0
 8001012:	2004      	movs	r0, #4
 8001014:	f7ff fb74 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7F); // <-
 8001018:	207f      	movs	r0, #127	; 0x7f
 800101a:	f7ff fb25 	bl	8000668 <lcd_send_data>
				lcd_put_cur(14, 0);
 800101e:	2100      	movs	r1, #0
 8001020:	200e      	movs	r0, #14
 8001022:	f7ff fb6d 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8001026:	207e      	movs	r0, #126	; 0x7e
 8001028:	f7ff fb1e 	bl	8000668 <lcd_send_data>
				flag_setValor = 1;
 800102c:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <acc_menuCorriente+0x280>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
		break;
 8001032:	e088      	b.n	8001146 <acc_menuCorriente+0x26e>
			if (lecturaEnc > 0){
 8001034:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <acc_menuCorriente+0x290>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	dd1a      	ble.n	8001072 <acc_menuCorriente+0x19a>
				cursor = 2;
 800103c:	4b45      	ldr	r3, [pc, #276]	; (8001154 <acc_menuCorriente+0x27c>)
 800103e:	2202      	movs	r2, #2
 8001040:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(10, 1);
 8001042:	2101      	movs	r1, #1
 8001044:	200a      	movs	r0, #10
 8001046:	f7ff fb5b 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 800104a:	207e      	movs	r0, #126	; 0x7e
 800104c:	f7ff fb0c 	bl	8000668 <lcd_send_data>
				lcd_put_cur(0, 0);
 8001050:	2100      	movs	r1, #0
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fb54 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8001058:	4842      	ldr	r0, [pc, #264]	; (8001164 <acc_menuCorriente+0x28c>)
 800105a:	f7ff fbd9 	bl	8000810 <lcd_send_string>
				lcd_put_cur(0, 1);
 800105e:	2101      	movs	r1, #1
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fb4d 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8001066:	483f      	ldr	r0, [pc, #252]	; (8001164 <acc_menuCorriente+0x28c>)
 8001068:	f7ff fbd2 	bl	8000810 <lcd_send_string>
				lecturaEnc = 0;
 800106c:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <acc_menuCorriente+0x290>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
			if (lecturaEnc < 0){
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <acc_menuCorriente+0x290>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	da1a      	bge.n	80010b0 <acc_menuCorriente+0x1d8>
				cursor = 0;
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <acc_menuCorriente+0x27c>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 0);
 8001080:	2100      	movs	r1, #0
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fb3c 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8001088:	207e      	movs	r0, #126	; 0x7e
 800108a:	f7ff faed 	bl	8000668 <lcd_send_data>
				lcd_put_cur(0, 1);
 800108e:	2101      	movs	r1, #1
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fb35 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8001096:	4833      	ldr	r0, [pc, #204]	; (8001164 <acc_menuCorriente+0x28c>)
 8001098:	f7ff fbba 	bl	8000810 <lcd_send_string>
				lcd_put_cur(10, 1);
 800109c:	2101      	movs	r1, #1
 800109e:	200a      	movs	r0, #10
 80010a0:	f7ff fb2e 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 80010a4:	482f      	ldr	r0, [pc, #188]	; (8001164 <acc_menuCorriente+0x28c>)
 80010a6:	f7ff fbb3 	bl	8000810 <lcd_send_string>
				lecturaEnc = 0;
 80010aa:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <acc_menuCorriente+0x290>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
			if (PULSO){
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <acc_menuCorriente+0x284>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d048      	beq.n	800114a <acc_menuCorriente+0x272>
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <acc_menuCorriente+0x288>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d144      	bne.n	800114a <acc_menuCorriente+0x272>
				pantallaActual = &pantalla[MEDICION_CORRIENTE];
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <acc_menuCorriente+0x2a0>)
 80010c2:	4a2e      	ldr	r2, [pc, #184]	; (800117c <acc_menuCorriente+0x2a4>)
 80010c4:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <acc_menuCorriente+0x2a0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4798      	blx	r3
		break;
 80010ce:	e03c      	b.n	800114a <acc_menuCorriente+0x272>
			if (lecturaEnc < 0){
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <acc_menuCorriente+0x290>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	da1a      	bge.n	800110e <acc_menuCorriente+0x236>
				cursor = 1;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <acc_menuCorriente+0x27c>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 1);
 80010de:	2101      	movs	r1, #1
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fb0d 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 80010e6:	207e      	movs	r0, #126	; 0x7e
 80010e8:	f7ff fabe 	bl	8000668 <lcd_send_data>
				lcd_put_cur(0, 0);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff fb06 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 80010f4:	481b      	ldr	r0, [pc, #108]	; (8001164 <acc_menuCorriente+0x28c>)
 80010f6:	f7ff fb8b 	bl	8000810 <lcd_send_string>
				lcd_put_cur(10, 1);
 80010fa:	2101      	movs	r1, #1
 80010fc:	200a      	movs	r0, #10
 80010fe:	f7ff faff 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8001102:	4818      	ldr	r0, [pc, #96]	; (8001164 <acc_menuCorriente+0x28c>)
 8001104:	f7ff fb84 	bl	8000810 <lcd_send_string>
				lecturaEnc = 0;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <acc_menuCorriente+0x290>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
			if (PULSO != 0){
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <acc_menuCorriente+0x284>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <acc_menuCorriente+0x24a>
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <acc_menuCorriente+0x288>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <acc_menuCorriente+0x24a>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <acc_menuCorriente+0x24c>
 8001122:	2300      	movs	r3, #0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d012      	beq.n	800114e <acc_menuCorriente+0x276>
				cursor = 0;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <acc_menuCorriente+0x27c>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
				pantallaActual = &pantalla [MENU_PRINCIPAL];
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <acc_menuCorriente+0x2a0>)
 8001130:	4a13      	ldr	r2, [pc, #76]	; (8001180 <acc_menuCorriente+0x2a8>)
 8001132:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <acc_menuCorriente+0x2a0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4798      	blx	r3
		break;
 800113c:	e007      	b.n	800114e <acc_menuCorriente+0x276>
		break;
 800113e:	bf00      	nop
 8001140:	e006      	b.n	8001150 <acc_menuCorriente+0x278>
				break;
 8001142:	bf00      	nop
 8001144:	e004      	b.n	8001150 <acc_menuCorriente+0x278>
		break;
 8001146:	bf00      	nop
 8001148:	e002      	b.n	8001150 <acc_menuCorriente+0x278>
		break;
 800114a:	bf00      	nop
 800114c:	e000      	b.n	8001150 <acc_menuCorriente+0x278>
		break;
 800114e:	bf00      	nop
	} //end switch cursor
} //fin acc_menuCorriente()
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001ae 	.word	0x200001ae
 8001158:	200001af 	.word	0x200001af
 800115c:	20000005 	.word	0x20000005
 8001160:	20000004 	.word	0x20000004
 8001164:	08006f44 	.word	0x08006f44
 8001168:	20000154 	.word	0x20000154
 800116c:	200001b4 	.word	0x200001b4
 8001170:	08006f48 	.word	0x08006f48
 8001174:	2000017c 	.word	0x2000017c
 8001178:	20000178 	.word	0x20000178
 800117c:	2000004c 	.word	0x2000004c
 8001180:	2000001c 	.word	0x2000001c

08001184 <acc_menuPotencia>:


void acc_menuPotencia (void){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	switch (cursor){
 8001188:	4b9d      	ldr	r3, [pc, #628]	; (8001400 <acc_menuPotencia+0x27c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b02      	cmp	r3, #2
 800118e:	f000 80f5 	beq.w	800137c <acc_menuPotencia+0x1f8>
 8001192:	2b02      	cmp	r3, #2
 8001194:	f300 8129 	bgt.w	80013ea <acc_menuPotencia+0x266>
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <acc_menuPotencia+0x20>
 800119c:	2b01      	cmp	r3, #1
 800119e:	f000 809f 	beq.w	80012e0 <acc_menuPotencia+0x15c>
				pantallaActual = &pantalla [MENU_PRINCIPAL];
				pantallaActual->inicia_menu();
			}
		break;
		default:
		break;
 80011a2:	e122      	b.n	80013ea <acc_menuPotencia+0x266>
			if (flag_setValor != 0){
 80011a4:	4b97      	ldr	r3, [pc, #604]	; (8001404 <acc_menuPotencia+0x280>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d053      	beq.n	8001254 <acc_menuPotencia+0xd0>
				if (PULSO != 0){
 80011ac:	4b96      	ldr	r3, [pc, #600]	; (8001408 <acc_menuPotencia+0x284>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <acc_menuPotencia+0x3c>
 80011b4:	4b95      	ldr	r3, [pc, #596]	; (800140c <acc_menuPotencia+0x288>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <acc_menuPotencia+0x3c>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <acc_menuPotencia+0x3e>
 80011c0:	2300      	movs	r3, #0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d017      	beq.n	80011f6 <acc_menuPotencia+0x72>
					lcd_put_cur(0, 0);
 80011c6:	2100      	movs	r1, #0
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fa99 	bl	8000700 <lcd_put_cur>
					lcd_send_data(0x7E); // ->
 80011ce:	207e      	movs	r0, #126	; 0x7e
 80011d0:	f7ff fa4a 	bl	8000668 <lcd_send_data>
					lcd_put_cur(4, 0);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2004      	movs	r0, #4
 80011d8:	f7ff fa92 	bl	8000700 <lcd_put_cur>
					lcd_send_string(" ");
 80011dc:	488c      	ldr	r0, [pc, #560]	; (8001410 <acc_menuPotencia+0x28c>)
 80011de:	f7ff fb17 	bl	8000810 <lcd_send_string>
					lcd_put_cur(14, 0);
 80011e2:	2100      	movs	r1, #0
 80011e4:	200e      	movs	r0, #14
 80011e6:	f7ff fa8b 	bl	8000700 <lcd_put_cur>
					lcd_send_string(" ");
 80011ea:	4889      	ldr	r0, [pc, #548]	; (8001410 <acc_menuPotencia+0x28c>)
 80011ec:	f7ff fb10 	bl	8000810 <lcd_send_string>
					flag_setValor = 0;
 80011f0:	4b84      	ldr	r3, [pc, #528]	; (8001404 <acc_menuPotencia+0x280>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
				if (lecturaEnc != 0){
 80011f6:	4b87      	ldr	r3, [pc, #540]	; (8001414 <acc_menuPotencia+0x290>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80f7 	beq.w	80013ee <acc_menuPotencia+0x26a>
					if (abs(lecturaEnc) > 10) lecturaEnc *= 10;
 8001200:	4b84      	ldr	r3, [pc, #528]	; (8001414 <acc_menuPotencia+0x290>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	bfb8      	it	lt
 8001208:	425b      	neglt	r3, r3
 800120a:	2b0a      	cmp	r3, #10
 800120c:	dd08      	ble.n	8001220 <acc_menuPotencia+0x9c>
 800120e:	4b81      	ldr	r3, [pc, #516]	; (8001414 <acc_menuPotencia+0x290>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	461a      	mov	r2, r3
 800121c:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <acc_menuPotencia+0x290>)
 800121e:	601a      	str	r2, [r3, #0]
					setPoint_potencia += (lecturaEnc >> 1);
 8001220:	4b7c      	ldr	r3, [pc, #496]	; (8001414 <acc_menuPotencia+0x290>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	105a      	asrs	r2, r3, #1
 8001226:	4b7c      	ldr	r3, [pc, #496]	; (8001418 <acc_menuPotencia+0x294>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a7a      	ldr	r2, [pc, #488]	; (8001418 <acc_menuPotencia+0x294>)
 800122e:	6013      	str	r3, [r2, #0]
					lcd_put_cur(5, 0);
 8001230:	2100      	movs	r1, #0
 8001232:	2005      	movs	r0, #5
 8001234:	f7ff fa64 	bl	8000700 <lcd_put_cur>
					sprintf(texto, "%d mW", setPoint_potencia);
 8001238:	4b77      	ldr	r3, [pc, #476]	; (8001418 <acc_menuPotencia+0x294>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4977      	ldr	r1, [pc, #476]	; (800141c <acc_menuPotencia+0x298>)
 8001240:	4877      	ldr	r0, [pc, #476]	; (8001420 <acc_menuPotencia+0x29c>)
 8001242:	f005 f9c3 	bl	80065cc <siprintf>
					lcd_send_string(texto);
 8001246:	4876      	ldr	r0, [pc, #472]	; (8001420 <acc_menuPotencia+0x29c>)
 8001248:	f7ff fae2 	bl	8000810 <lcd_send_string>
					lecturaEnc = 0;
 800124c:	4b71      	ldr	r3, [pc, #452]	; (8001414 <acc_menuPotencia+0x290>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
				break;
 8001252:	e0cc      	b.n	80013ee <acc_menuPotencia+0x26a>
			if (lecturaEnc > 0){
 8001254:	4b6f      	ldr	r3, [pc, #444]	; (8001414 <acc_menuPotencia+0x290>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	dd1a      	ble.n	8001292 <acc_menuPotencia+0x10e>
				cursor = 1;
 800125c:	4b68      	ldr	r3, [pc, #416]	; (8001400 <acc_menuPotencia+0x27c>)
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 1);
 8001262:	2101      	movs	r1, #1
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fa4b 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 800126a:	207e      	movs	r0, #126	; 0x7e
 800126c:	f7ff f9fc 	bl	8000668 <lcd_send_data>
				lcd_put_cur(0, 0);
 8001270:	2100      	movs	r1, #0
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fa44 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8001278:	4865      	ldr	r0, [pc, #404]	; (8001410 <acc_menuPotencia+0x28c>)
 800127a:	f7ff fac9 	bl	8000810 <lcd_send_string>
				lcd_put_cur(10, 1);
 800127e:	2101      	movs	r1, #1
 8001280:	200a      	movs	r0, #10
 8001282:	f7ff fa3d 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8001286:	4862      	ldr	r0, [pc, #392]	; (8001410 <acc_menuPotencia+0x28c>)
 8001288:	f7ff fac2 	bl	8000810 <lcd_send_string>
				lecturaEnc = 0;
 800128c:	4b61      	ldr	r3, [pc, #388]	; (8001414 <acc_menuPotencia+0x290>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
			if (PULSO != 0){
 8001292:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <acc_menuPotencia+0x284>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <acc_menuPotencia+0x122>
 800129a:	4b5c      	ldr	r3, [pc, #368]	; (800140c <acc_menuPotencia+0x288>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <acc_menuPotencia+0x122>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <acc_menuPotencia+0x124>
 80012a6:	2300      	movs	r3, #0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80a2 	beq.w	80013f2 <acc_menuPotencia+0x26e>
				lcd_put_cur(0, 0);
 80012ae:	2100      	movs	r1, #0
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fa25 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 80012b6:	4856      	ldr	r0, [pc, #344]	; (8001410 <acc_menuPotencia+0x28c>)
 80012b8:	f7ff faaa 	bl	8000810 <lcd_send_string>
				lcd_put_cur(4, 0);
 80012bc:	2100      	movs	r1, #0
 80012be:	2004      	movs	r0, #4
 80012c0:	f7ff fa1e 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7F); // <-
 80012c4:	207f      	movs	r0, #127	; 0x7f
 80012c6:	f7ff f9cf 	bl	8000668 <lcd_send_data>
				lcd_put_cur(14, 0);
 80012ca:	2100      	movs	r1, #0
 80012cc:	200e      	movs	r0, #14
 80012ce:	f7ff fa17 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 80012d2:	207e      	movs	r0, #126	; 0x7e
 80012d4:	f7ff f9c8 	bl	8000668 <lcd_send_data>
				flag_setValor = 1;
 80012d8:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <acc_menuPotencia+0x280>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
		break;
 80012de:	e088      	b.n	80013f2 <acc_menuPotencia+0x26e>
			if (lecturaEnc > 0){
 80012e0:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <acc_menuPotencia+0x290>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	dd1a      	ble.n	800131e <acc_menuPotencia+0x19a>
				cursor = 2;
 80012e8:	4b45      	ldr	r3, [pc, #276]	; (8001400 <acc_menuPotencia+0x27c>)
 80012ea:	2202      	movs	r2, #2
 80012ec:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(10, 1);
 80012ee:	2101      	movs	r1, #1
 80012f0:	200a      	movs	r0, #10
 80012f2:	f7ff fa05 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 80012f6:	207e      	movs	r0, #126	; 0x7e
 80012f8:	f7ff f9b6 	bl	8000668 <lcd_send_data>
				lcd_put_cur(0, 0);
 80012fc:	2100      	movs	r1, #0
 80012fe:	2000      	movs	r0, #0
 8001300:	f7ff f9fe 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8001304:	4842      	ldr	r0, [pc, #264]	; (8001410 <acc_menuPotencia+0x28c>)
 8001306:	f7ff fa83 	bl	8000810 <lcd_send_string>
				lcd_put_cur(0, 1);
 800130a:	2101      	movs	r1, #1
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff f9f7 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8001312:	483f      	ldr	r0, [pc, #252]	; (8001410 <acc_menuPotencia+0x28c>)
 8001314:	f7ff fa7c 	bl	8000810 <lcd_send_string>
				lecturaEnc = 0;
 8001318:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <acc_menuPotencia+0x290>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
			if (lecturaEnc < 0){
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <acc_menuPotencia+0x290>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	da1a      	bge.n	800135c <acc_menuPotencia+0x1d8>
				cursor = 0;
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <acc_menuPotencia+0x27c>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 0);
 800132c:	2100      	movs	r1, #0
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff f9e6 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8001334:	207e      	movs	r0, #126	; 0x7e
 8001336:	f7ff f997 	bl	8000668 <lcd_send_data>
				lcd_put_cur(0, 1);
 800133a:	2101      	movs	r1, #1
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff f9df 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8001342:	4833      	ldr	r0, [pc, #204]	; (8001410 <acc_menuPotencia+0x28c>)
 8001344:	f7ff fa64 	bl	8000810 <lcd_send_string>
				lcd_put_cur(10, 1);
 8001348:	2101      	movs	r1, #1
 800134a:	200a      	movs	r0, #10
 800134c:	f7ff f9d8 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 8001350:	482f      	ldr	r0, [pc, #188]	; (8001410 <acc_menuPotencia+0x28c>)
 8001352:	f7ff fa5d 	bl	8000810 <lcd_send_string>
				lecturaEnc = 0;
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <acc_menuPotencia+0x290>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
			if (PULSO){
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <acc_menuPotencia+0x284>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d048      	beq.n	80013f6 <acc_menuPotencia+0x272>
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <acc_menuPotencia+0x288>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d144      	bne.n	80013f6 <acc_menuPotencia+0x272>
				pantallaActual = &pantalla[MEDICION_POTENCIA];
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <acc_menuPotencia+0x2a0>)
 800136e:	4a2e      	ldr	r2, [pc, #184]	; (8001428 <acc_menuPotencia+0x2a4>)
 8001370:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <acc_menuPotencia+0x2a0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4798      	blx	r3
		break;
 800137a:	e03c      	b.n	80013f6 <acc_menuPotencia+0x272>
			if (lecturaEnc < 0){
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <acc_menuPotencia+0x290>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	da1a      	bge.n	80013ba <acc_menuPotencia+0x236>
				cursor = 1;
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <acc_menuPotencia+0x27c>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0, 1);
 800138a:	2101      	movs	r1, #1
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff f9b7 	bl	8000700 <lcd_put_cur>
				lcd_send_data(0x7E); // ->
 8001392:	207e      	movs	r0, #126	; 0x7e
 8001394:	f7ff f968 	bl	8000668 <lcd_send_data>
				lcd_put_cur(0, 0);
 8001398:	2100      	movs	r1, #0
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff f9b0 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 80013a0:	481b      	ldr	r0, [pc, #108]	; (8001410 <acc_menuPotencia+0x28c>)
 80013a2:	f7ff fa35 	bl	8000810 <lcd_send_string>
				lcd_put_cur(10, 1);
 80013a6:	2101      	movs	r1, #1
 80013a8:	200a      	movs	r0, #10
 80013aa:	f7ff f9a9 	bl	8000700 <lcd_put_cur>
				lcd_send_string(" ");
 80013ae:	4818      	ldr	r0, [pc, #96]	; (8001410 <acc_menuPotencia+0x28c>)
 80013b0:	f7ff fa2e 	bl	8000810 <lcd_send_string>
				lecturaEnc = 0;
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <acc_menuPotencia+0x290>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
			if (PULSO != 0){
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <acc_menuPotencia+0x284>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <acc_menuPotencia+0x24a>
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <acc_menuPotencia+0x288>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <acc_menuPotencia+0x24a>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <acc_menuPotencia+0x24c>
 80013ce:	2300      	movs	r3, #0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d012      	beq.n	80013fa <acc_menuPotencia+0x276>
				cursor = 0;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <acc_menuPotencia+0x27c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
				pantallaActual = &pantalla [MENU_PRINCIPAL];
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <acc_menuPotencia+0x2a0>)
 80013dc:	4a13      	ldr	r2, [pc, #76]	; (800142c <acc_menuPotencia+0x2a8>)
 80013de:	601a      	str	r2, [r3, #0]
				pantallaActual->inicia_menu();
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <acc_menuPotencia+0x2a0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4798      	blx	r3
		break;
 80013e8:	e007      	b.n	80013fa <acc_menuPotencia+0x276>
		break;
 80013ea:	bf00      	nop
 80013ec:	e006      	b.n	80013fc <acc_menuPotencia+0x278>
				break;
 80013ee:	bf00      	nop
 80013f0:	e004      	b.n	80013fc <acc_menuPotencia+0x278>
		break;
 80013f2:	bf00      	nop
 80013f4:	e002      	b.n	80013fc <acc_menuPotencia+0x278>
		break;
 80013f6:	bf00      	nop
 80013f8:	e000      	b.n	80013fc <acc_menuPotencia+0x278>
		break;
 80013fa:	bf00      	nop
	} //end switch cursor
} //fin acc_menuPotencia()
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200001ae 	.word	0x200001ae
 8001404:	200001af 	.word	0x200001af
 8001408:	20000005 	.word	0x20000005
 800140c:	20000004 	.word	0x20000004
 8001410:	08006f44 	.word	0x08006f44
 8001414:	20000154 	.word	0x20000154
 8001418:	200001b0 	.word	0x200001b0
 800141c:	08006f50 	.word	0x08006f50
 8001420:	2000017c 	.word	0x2000017c
 8001424:	20000178 	.word	0x20000178
 8001428:	20000040 	.word	0x20000040
 800142c:	2000001c 	.word	0x2000001c

08001430 <acc_medicionCorriente>:


void acc_medicionCorriente (void){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	if (PULSO != 0){
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <acc_medicionCorriente+0x84>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <acc_medicionCorriente+0x18>
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <acc_medicionCorriente+0x88>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <acc_medicionCorriente+0x18>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <acc_medicionCorriente+0x1a>
 8001448:	2300      	movs	r3, #0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00a      	beq.n	8001464 <acc_medicionCorriente+0x34>
		cursor = 0;
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <acc_medicionCorriente+0x8c>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
		pantallaActual = &pantalla [MENU_CORRIENTE];
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <acc_medicionCorriente+0x90>)
 8001456:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <acc_medicionCorriente+0x94>)
 8001458:	601a      	str	r2, [r3, #0]
		pantallaActual->inicia_menu();
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <acc_medicionCorriente+0x90>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4798      	blx	r3
		return;
 8001462:	e025      	b.n	80014b0 <acc_medicionCorriente+0x80>
	}

	if (periodo_impMed > 29){ //actualiza cada 300 ms
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <acc_medicionCorriente+0x98>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b1d      	cmp	r3, #29
 800146a:	d921      	bls.n	80014b0 <acc_medicionCorriente+0x80>
		lcd_put_cur(5, 1);
 800146c:	2101      	movs	r1, #1
 800146e:	2005      	movs	r0, #5
 8001470:	f7ff f946 	bl	8000700 <lcd_put_cur>
		sprintf(texto, "%d.%dmA ", medida_corriente / 10, medida_corriente % 10 );
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <acc_medicionCorriente+0x9c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <acc_medicionCorriente+0xa0>)
 800147a:	fb82 1203 	smull	r1, r2, r2, r3
 800147e:	1092      	asrs	r2, r2, #2
 8001480:	17db      	asrs	r3, r3, #31
 8001482:	1ad0      	subs	r0, r2, r3
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <acc_medicionCorriente+0x9c>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <acc_medicionCorriente+0xa0>)
 800148a:	fb83 1302 	smull	r1, r3, r3, r2
 800148e:	1099      	asrs	r1, r3, #2
 8001490:	17d3      	asrs	r3, r2, #31
 8001492:	1ac9      	subs	r1, r1, r3
 8001494:	460b      	mov	r3, r1
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	1ad1      	subs	r1, r2, r3
 800149e:	460b      	mov	r3, r1
 80014a0:	4602      	mov	r2, r0
 80014a2:	490c      	ldr	r1, [pc, #48]	; (80014d4 <acc_medicionCorriente+0xa4>)
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <acc_medicionCorriente+0xa8>)
 80014a6:	f005 f891 	bl	80065cc <siprintf>
		lcd_send_string(texto);
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <acc_medicionCorriente+0xa8>)
 80014ac:	f7ff f9b0 	bl	8000810 <lcd_send_string>
	}
} //fin acc_medicionCorriente()
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000005 	.word	0x20000005
 80014b8:	20000004 	.word	0x20000004
 80014bc:	200001ae 	.word	0x200001ae
 80014c0:	20000178 	.word	0x20000178
 80014c4:	20000034 	.word	0x20000034
 80014c8:	2000015a 	.word	0x2000015a
 80014cc:	200001bc 	.word	0x200001bc
 80014d0:	66666667 	.word	0x66666667
 80014d4:	08006f58 	.word	0x08006f58
 80014d8:	2000017c 	.word	0x2000017c

080014dc <acc_medicionPotencia>:


void acc_medicionPotencia (void){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	if (PULSO != 0){
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <acc_medicionPotencia+0x84>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <acc_medicionPotencia+0x18>
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <acc_medicionPotencia+0x88>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <acc_medicionPotencia+0x18>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <acc_medicionPotencia+0x1a>
 80014f4:	2300      	movs	r3, #0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <acc_medicionPotencia+0x34>
		cursor = 0;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <acc_medicionPotencia+0x8c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
		pantallaActual = &pantalla [MENU_POTENCIA];
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <acc_medicionPotencia+0x90>)
 8001502:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <acc_medicionPotencia+0x94>)
 8001504:	601a      	str	r2, [r3, #0]
		pantallaActual->inicia_menu();
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <acc_medicionPotencia+0x90>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4798      	blx	r3
		return;
 800150e:	e025      	b.n	800155c <acc_medicionPotencia+0x80>
	}

	if (periodo_impMed > 29){ //actualiza cada 300 ms
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <acc_medicionPotencia+0x98>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b1d      	cmp	r3, #29
 8001516:	d921      	bls.n	800155c <acc_medicionPotencia+0x80>
		lcd_put_cur(5, 1);
 8001518:	2101      	movs	r1, #1
 800151a:	2005      	movs	r0, #5
 800151c:	f7ff f8f0 	bl	8000700 <lcd_put_cur>
		sprintf(texto, "%d.%dmA ", medida_potencia / 10, medida_potencia % 10 );
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <acc_medicionPotencia+0x9c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a15      	ldr	r2, [pc, #84]	; (800157c <acc_medicionPotencia+0xa0>)
 8001526:	fb82 1203 	smull	r1, r2, r2, r3
 800152a:	1092      	asrs	r2, r2, #2
 800152c:	17db      	asrs	r3, r3, #31
 800152e:	1ad0      	subs	r0, r2, r3
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <acc_medicionPotencia+0x9c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <acc_medicionPotencia+0xa0>)
 8001536:	fb83 1302 	smull	r1, r3, r3, r2
 800153a:	1099      	asrs	r1, r3, #2
 800153c:	17d3      	asrs	r3, r2, #31
 800153e:	1ac9      	subs	r1, r1, r3
 8001540:	460b      	mov	r3, r1
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	1ad1      	subs	r1, r2, r3
 800154a:	460b      	mov	r3, r1
 800154c:	4602      	mov	r2, r0
 800154e:	490c      	ldr	r1, [pc, #48]	; (8001580 <acc_medicionPotencia+0xa4>)
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <acc_medicionPotencia+0xa8>)
 8001552:	f005 f83b 	bl	80065cc <siprintf>
		lcd_send_string(texto);
 8001556:	480b      	ldr	r0, [pc, #44]	; (8001584 <acc_medicionPotencia+0xa8>)
 8001558:	f7ff f95a 	bl	8000810 <lcd_send_string>
	}
} //fin acc_medicionPotencia()
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000005 	.word	0x20000005
 8001564:	20000004 	.word	0x20000004
 8001568:	200001ae 	.word	0x200001ae
 800156c:	20000178 	.word	0x20000178
 8001570:	20000028 	.word	0x20000028
 8001574:	2000015a 	.word	0x2000015a
 8001578:	200001b8 	.word	0x200001b8
 800157c:	66666667 	.word	0x66666667
 8001580:	08006f58 	.word	0x08006f58
 8001584:	2000017c 	.word	0x2000017c

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_MspInit+0x44>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_MspInit+0x44>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6193      	str	r3, [r2, #24]
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_MspInit+0x44>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_MspInit+0x44>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x44>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x44>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 fb26 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <TIM7_DAC2_IRQHandler+0x14>)
 800162a:	f003 fbfc 	bl	8004e26 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 800162e:	4803      	ldr	r0, [pc, #12]	; (800163c <TIM7_DAC2_IRQHandler+0x18>)
 8001630:	f000 fc9d 	bl	8001f6e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000025c 	.word	0x2000025c
 800163c:	200000e4 	.word	0x200000e4

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f004 ff7a 	bl	8006568 <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20003000 	.word	0x20003000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	200001c0 	.word	0x200001c0
 80016a8:	20000348 	.word	0x20000348

080016ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <SystemInit+0x20>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <SystemInit+0x20>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b09a      	sub	sp, #104	; 0x68
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	615a      	str	r2, [r3, #20]
 8001702:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	222c      	movs	r2, #44	; 0x2c
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f004 ff56 	bl	80065bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001710:	4b43      	ldr	r3, [pc, #268]	; (8001820 <MX_TIM1_Init+0x150>)
 8001712:	4a44      	ldr	r2, [pc, #272]	; (8001824 <MX_TIM1_Init+0x154>)
 8001714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8001716:	4b42      	ldr	r3, [pc, #264]	; (8001820 <MX_TIM1_Init+0x150>)
 8001718:	2213      	movs	r2, #19
 800171a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b40      	ldr	r3, [pc, #256]	; (8001820 <MX_TIM1_Init+0x150>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001722:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <MX_TIM1_Init+0x150>)
 8001724:	2263      	movs	r2, #99	; 0x63
 8001726:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <MX_TIM1_Init+0x150>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <MX_TIM1_Init+0x150>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <MX_TIM1_Init+0x150>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800173a:	4839      	ldr	r0, [pc, #228]	; (8001820 <MX_TIM1_Init+0x150>)
 800173c:	f003 f90a 	bl	8004954 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001746:	f7ff f9fd 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001754:	4619      	mov	r1, r3
 8001756:	4832      	ldr	r0, [pc, #200]	; (8001820 <MX_TIM1_Init+0x150>)
 8001758:	f003 fd98 	bl	800528c <HAL_TIM_ConfigClockSource>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001762:	f7ff f9ef 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001766:	482e      	ldr	r0, [pc, #184]	; (8001820 <MX_TIM1_Init+0x150>)
 8001768:	f003 f9a8 	bl	8004abc <HAL_TIM_PWM_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001772:	f7ff f9e7 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001782:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001786:	4619      	mov	r1, r3
 8001788:	4825      	ldr	r0, [pc, #148]	; (8001820 <MX_TIM1_Init+0x150>)
 800178a:	f004 fa4f 	bl	8005c2c <HAL_TIMEx_MasterConfigSynchronization>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001794:	f7ff f9d6 	bl	8000b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001798:	2360      	movs	r3, #96	; 0x60
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a0:	2300      	movs	r3, #0
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b8:	2200      	movs	r2, #0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4818      	ldr	r0, [pc, #96]	; (8001820 <MX_TIM1_Init+0x150>)
 80017be:	f003 fc51 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80017c8:	f7ff f9bc 	bl	8000b44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	4807      	ldr	r0, [pc, #28]	; (8001820 <MX_TIM1_Init+0x150>)
 8001802:	f004 fa81 	bl	8005d08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800180c:	f7ff f99a 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <MX_TIM1_Init+0x150>)
 8001812:	f000 f90f 	bl	8001a34 <HAL_TIM_MspPostInit>

}
 8001816:	bf00      	nop
 8001818:	3768      	adds	r7, #104	; 0x68
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200001c4 	.word	0x200001c4
 8001824:	40012c00 	.word	0x40012c00

08001828 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	2224      	movs	r2, #36	; 0x24
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f004 fec0 	bl	80065bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <MX_TIM2_Init+0xa4>)
 8001848:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800184c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <MX_TIM2_Init+0xa4>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_TIM2_Init+0xa4>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_TIM2_Init+0xa4>)
 800185c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_TIM2_Init+0xa4>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_TIM2_Init+0xa4>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800186e:	2301      	movs	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001876:	2301      	movs	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001886:	2301      	movs	r3, #1
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4619      	mov	r1, r3
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <MX_TIM2_Init+0xa4>)
 800189a:	f003 f970 	bl	8004b7e <HAL_TIM_Encoder_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80018a4:	f7ff f94e 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_TIM2_Init+0xa4>)
 80018b6:	f004 f9b9 	bl	8005c2c <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80018c0:	f7ff f940 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3730      	adds	r7, #48	; 0x30
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000210 	.word	0x20000210

080018d0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <MX_TIM7_Init+0x68>)
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <MX_TIM7_Init+0x6c>)
 80018e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 640-1;
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_TIM7_Init+0x68>)
 80018e8:	f240 227f 	movw	r2, #639	; 0x27f
 80018ec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_TIM7_Init+0x68>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MX_TIM7_Init+0x68>)
 80018f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018fa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_TIM7_Init+0x68>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <MX_TIM7_Init+0x68>)
 8001904:	f003 f826 	bl	8004954 <HAL_TIM_Base_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800190e:	f7ff f919 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <MX_TIM7_Init+0x68>)
 8001920:	f004 f984 	bl	8005c2c <HAL_TIMEx_MasterConfigSynchronization>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800192a:	f7ff f90b 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000025c 	.word	0x2000025c
 800193c:	40001400 	.word	0x40001400

08001940 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <HAL_TIM_Base_MspInit+0x68>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10c      	bne.n	800196c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_TIM_Base_MspInit+0x6c>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <HAL_TIM_Base_MspInit+0x6c>)
 8001958:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800195c:	6193      	str	r3, [r2, #24]
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_TIM_Base_MspInit+0x6c>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800196a:	e018      	b.n	800199e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <HAL_TIM_Base_MspInit+0x70>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d113      	bne.n	800199e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_TIM_Base_MspInit+0x6c>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <HAL_TIM_Base_MspInit+0x6c>)
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_TIM_Base_MspInit+0x6c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	2037      	movs	r0, #55	; 0x37
 8001994:	f000 fa89 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001998:	2037      	movs	r0, #55	; 0x37
 800199a:	f000 faa2 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40012c00 	.word	0x40012c00
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40001400 	.word	0x40001400

080019b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d4:	d128      	bne.n	8001a28 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x7c>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x7c>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x7c>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x7c>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x7c>)
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	6153      	str	r3, [r2, #20]
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x7c>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a06:	2303      	movs	r3, #3
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a16:	2301      	movs	r3, #1
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a24:	f000 fb70 	bl	8002108 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <HAL_TIM_MspPostInit+0x68>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d11d      	bne.n	8001a92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_TIM_MspPostInit+0x6c>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_TIM_MspPostInit+0x6c>)
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	6153      	str	r3, [r2, #20]
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_TIM_MspPostInit+0x6c>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_D9_Pin;
 8001a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a80:	2306      	movs	r3, #6
 8001a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8e:	f000 fb3b 	bl	8002108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001aaa:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <MX_USART2_UART_Init+0x5c>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ab0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ae8:	f004 f9a4 	bl	8005e34 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001af2:	f7ff f827 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200002a8 	.word	0x200002a8
 8001b00:	40004400 	.word	0x40004400

08001b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_UART_MspInit+0x80>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d129      	bne.n	8001b7a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_UART_MspInit+0x84>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <HAL_UART_MspInit+0x84>)
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_UART_MspInit+0x84>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_UART_MspInit+0x84>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_UART_MspInit+0x84>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6153      	str	r3, [r2, #20]
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_UART_MspInit+0x84>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001b56:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b76:	f000 fac7 	bl	8002108 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3728      	adds	r7, #40	; 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40004400 	.word	0x40004400
 8001b88:	40021000 	.word	0x40021000

08001b8c <Reset_Handler>:
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc4 <LoopForever+0x2>
 8001b90:	f7ff fd8c 	bl	80016ac <SystemInit>
 8001b94:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <LoopForever+0x6>)
 8001b96:	490d      	ldr	r1, [pc, #52]	; (8001bcc <LoopForever+0xa>)
 8001b98:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <LoopForever+0xe>)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:
 8001b9e:	58d4      	ldr	r4, [r2, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:
 8001ba4:	18c4      	adds	r4, r0, r3
 8001ba6:	428c      	cmp	r4, r1
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <LoopForever+0x12>)
 8001bac:	4c0a      	ldr	r4, [pc, #40]	; (8001bd8 <LoopForever+0x16>)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:
 8001bb6:	42a2      	cmp	r2, r4
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>
 8001bba:	f004 fcdb 	bl	8006574 <__libc_init_array>
 8001bbe:	f7fe fe67 	bl	8000890 <main>

08001bc2 <LoopForever>:
 8001bc2:	e7fe      	b.n	8001bc2 <LoopForever>
 8001bc4:	20003000 	.word	0x20003000
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	200000c8 	.word	0x200000c8
 8001bd0:	08006fd8 	.word	0x08006fd8
 8001bd4:	200000c8 	.word	0x200000c8
 8001bd8:	20000344 	.word	0x20000344

08001bdc <ADC1_2_IRQHandler>:
 8001bdc:	e7fe      	b.n	8001bdc <ADC1_2_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_Init+0x28>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_Init+0x28>)
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 f94f 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f000 f808 	bl	8001c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfc:	f7ff fcc4 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40022000 	.word	0x40022000

08001c0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x54>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x58>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f967 	bl	8001efe <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c48:	f000 f92f 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <HAL_InitTick+0x5c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000058 	.word	0x20000058
 8001c64:	20000060 	.word	0x20000060
 8001c68:	2000005c 	.word	0x2000005c

08001c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000060 	.word	0x20000060
 8001c90:	20000330 	.word	0x20000330

08001c94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000330 	.word	0x20000330

08001cac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff ffee 	bl	8001c94 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffde 	bl	8001c94 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000060 	.word	0x20000060

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	; (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	; (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	; (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e74:	f7ff ff8e 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff29 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff3e 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff8e 	bl	8001de8 <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5d 	bl	8001d94 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff31 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa2 	bl	8001e50 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e014      	b.n	8001f52 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	791b      	ldrb	r3, [r3, #4]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7fe fa55 	bl	80003e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2202      	movs	r2, #2
 8001f42:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f84:	d120      	bne.n	8001fc8 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f94:	d118      	bne.n	8001fc8 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fc0:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffc9 	bl	8001f5a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fd6:	d120      	bne.n	800201a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fe6:	d118      	bne.n	800201a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2204      	movs	r2, #4
 8001fec:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f043 0202 	orr.w	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002002:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002012:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f86d 	bl	80020f4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	795b      	ldrb	r3, [r3, #5]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_DAC_ConfigChannel+0x20>
 8002040:	2302      	movs	r3, #2
 8002042:	e04e      	b.n	80020e2 <HAL_DAC_ConfigChannel+0xbe>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2202      	movs	r2, #2
 800204e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <HAL_DAC_ConfigChannel+0xcc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d112      	bne.n	8002088 <HAL_DAC_ConfigChannel+0x64>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10f      	bne.n	8002088 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002068:	f640 72fe 	movw	r2, #4094	; 0xffe
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4013      	ands	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	e00e      	b.n	80020a6 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8002088:	f640 72fe 	movw	r2, #4094	; 0xffe
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4013      	ands	r3, r2
 8002098:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6819      	ldr	r1, [r3, #0]
 80020c2:	22c0      	movs	r2, #192	; 0xc0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	400a      	ands	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40007400 	.word	0x40007400

080020f4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002116:	e14e      	b.n	80023b6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2101      	movs	r1, #1
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8140 	beq.w	80023b0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d005      	beq.n	8002148 <HAL_GPIO_Init+0x40>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d130      	bne.n	80021aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800217e:	2201      	movs	r2, #1
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 0201 	and.w	r2, r3, #1
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d017      	beq.n	80021e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d123      	bne.n	800223a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	08da      	lsrs	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3208      	adds	r2, #8
 80021fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	220f      	movs	r2, #15
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	08da      	lsrs	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3208      	adds	r2, #8
 8002234:	6939      	ldr	r1, [r7, #16]
 8002236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0203 	and.w	r2, r3, #3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 809a 	beq.w	80023b0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227c:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <HAL_GPIO_Init+0x2cc>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a54      	ldr	r2, [pc, #336]	; (80023d4 <HAL_GPIO_Init+0x2cc>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b52      	ldr	r3, [pc, #328]	; (80023d4 <HAL_GPIO_Init+0x2cc>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002294:	4a50      	ldr	r2, [pc, #320]	; (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022be:	d013      	beq.n	80022e8 <HAL_GPIO_Init+0x1e0>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a46      	ldr	r2, [pc, #280]	; (80023dc <HAL_GPIO_Init+0x2d4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00d      	beq.n	80022e4 <HAL_GPIO_Init+0x1dc>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a45      	ldr	r2, [pc, #276]	; (80023e0 <HAL_GPIO_Init+0x2d8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d007      	beq.n	80022e0 <HAL_GPIO_Init+0x1d8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a44      	ldr	r2, [pc, #272]	; (80023e4 <HAL_GPIO_Init+0x2dc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_GPIO_Init+0x1d4>
 80022d8:	2303      	movs	r3, #3
 80022da:	e006      	b.n	80022ea <HAL_GPIO_Init+0x1e2>
 80022dc:	2305      	movs	r3, #5
 80022de:	e004      	b.n	80022ea <HAL_GPIO_Init+0x1e2>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e002      	b.n	80022ea <HAL_GPIO_Init+0x1e2>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_GPIO_Init+0x1e2>
 80022e8:	2300      	movs	r3, #0
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	f002 0203 	and.w	r2, r2, #3
 80022f0:	0092      	lsls	r2, r2, #2
 80022f2:	4093      	lsls	r3, r2
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022fa:	4937      	ldr	r1, [pc, #220]	; (80023d8 <HAL_GPIO_Init+0x2d0>)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002308:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800232c:	4a2e      	ldr	r2, [pc, #184]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002356:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023aa:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3301      	adds	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f47f aea9 	bne.w	8002118 <HAL_GPIO_Init+0x10>
  }
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010000 	.word	0x40010000
 80023dc:	48000400 	.word	0x48000400
 80023e0:	48000800 	.word	0x48000800
 80023e4:	48000c00 	.word	0x48000c00
 80023e8:	40010400 	.word	0x40010400

080023ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e001      	b.n	800240e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e081      	b.n	8002532 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe f898 	bl	8000578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2224      	movs	r2, #36	; 0x24
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800246c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800247c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	e006      	b.n	80024a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d104      	bne.n	80024b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69d9      	ldr	r1, [r3, #28]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	461a      	mov	r2, r3
 8002548:	460b      	mov	r3, r1
 800254a:	817b      	strh	r3, [r7, #10]
 800254c:	4613      	mov	r3, r2
 800254e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b20      	cmp	r3, #32
 800255a:	f040 80da 	bne.w	8002712 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_I2C_Master_Transmit+0x30>
 8002568:	2302      	movs	r3, #2
 800256a:	e0d3      	b.n	8002714 <HAL_I2C_Master_Transmit+0x1d8>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002574:	f7ff fb8e 	bl	8001c94 <HAL_GetTick>
 8002578:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2319      	movs	r3, #25
 8002580:	2201      	movs	r2, #1
 8002582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fbc6 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0be      	b.n	8002714 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2221      	movs	r2, #33	; 0x21
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2210      	movs	r2, #16
 80025a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	893a      	ldrh	r2, [r7, #8]
 80025b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2bff      	cmp	r3, #255	; 0xff
 80025c6:	d90e      	bls.n	80025e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	22ff      	movs	r2, #255	; 0xff
 80025cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	8979      	ldrh	r1, [r7, #10]
 80025d6:	4b51      	ldr	r3, [pc, #324]	; (800271c <HAL_I2C_Master_Transmit+0x1e0>)
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fd54 	bl	800308c <I2C_TransferConfig>
 80025e4:	e06c      	b.n	80026c0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	8979      	ldrh	r1, [r7, #10]
 80025f8:	4b48      	ldr	r3, [pc, #288]	; (800271c <HAL_I2C_Master_Transmit+0x1e0>)
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fd43 	bl	800308c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002606:	e05b      	b.n	80026c0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	6a39      	ldr	r1, [r7, #32]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fbd2 	bl	8002db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e07b      	b.n	8002714 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d034      	beq.n	80026c0 <HAL_I2C_Master_Transmit+0x184>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d130      	bne.n	80026c0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	2200      	movs	r2, #0
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fb55 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e04d      	b.n	8002714 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	2bff      	cmp	r3, #255	; 0xff
 8002680:	d90e      	bls.n	80026a0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	22ff      	movs	r2, #255	; 0xff
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	b2da      	uxtb	r2, r3
 800268e:	8979      	ldrh	r1, [r7, #10]
 8002690:	2300      	movs	r3, #0
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fcf7 	bl	800308c <I2C_TransferConfig>
 800269e:	e00f      	b.n	80026c0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	8979      	ldrh	r1, [r7, #10]
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fce6 	bl	800308c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d19e      	bne.n	8002608 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fbb8 	bl	8002e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e01a      	b.n	8002714 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2220      	movs	r2, #32
 80026e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_I2C_Master_Transmit+0x1e4>)
 80026f2:	400b      	ands	r3, r1
 80026f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
  }
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	80002000 	.word	0x80002000
 8002720:	fe00e800 	.word	0xfe00e800

08002724 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	4608      	mov	r0, r1
 800272e:	4611      	mov	r1, r2
 8002730:	461a      	mov	r2, r3
 8002732:	4603      	mov	r3, r0
 8002734:	817b      	strh	r3, [r7, #10]
 8002736:	460b      	mov	r3, r1
 8002738:	813b      	strh	r3, [r7, #8]
 800273a:	4613      	mov	r3, r2
 800273c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	f040 80f9 	bne.w	800293e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_I2C_Mem_Write+0x34>
 8002752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0ed      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_I2C_Mem_Write+0x4e>
 800276e:	2302      	movs	r3, #2
 8002770:	e0e6      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800277a:	f7ff fa8b 	bl	8001c94 <HAL_GetTick>
 800277e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2319      	movs	r3, #25
 8002786:	2201      	movs	r2, #1
 8002788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fac3 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0d1      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2221      	movs	r2, #33	; 0x21
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2240      	movs	r2, #64	; 0x40
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027c4:	88f8      	ldrh	r0, [r7, #6]
 80027c6:	893a      	ldrh	r2, [r7, #8]
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	4603      	mov	r3, r0
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f9d3 	bl	8002b80 <I2C_RequestMemoryWrite>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0a9      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2bff      	cmp	r3, #255	; 0xff
 80027f4:	d90e      	bls.n	8002814 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	22ff      	movs	r2, #255	; 0xff
 80027fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	b2da      	uxtb	r2, r3
 8002802:	8979      	ldrh	r1, [r7, #10]
 8002804:	2300      	movs	r3, #0
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fc3d 	bl	800308c <I2C_TransferConfig>
 8002812:	e00f      	b.n	8002834 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	b2da      	uxtb	r2, r3
 8002824:	8979      	ldrh	r1, [r7, #10]
 8002826:	2300      	movs	r3, #0
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fc2c 	bl	800308c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fabc 	bl	8002db6 <I2C_WaitOnTXISFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e07b      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d034      	beq.n	80028ec <HAL_I2C_Mem_Write+0x1c8>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d130      	bne.n	80028ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fa3f 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e04d      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2bff      	cmp	r3, #255	; 0xff
 80028ac:	d90e      	bls.n	80028cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	22ff      	movs	r2, #255	; 0xff
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	8979      	ldrh	r1, [r7, #10]
 80028bc:	2300      	movs	r3, #0
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fbe1 	bl	800308c <I2C_TransferConfig>
 80028ca:	e00f      	b.n	80028ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	8979      	ldrh	r1, [r7, #10]
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fbd0 	bl	800308c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d19e      	bne.n	8002834 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 faa2 	bl	8002e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e01a      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2220      	movs	r2, #32
 8002910:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_I2C_Mem_Write+0x224>)
 800291e:	400b      	ands	r3, r1
 8002920:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	fe00e800 	.word	0xfe00e800

0800294c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	461a      	mov	r2, r3
 800295a:	4603      	mov	r3, r0
 800295c:	817b      	strh	r3, [r7, #10]
 800295e:	460b      	mov	r3, r1
 8002960:	813b      	strh	r3, [r7, #8]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b20      	cmp	r3, #32
 8002970:	f040 80fd 	bne.w	8002b6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_I2C_Mem_Read+0x34>
 800297a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800297c:	2b00      	cmp	r3, #0
 800297e:	d105      	bne.n	800298c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002986:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0f1      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_I2C_Mem_Read+0x4e>
 8002996:	2302      	movs	r3, #2
 8002998:	e0ea      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029a2:	f7ff f977 	bl	8001c94 <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2319      	movs	r3, #25
 80029ae:	2201      	movs	r2, #1
 80029b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f9af 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0d5      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2222      	movs	r2, #34	; 0x22
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2240      	movs	r2, #64	; 0x40
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029ec:	88f8      	ldrh	r0, [r7, #6]
 80029ee:	893a      	ldrh	r2, [r7, #8]
 80029f0:	8979      	ldrh	r1, [r7, #10]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	4603      	mov	r3, r0
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f913 	bl	8002c28 <I2C_RequestMemoryRead>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0ad      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2bff      	cmp	r3, #255	; 0xff
 8002a1c:	d90e      	bls.n	8002a3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	22ff      	movs	r2, #255	; 0xff
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	8979      	ldrh	r1, [r7, #10]
 8002a2c:	4b52      	ldr	r3, [pc, #328]	; (8002b78 <HAL_I2C_Mem_Read+0x22c>)
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fb29 	bl	800308c <I2C_TransferConfig>
 8002a3a:	e00f      	b.n	8002a5c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	8979      	ldrh	r1, [r7, #10]
 8002a4e:	4b4a      	ldr	r3, [pc, #296]	; (8002b78 <HAL_I2C_Mem_Read+0x22c>)
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fb18 	bl	800308c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	2200      	movs	r2, #0
 8002a64:	2104      	movs	r1, #4
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f956 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e07c      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d034      	beq.n	8002b1c <HAL_I2C_Mem_Read+0x1d0>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d130      	bne.n	8002b1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2180      	movs	r1, #128	; 0x80
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f927 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e04d      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2bff      	cmp	r3, #255	; 0xff
 8002adc:	d90e      	bls.n	8002afc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	22ff      	movs	r2, #255	; 0xff
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	2300      	movs	r3, #0
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fac9 	bl	800308c <I2C_TransferConfig>
 8002afa:	e00f      	b.n	8002b1c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	8979      	ldrh	r1, [r7, #10]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fab8 	bl	800308c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d19a      	bne.n	8002a5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f98a 	bl	8002e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e01a      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_I2C_Mem_Read+0x230>)
 8002b4e:	400b      	ands	r3, r1
 8002b50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e000      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	80002400 	.word	0x80002400
 8002b7c:	fe00e800 	.word	0xfe00e800

08002b80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	817b      	strh	r3, [r7, #10]
 8002b92:	460b      	mov	r3, r1
 8002b94:	813b      	strh	r3, [r7, #8]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	8979      	ldrh	r1, [r7, #10]
 8002ba0:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <I2C_RequestMemoryWrite+0xa4>)
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fa6f 	bl	800308c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	69b9      	ldr	r1, [r7, #24]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f8ff 	bl	8002db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e02c      	b.n	8002c1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc8:	893b      	ldrh	r3, [r7, #8]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd2:	e015      	b.n	8002c00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	69b9      	ldr	r1, [r7, #24]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f8e5 	bl	8002db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e012      	b.n	8002c1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf6:	893b      	ldrh	r3, [r7, #8]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2200      	movs	r2, #0
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f884 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	80002000 	.word	0x80002000

08002c28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	817b      	strh	r3, [r7, #10]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	813b      	strh	r3, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	8979      	ldrh	r1, [r7, #10]
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <I2C_RequestMemoryRead+0xa4>)
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fa1c 	bl	800308c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f8ac 	bl	8002db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e02c      	b.n	8002cc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c6e:	893b      	ldrh	r3, [r7, #8]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
 8002c78:	e015      	b.n	8002ca6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c7a:	893b      	ldrh	r3, [r7, #8]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	69b9      	ldr	r1, [r7, #24]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f892 	bl	8002db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e012      	b.n	8002cc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c9c:	893b      	ldrh	r3, [r7, #8]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2200      	movs	r2, #0
 8002cae:	2140      	movs	r1, #64	; 0x40
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f831 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	80002000 	.word	0x80002000

08002cd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d103      	bne.n	8002cee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d007      	beq.n	8002d0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	619a      	str	r2, [r3, #24]
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d28:	e031      	b.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d30:	d02d      	beq.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d32:	f7fe ffaf 	bl	8001c94 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d302      	bcc.n	8002d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d122      	bne.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d113      	bne.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f043 0220 	orr.w	r2, r3, #32
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00f      	b.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4013      	ands	r3, r2
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d0be      	beq.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dc2:	e033      	b.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f87f 	bl	8002ecc <I2C_IsErrorOccurred>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e031      	b.n	8002e3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dde:	d025      	beq.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	f7fe ff58 	bl	8001c94 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d11a      	bne.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d013      	beq.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e007      	b.n	8002e3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d1c4      	bne.n	8002dc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e50:	e02f      	b.n	8002eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f838 	bl	8002ecc <I2C_IsErrorOccurred>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e02d      	b.n	8002ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe ff15 	bl	8001c94 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11a      	bne.n	8002eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d013      	beq.n	8002eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f043 0220 	orr.w	r2, r3, #32
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e007      	b.n	8002ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d1c8      	bne.n	8002e52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d068      	beq.n	8002fca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2210      	movs	r2, #16
 8002efe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f00:	e049      	b.n	8002f96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f08:	d045      	beq.n	8002f96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fe fec3 	bl	8001c94 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <I2C_IsErrorOccurred+0x54>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d13a      	bne.n	8002f96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f42:	d121      	bne.n	8002f88 <I2C_IsErrorOccurred+0xbc>
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4a:	d01d      	beq.n	8002f88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d01a      	beq.n	8002f88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f62:	f7fe fe97 	bl	8001c94 <HAL_GetTick>
 8002f66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f68:	e00e      	b.n	8002f88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f6a:	f7fe fe93 	bl	8001c94 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b19      	cmp	r3, #25
 8002f76:	d907      	bls.n	8002f88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	f043 0320 	orr.w	r3, r3, #32
 8002f7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002f86:	e006      	b.n	8002f96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b20      	cmp	r3, #32
 8002f94:	d1e9      	bne.n	8002f6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d003      	beq.n	8002fac <I2C_IsErrorOccurred+0xe0>
 8002fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0aa      	beq.n	8002f02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d103      	bne.n	8002fbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	f043 0308 	orr.w	r3, r3, #8
 8003004:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800300e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	f043 0302 	orr.w	r3, r3, #2
 8003026:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003030:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01c      	beq.n	800307a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff fe45 	bl	8002cd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <I2C_IsErrorOccurred+0x1bc>)
 8003052:	400b      	ands	r3, r1
 8003054:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800307a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800307e:	4618      	mov	r0, r3
 8003080:	3728      	adds	r7, #40	; 0x28
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	fe00e800 	.word	0xfe00e800

0800308c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	817b      	strh	r3, [r7, #10]
 800309a:	4613      	mov	r3, r2
 800309c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030a4:	7a7b      	ldrb	r3, [r7, #9]
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	0d5b      	lsrs	r3, r3, #21
 80030c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <I2C_TransferConfig+0x60>)
 80030cc:	430b      	orrs	r3, r1
 80030ce:	43db      	mvns	r3, r3
 80030d0:	ea02 0103 	and.w	r1, r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	03ff63ff 	.word	0x03ff63ff

080030f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b20      	cmp	r3, #32
 8003104:	d138      	bne.n	8003178 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003110:	2302      	movs	r3, #2
 8003112:	e032      	b.n	800317a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2224      	movs	r2, #36	; 0x24
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003142:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b20      	cmp	r3, #32
 800319a:	d139      	bne.n	8003210 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e033      	b.n	8003212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2224      	movs	r2, #36	; 0x24
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	e000      	b.n	8003212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003210:	2302      	movs	r3, #2
  }
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003226:	af00      	add	r7, sp, #0
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003230:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	f001 b823 	b.w	800428c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 817d 	beq.w	8003556 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800325c:	4bbc      	ldr	r3, [pc, #752]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b04      	cmp	r3, #4
 8003266:	d00c      	beq.n	8003282 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003268:	4bb9      	ldr	r3, [pc, #740]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d15c      	bne.n	800332e <HAL_RCC_OscConfig+0x10e>
 8003274:	4bb6      	ldr	r3, [pc, #728]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003280:	d155      	bne.n	800332e <HAL_RCC_OscConfig+0x10e>
 8003282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003286:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003296:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d102      	bne.n	80032b4 <HAL_RCC_OscConfig+0x94>
 80032ae:	4ba8      	ldr	r3, [pc, #672]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	e015      	b.n	80032e0 <HAL_RCC_OscConfig+0xc0>
 80032b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80032c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80032d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80032dc:	4b9c      	ldr	r3, [pc, #624]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80032e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80032ec:	fa92 f2a2 	rbit	r2, r2
 80032f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80032f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80032f8:	fab2 f282 	clz	r2, r2
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	f042 0220 	orr.w	r2, r2, #32
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	f002 021f 	and.w	r2, r2, #31
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f202 	lsl.w	r2, r1, r2
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 811f 	beq.w	8003554 <HAL_RCC_OscConfig+0x334>
 8003316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 8116 	bne.w	8003554 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f000 bfaf 	b.w	800428c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x12e>
 8003340:	4b83      	ldr	r3, [pc, #524]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a82      	ldr	r2, [pc, #520]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e036      	b.n	80033bc <HAL_RCC_OscConfig+0x19c>
 800334e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x158>
 800335e:	4b7c      	ldr	r3, [pc, #496]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7b      	ldr	r2, [pc, #492]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 8003364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b79      	ldr	r3, [pc, #484]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a78      	ldr	r2, [pc, #480]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 8003370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e021      	b.n	80033bc <HAL_RCC_OscConfig+0x19c>
 8003378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x184>
 800338a:	4b71      	ldr	r3, [pc, #452]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a70      	ldr	r2, [pc, #448]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 8003390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b6e      	ldr	r3, [pc, #440]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6d      	ldr	r2, [pc, #436]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0x19c>
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a69      	ldr	r2, [pc, #420]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a66      	ldr	r2, [pc, #408]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 80033b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033bc:	4b64      	ldr	r3, [pc, #400]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	f023 020f 	bic.w	r2, r3, #15
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	495f      	ldr	r1, [pc, #380]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d059      	beq.n	800349a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fe fc55 	bl	8001c94 <HAL_GetTick>
 80033ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fe fc50 	bl	8001c94 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b64      	cmp	r3, #100	; 0x64
 80033fe:	d902      	bls.n	8003406 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	f000 bf43 	b.w	800428c <HAL_RCC_OscConfig+0x106c>
 8003406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800340a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800341a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d102      	bne.n	8003438 <HAL_RCC_OscConfig+0x218>
 8003432:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	e015      	b.n	8003464 <HAL_RCC_OscConfig+0x244>
 8003438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800343c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800344c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003450:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003454:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003460:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003468:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800346c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003470:	fa92 f2a2 	rbit	r2, r2
 8003474:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003478:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800347c:	fab2 f282 	clz	r2, r2
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	f042 0220 	orr.w	r2, r2, #32
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	f002 021f 	and.w	r2, r2, #31
 800348c:	2101      	movs	r1, #1
 800348e:	fa01 f202 	lsl.w	r2, r1, r2
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ab      	beq.n	80033f0 <HAL_RCC_OscConfig+0x1d0>
 8003498:	e05d      	b.n	8003556 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7fe fbfb 	bl	8001c94 <HAL_GetTick>
 800349e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fe fbf6 	bl	8001c94 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b64      	cmp	r3, #100	; 0x64
 80034b2:	d902      	bls.n	80034ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	f000 bee9 	b.w	800428c <HAL_RCC_OscConfig+0x106c>
 80034ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80034ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d102      	bne.n	80034ec <HAL_RCC_OscConfig+0x2cc>
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	e015      	b.n	8003518 <HAL_RCC_OscConfig+0x2f8>
 80034ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003504:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003508:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <HAL_RCC_OscConfig+0x330>)
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800351c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003520:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003524:	fa92 f2a2 	rbit	r2, r2
 8003528:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800352c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003530:	fab2 f282 	clz	r2, r2
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f042 0220 	orr.w	r2, r2, #32
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	f002 021f 	and.w	r2, r2, #31
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f202 	lsl.w	r2, r1, r2
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ab      	bne.n	80034a4 <HAL_RCC_OscConfig+0x284>
 800354c:	e003      	b.n	8003556 <HAL_RCC_OscConfig+0x336>
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 817d 	beq.w	8003866 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800356c:	4ba6      	ldr	r3, [pc, #664]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003578:	4ba3      	ldr	r3, [pc, #652]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b08      	cmp	r3, #8
 8003582:	d172      	bne.n	800366a <HAL_RCC_OscConfig+0x44a>
 8003584:	4ba0      	ldr	r3, [pc, #640]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d16c      	bne.n	800366a <HAL_RCC_OscConfig+0x44a>
 8003590:	2302      	movs	r3, #2
 8003592:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	fab3 f383 	clz	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_RCC_OscConfig+0x3a0>
 80035ba:	4b93      	ldr	r3, [pc, #588]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	e013      	b.n	80035e8 <HAL_RCC_OscConfig+0x3c8>
 80035c0:	2302      	movs	r3, #2
 80035c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80035d2:	2302      	movs	r3, #2
 80035d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80035d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80035e4:	4b88      	ldr	r3, [pc, #544]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	2202      	movs	r2, #2
 80035ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80035ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80035f2:	fa92 f2a2 	rbit	r2, r2
 80035f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80035fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80035fe:	fab2 f282 	clz	r2, r2
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	f042 0220 	orr.w	r2, r2, #32
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	f002 021f 	and.w	r2, r2, #31
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f202 	lsl.w	r2, r1, r2
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCC_OscConfig+0x410>
 800361a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d002      	beq.n	8003630 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f000 be2e 	b.w	800428c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003630:	4b75      	ldr	r3, [pc, #468]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	21f8      	movs	r1, #248	; 0xf8
 8003646:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800364e:	fa91 f1a1 	rbit	r1, r1
 8003652:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003656:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800365a:	fab1 f181 	clz	r1, r1
 800365e:	b2c9      	uxtb	r1, r1
 8003660:	408b      	lsls	r3, r1
 8003662:	4969      	ldr	r1, [pc, #420]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003668:	e0fd      	b.n	8003866 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800366a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8088 	beq.w	800378c <HAL_RCC_OscConfig+0x56c>
 800367c:	2301      	movs	r3, #1
 800367e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800368e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800369c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	461a      	mov	r2, r3
 80036a4:	2301      	movs	r3, #1
 80036a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fe faf4 	bl	8001c94 <HAL_GetTick>
 80036ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fe faef 	bl	8001c94 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d902      	bls.n	80036c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	f000 bde2 	b.w	800428c <HAL_RCC_OscConfig+0x106c>
 80036c8:	2302      	movs	r3, #2
 80036ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80036da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d102      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4d8>
 80036f2:	4b45      	ldr	r3, [pc, #276]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	e013      	b.n	8003720 <HAL_RCC_OscConfig+0x500>
 80036f8:	2302      	movs	r3, #2
 80036fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800370a:	2302      	movs	r3, #2
 800370c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003710:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800371c:	4b3a      	ldr	r3, [pc, #232]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2202      	movs	r2, #2
 8003722:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003726:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800372a:	fa92 f2a2 	rbit	r2, r2
 800372e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003732:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003736:	fab2 f282 	clz	r2, r2
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f042 0220 	orr.w	r2, r2, #32
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	f002 021f 	and.w	r2, r2, #31
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f202 	lsl.w	r2, r1, r2
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0af      	beq.n	80036b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003752:	4b2d      	ldr	r3, [pc, #180]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	21f8      	movs	r1, #248	; 0xf8
 8003768:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003770:	fa91 f1a1 	rbit	r1, r1
 8003774:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003778:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800377c:	fab1 f181 	clz	r1, r1
 8003780:	b2c9      	uxtb	r1, r1
 8003782:	408b      	lsls	r3, r1
 8003784:	4920      	ldr	r1, [pc, #128]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
 800378a:	e06c      	b.n	8003866 <HAL_RCC_OscConfig+0x646>
 800378c:	2301      	movs	r3, #1
 800378e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800379e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a2:	fab3 f383 	clz	r3, r3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	461a      	mov	r2, r3
 80037b4:	2300      	movs	r3, #0
 80037b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe fa6c 	bl	8001c94 <HAL_GetTick>
 80037bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c2:	f7fe fa67 	bl	8001c94 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d902      	bls.n	80037d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	f000 bd5a 	b.w	800428c <HAL_RCC_OscConfig+0x106c>
 80037d8:	2302      	movs	r3, #2
 80037da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80037ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d104      	bne.n	800380c <HAL_RCC_OscConfig+0x5ec>
 8003802:	4b01      	ldr	r3, [pc, #4]	; (8003808 <HAL_RCC_OscConfig+0x5e8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	e015      	b.n	8003834 <HAL_RCC_OscConfig+0x614>
 8003808:	40021000 	.word	0x40021000
 800380c:	2302      	movs	r3, #2
 800380e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800381e:	2302      	movs	r3, #2
 8003820:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003824:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003830:	4bc8      	ldr	r3, [pc, #800]	; (8003b54 <HAL_RCC_OscConfig+0x934>)
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	2202      	movs	r2, #2
 8003836:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800383a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800383e:	fa92 f2a2 	rbit	r2, r2
 8003842:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003846:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800384a:	fab2 f282 	clz	r2, r2
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	f042 0220 	orr.w	r2, r2, #32
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	f002 021f 	and.w	r2, r2, #31
 800385a:	2101      	movs	r1, #1
 800385c:	fa01 f202 	lsl.w	r2, r1, r2
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1ad      	bne.n	80037c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8110 	beq.w	8003a9c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800387c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d079      	beq.n	8003980 <HAL_RCC_OscConfig+0x760>
 800388c:	2301      	movs	r3, #1
 800388e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800389e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	4bab      	ldr	r3, [pc, #684]	; (8003b58 <HAL_RCC_OscConfig+0x938>)
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	461a      	mov	r2, r3
 80038b2:	2301      	movs	r3, #1
 80038b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b6:	f7fe f9ed 	bl	8001c94 <HAL_GetTick>
 80038ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c0:	f7fe f9e8 	bl	8001c94 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d902      	bls.n	80038d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	f000 bcdb 	b.w	800428c <HAL_RCC_OscConfig+0x106c>
 80038d6:	2302      	movs	r3, #2
 80038d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80038e0:	fa93 f3a3 	rbit	r3, r3
 80038e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80038f0:	2202      	movs	r2, #2
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003914:	2202      	movs	r2, #2
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	fa93 f2a3 	rbit	r2, r3
 8003926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800392e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003930:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <HAL_RCC_OscConfig+0x934>)
 8003932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003938:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800393c:	2102      	movs	r1, #2
 800393e:	6019      	str	r1, [r3, #0]
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	fa93 f1a3 	rbit	r1, r3
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003956:	6019      	str	r1, [r3, #0]
  return result;
 8003958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	2101      	movs	r1, #1
 8003974:	fa01 f303 	lsl.w	r3, r1, r3
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0a0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x6a0>
 800397e:	e08d      	b.n	8003a9c <HAL_RCC_OscConfig+0x87c>
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	fa93 f2a3 	rbit	r2, r3
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039a2:	601a      	str	r2, [r3, #0]
  return result;
 80039a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b68      	ldr	r3, [pc, #416]	; (8003b58 <HAL_RCC_OscConfig+0x938>)
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	461a      	mov	r2, r3
 80039be:	2300      	movs	r3, #0
 80039c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c2:	f7fe f967 	bl	8001c94 <HAL_GetTick>
 80039c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039cc:	f7fe f962 	bl	8001c94 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d902      	bls.n	80039e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	f000 bc55 	b.w	800428c <HAL_RCC_OscConfig+0x106c>
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80039ea:	2202      	movs	r2, #2
 80039ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fa93 f2a3 	rbit	r2, r3
 80039fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a0e:	2202      	movs	r2, #2
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	fa93 f2a3 	rbit	r2, r3
 8003a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a32:	2202      	movs	r2, #2
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	fa93 f2a3 	rbit	r2, r3
 8003a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4e:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <HAL_RCC_OscConfig+0x934>)
 8003a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	6019      	str	r1, [r3, #0]
 8003a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	fa93 f1a3 	rbit	r1, r3
 8003a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a74:	6019      	str	r1, [r3, #0]
  return result;
 8003a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	fab3 f383 	clz	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2101      	movs	r1, #1
 8003a92:	fa01 f303 	lsl.w	r3, r1, r3
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d197      	bne.n	80039cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 81a1 	beq.w	8003df4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab8:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <HAL_RCC_OscConfig+0x934>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d116      	bne.n	8003af2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac4:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <HAL_RCC_OscConfig+0x934>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <HAL_RCC_OscConfig+0x934>)
 8003aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ace:	61d3      	str	r3, [r2, #28]
 8003ad0:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <HAL_RCC_OscConfig+0x934>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003adc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003aea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af2:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <HAL_RCC_OscConfig+0x93c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d11a      	bne.n	8003b34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afe:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <HAL_RCC_OscConfig+0x93c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_RCC_OscConfig+0x93c>)
 8003b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0a:	f7fe f8c3 	bl	8001c94 <HAL_GetTick>
 8003b0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	e009      	b.n	8003b28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b14:	f7fe f8be 	bl	8001c94 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	; 0x64
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e3b1      	b.n	800428c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <HAL_RCC_OscConfig+0x93c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ef      	beq.n	8003b14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d10d      	bne.n	8003b60 <HAL_RCC_OscConfig+0x940>
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_RCC_OscConfig+0x934>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4a02      	ldr	r2, [pc, #8]	; (8003b54 <HAL_RCC_OscConfig+0x934>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6213      	str	r3, [r2, #32]
 8003b50:	e03c      	b.n	8003bcc <HAL_RCC_OscConfig+0x9ac>
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	10908120 	.word	0x10908120
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10c      	bne.n	8003b8a <HAL_RCC_OscConfig+0x96a>
 8003b70:	4bc1      	ldr	r3, [pc, #772]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	4ac0      	ldr	r2, [pc, #768]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	6213      	str	r3, [r2, #32]
 8003b7c:	4bbe      	ldr	r3, [pc, #760]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	4abd      	ldr	r2, [pc, #756]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003b82:	f023 0304 	bic.w	r3, r3, #4
 8003b86:	6213      	str	r3, [r2, #32]
 8003b88:	e020      	b.n	8003bcc <HAL_RCC_OscConfig+0x9ac>
 8003b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b05      	cmp	r3, #5
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x994>
 8003b9a:	4bb7      	ldr	r3, [pc, #732]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4ab6      	ldr	r2, [pc, #728]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003ba0:	f043 0304 	orr.w	r3, r3, #4
 8003ba4:	6213      	str	r3, [r2, #32]
 8003ba6:	4bb4      	ldr	r3, [pc, #720]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4ab3      	ldr	r2, [pc, #716]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6213      	str	r3, [r2, #32]
 8003bb2:	e00b      	b.n	8003bcc <HAL_RCC_OscConfig+0x9ac>
 8003bb4:	4bb0      	ldr	r3, [pc, #704]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	4aaf      	ldr	r2, [pc, #700]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	6213      	str	r3, [r2, #32]
 8003bc0:	4bad      	ldr	r3, [pc, #692]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4aac      	ldr	r2, [pc, #688]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003bc6:	f023 0304 	bic.w	r3, r3, #4
 8003bca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8081 	beq.w	8003ce0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7fe f859 	bl	8001c94 <HAL_GetTick>
 8003be2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be6:	e00b      	b.n	8003c00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fe f854 	bl	8001c94 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e345      	b.n	800428c <HAL_RCC_OscConfig+0x106c>
 8003c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c08:	2202      	movs	r2, #2
 8003c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	fa93 f2a3 	rbit	r2, r3
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	fa93 f2a3 	rbit	r2, r3
 8003c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c46:	601a      	str	r2, [r3, #0]
  return result;
 8003c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d102      	bne.n	8003c6c <HAL_RCC_OscConfig+0xa4c>
 8003c66:	4b84      	ldr	r3, [pc, #528]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	e013      	b.n	8003c94 <HAL_RCC_OscConfig+0xa74>
 8003c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c74:	2202      	movs	r2, #2
 8003c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	fa93 f2a3 	rbit	r2, r3
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	4b79      	ldr	r3, [pc, #484]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c98:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	6011      	str	r1, [r2, #0]
 8003ca0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ca4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	fa92 f1a2 	rbit	r1, r2
 8003cae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cb2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003cb6:	6011      	str	r1, [r2, #0]
  return result;
 8003cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cbc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	fab2 f282 	clz	r2, r2
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	f002 021f 	and.w	r2, r2, #31
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d084      	beq.n	8003be8 <HAL_RCC_OscConfig+0x9c8>
 8003cde:	e07f      	b.n	8003de0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce0:	f7fd ffd8 	bl	8001c94 <HAL_GetTick>
 8003ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce8:	e00b      	b.n	8003d02 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fd ffd3 	bl	8001c94 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e2c4      	b.n	800428c <HAL_RCC_OscConfig+0x106c>
 8003d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d06:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d12:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fa93 f2a3 	rbit	r2, r3
 8003d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d20:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d2e:	2202      	movs	r2, #2
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d44:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d48:	601a      	str	r2, [r3, #0]
  return result;
 8003d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d54:	fab3 f383 	clz	r3, r3
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f043 0302 	orr.w	r3, r3, #2
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d102      	bne.n	8003d6e <HAL_RCC_OscConfig+0xb4e>
 8003d68:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	e013      	b.n	8003d96 <HAL_RCC_OscConfig+0xb76>
 8003d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d76:	2202      	movs	r2, #2
 8003d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	fa93 f2a3 	rbit	r2, r3
 8003d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	4b39      	ldr	r3, [pc, #228]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d9a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d9e:	2102      	movs	r1, #2
 8003da0:	6011      	str	r1, [r2, #0]
 8003da2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003da6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	fa92 f1a2 	rbit	r1, r2
 8003db0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003db4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003db8:	6011      	str	r1, [r2, #0]
  return result;
 8003dba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dbe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	fab2 f282 	clz	r2, r2
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	f002 021f 	and.w	r2, r2, #31
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d184      	bne.n	8003cea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003de0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d105      	bne.n	8003df4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de8:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8242 	beq.w	800428a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e06:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <HAL_RCC_OscConfig+0xc58>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	f000 8213 	beq.w	800423a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	f040 8162 	bne.w	80040ea <HAL_RCC_OscConfig+0xeca>
 8003e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e38:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	fa93 f2a3 	rbit	r2, r3
 8003e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e46:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e4a:	601a      	str	r2, [r3, #0]
  return result;
 8003e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	461a      	mov	r2, r3
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fd ff12 	bl	8001c94 <HAL_GetTick>
 8003e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e74:	e00c      	b.n	8003e90 <HAL_RCC_OscConfig+0xc70>
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fd ff0a 	bl	8001c94 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e1fd      	b.n	800428c <HAL_RCC_OscConfig+0x106c>
 8003e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	fa93 f2a3 	rbit	r2, r3
 8003eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003eb4:	601a      	str	r2, [r3, #0]
  return result;
 8003eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003ebe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d102      	bne.n	8003eda <HAL_RCC_OscConfig+0xcba>
 8003ed4:	4bb0      	ldr	r3, [pc, #704]	; (8004198 <HAL_RCC_OscConfig+0xf78>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	e027      	b.n	8003f2a <HAL_RCC_OscConfig+0xd0a>
 8003eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ede:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003ee2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	fa93 f2a3 	rbit	r2, r3
 8003ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f04:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	fa93 f2a3 	rbit	r2, r3
 8003f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	4b9c      	ldr	r3, [pc, #624]	; (8004198 <HAL_RCC_OscConfig+0xf78>)
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f2e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f36:	6011      	str	r1, [r2, #0]
 8003f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f3c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	fa92 f1a2 	rbit	r1, r2
 8003f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f4a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f4e:	6011      	str	r1, [r2, #0]
  return result;
 8003f50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	fab2 f282 	clz	r2, r2
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f042 0220 	orr.w	r2, r2, #32
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	f002 021f 	and.w	r2, r2, #31
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d182      	bne.n	8003e7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f76:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCC_OscConfig+0xf78>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	430b      	orrs	r3, r1
 8003f98:	497f      	ldr	r1, [pc, #508]	; (8004198 <HAL_RCC_OscConfig+0xf78>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
 8003f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003fa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	fa93 f2a3 	rbit	r2, r3
 8003fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003fc2:	601a      	str	r2, [r3, #0]
  return result;
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003fcc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fce:	fab3 f383 	clz	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fd fe56 	bl	8001c94 <HAL_GetTick>
 8003fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fec:	e009      	b.n	8004002 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fd fe51 	bl	8001c94 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e144      	b.n	800428c <HAL_RCC_OscConfig+0x106c>
 8004002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004006:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800400a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800400e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004014:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	fa93 f2a3 	rbit	r2, r3
 800401e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004022:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004026:	601a      	str	r2, [r3, #0]
  return result;
 8004028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004030:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004032:	fab3 f383 	clz	r3, r3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b01      	cmp	r3, #1
 8004044:	d102      	bne.n	800404c <HAL_RCC_OscConfig+0xe2c>
 8004046:	4b54      	ldr	r3, [pc, #336]	; (8004198 <HAL_RCC_OscConfig+0xf78>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	e027      	b.n	800409c <HAL_RCC_OscConfig+0xe7c>
 800404c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004050:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	fa93 f2a3 	rbit	r2, r3
 8004068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004076:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800407a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004084:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	fa93 f2a3 	rbit	r2, r3
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	4b3f      	ldr	r3, [pc, #252]	; (8004198 <HAL_RCC_OscConfig+0xf78>)
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040a8:	6011      	str	r1, [r2, #0]
 80040aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	fa92 f1a2 	rbit	r1, r2
 80040b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80040c0:	6011      	str	r1, [r2, #0]
  return result;
 80040c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	fab2 f282 	clz	r2, r2
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	f042 0220 	orr.w	r2, r2, #32
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	f002 021f 	and.w	r2, r2, #31
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f202 	lsl.w	r2, r1, r2
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d082      	beq.n	8003fee <HAL_RCC_OscConfig+0xdce>
 80040e8:	e0cf      	b.n	800428a <HAL_RCC_OscConfig+0x106a>
 80040ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80040f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	fa93 f2a3 	rbit	r2, r3
 8004106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800410e:	601a      	str	r2, [r3, #0]
  return result;
 8004110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004114:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004118:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004124:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	461a      	mov	r2, r3
 800412c:	2300      	movs	r3, #0
 800412e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fd fdb0 	bl	8001c94 <HAL_GetTick>
 8004134:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004138:	e009      	b.n	800414e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413a:	f7fd fdab 	bl	8001c94 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e09e      	b.n	800428c <HAL_RCC_OscConfig+0x106c>
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800415a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004160:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	fa93 f2a3 	rbit	r2, r3
 800416a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004172:	601a      	str	r2, [r3, #0]
  return result;
 8004174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004178:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800417c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b01      	cmp	r3, #1
 8004190:	d104      	bne.n	800419c <HAL_RCC_OscConfig+0xf7c>
 8004192:	4b01      	ldr	r3, [pc, #4]	; (8004198 <HAL_RCC_OscConfig+0xf78>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	e029      	b.n	80041ec <HAL_RCC_OscConfig+0xfcc>
 8004198:	40021000 	.word	0x40021000
 800419c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	fa93 f2a3 	rbit	r2, r3
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80041ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	fa93 f2a3 	rbit	r2, r3
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <HAL_RCC_OscConfig+0x1078>)
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80041f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	fa92 f1a2 	rbit	r1, r2
 8004208:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800420c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004210:	6011      	str	r1, [r2, #0]
  return result;
 8004212:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004216:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	fab2 f282 	clz	r2, r2
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	f042 0220 	orr.w	r2, r2, #32
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	f002 021f 	and.w	r2, r2, #31
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f202 	lsl.w	r2, r1, r2
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d180      	bne.n	800413a <HAL_RCC_OscConfig+0xf1a>
 8004238:	e027      	b.n	800428a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e01e      	b.n	800428c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800424e:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_RCC_OscConfig+0x1078>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004256:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800425a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800425e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	429a      	cmp	r2, r3
 800426c:	d10b      	bne.n	8004286 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800426e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004282:	429a      	cmp	r2, r3
 8004284:	d001      	beq.n	800428a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000

0800429c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b09e      	sub	sp, #120	; 0x78
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e162      	b.n	800457a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b4:	4b90      	ldr	r3, [pc, #576]	; (80044f8 <HAL_RCC_ClockConfig+0x25c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d910      	bls.n	80042e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b8d      	ldr	r3, [pc, #564]	; (80044f8 <HAL_RCC_ClockConfig+0x25c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 0207 	bic.w	r2, r3, #7
 80042ca:	498b      	ldr	r1, [pc, #556]	; (80044f8 <HAL_RCC_ClockConfig+0x25c>)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d2:	4b89      	ldr	r3, [pc, #548]	; (80044f8 <HAL_RCC_ClockConfig+0x25c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e14a      	b.n	800457a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f0:	4b82      	ldr	r3, [pc, #520]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	497f      	ldr	r1, [pc, #508]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 80dc 	beq.w	80044c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d13c      	bne.n	8004392 <HAL_RCC_ClockConfig+0xf6>
 8004318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800431c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004320:	fa93 f3a3 	rbit	r3, r3
 8004324:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004328:	fab3 f383 	clz	r3, r3
 800432c:	b2db      	uxtb	r3, r3
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d102      	bne.n	8004342 <HAL_RCC_ClockConfig+0xa6>
 800433c:	4b6f      	ldr	r3, [pc, #444]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	e00f      	b.n	8004362 <HAL_RCC_ClockConfig+0xc6>
 8004342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004346:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	667b      	str	r3, [r7, #100]	; 0x64
 8004350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004354:	663b      	str	r3, [r7, #96]	; 0x60
 8004356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800435e:	4b67      	ldr	r3, [pc, #412]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004366:	65ba      	str	r2, [r7, #88]	; 0x58
 8004368:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800436a:	fa92 f2a2 	rbit	r2, r2
 800436e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004370:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004372:	fab2 f282 	clz	r2, r2
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	f042 0220 	orr.w	r2, r2, #32
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	f002 021f 	and.w	r2, r2, #31
 8004382:	2101      	movs	r1, #1
 8004384:	fa01 f202 	lsl.w	r2, r1, r2
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d17b      	bne.n	8004486 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0f3      	b.n	800457a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d13c      	bne.n	8004414 <HAL_RCC_ClockConfig+0x178>
 800439a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800439e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d102      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x128>
 80043be:	4b4f      	ldr	r3, [pc, #316]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	e00f      	b.n	80043e4 <HAL_RCC_ClockConfig+0x148>
 80043c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	647b      	str	r3, [r7, #68]	; 0x44
 80043d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043d6:	643b      	str	r3, [r7, #64]	; 0x40
 80043d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e0:	4b46      	ldr	r3, [pc, #280]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80043ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ec:	fa92 f2a2 	rbit	r2, r2
 80043f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80043f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f4:	fab2 f282 	clz	r2, r2
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	f042 0220 	orr.w	r2, r2, #32
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	f002 021f 	and.w	r2, r2, #31
 8004404:	2101      	movs	r1, #1
 8004406:	fa01 f202 	lsl.w	r2, r1, r2
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d13a      	bne.n	8004486 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0b2      	b.n	800457a <HAL_RCC_ClockConfig+0x2de>
 8004414:	2302      	movs	r3, #2
 8004416:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004422:	fab3 f383 	clz	r3, r3
 8004426:	b2db      	uxtb	r3, r3
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d102      	bne.n	800443c <HAL_RCC_ClockConfig+0x1a0>
 8004436:	4b31      	ldr	r3, [pc, #196]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	e00d      	b.n	8004458 <HAL_RCC_ClockConfig+0x1bc>
 800443c:	2302      	movs	r3, #2
 800443e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	fa93 f3a3 	rbit	r3, r3
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
 8004448:	2302      	movs	r3, #2
 800444a:	623b      	str	r3, [r7, #32]
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2202      	movs	r2, #2
 800445a:	61ba      	str	r2, [r7, #24]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	fa92 f2a2 	rbit	r2, r2
 8004462:	617a      	str	r2, [r7, #20]
  return result;
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	fab2 f282 	clz	r2, r2
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	f042 0220 	orr.w	r2, r2, #32
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	f002 021f 	and.w	r2, r2, #31
 8004476:	2101      	movs	r1, #1
 8004478:	fa01 f202 	lsl.w	r2, r1, r2
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e079      	b.n	800457a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	491a      	ldr	r1, [pc, #104]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004498:	f7fd fbfc 	bl	8001c94 <HAL_GetTick>
 800449c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fd fbf8 	bl	8001c94 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e061      	b.n	800457a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b11      	ldr	r3, [pc, #68]	; (80044fc <HAL_RCC_ClockConfig+0x260>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_ClockConfig+0x25c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d214      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <HAL_RCC_ClockConfig+0x25c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 0207 	bic.w	r2, r3, #7
 80044de:	4906      	ldr	r1, [pc, #24]	; (80044f8 <HAL_RCC_ClockConfig+0x25c>)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <HAL_RCC_ClockConfig+0x25c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e040      	b.n	800457a <HAL_RCC_ClockConfig+0x2de>
 80044f8:	40022000 	.word	0x40022000
 80044fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800450c:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <HAL_RCC_ClockConfig+0x2e8>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	491a      	ldr	r1, [pc, #104]	; (8004584 <HAL_RCC_ClockConfig+0x2e8>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800452a:	4b16      	ldr	r3, [pc, #88]	; (8004584 <HAL_RCC_ClockConfig+0x2e8>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4912      	ldr	r1, [pc, #72]	; (8004584 <HAL_RCC_ClockConfig+0x2e8>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800453e:	f000 f829 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8004542:	4601      	mov	r1, r0
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <HAL_RCC_ClockConfig+0x2e8>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454c:	22f0      	movs	r2, #240	; 0xf0
 800454e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	fa92 f2a2 	rbit	r2, r2
 8004556:	60fa      	str	r2, [r7, #12]
  return result;
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	fab2 f282 	clz	r2, r2
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	40d3      	lsrs	r3, r2
 8004562:	4a09      	ldr	r2, [pc, #36]	; (8004588 <HAL_RCC_ClockConfig+0x2ec>)
 8004564:	5cd3      	ldrb	r3, [r2, r3]
 8004566:	fa21 f303 	lsr.w	r3, r1, r3
 800456a:	4a08      	ldr	r2, [pc, #32]	; (800458c <HAL_RCC_ClockConfig+0x2f0>)
 800456c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <HAL_RCC_ClockConfig+0x2f4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fb4a 	bl	8001c0c <HAL_InitTick>
  
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3778      	adds	r7, #120	; 0x78
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
 8004588:	08006f64 	.word	0x08006f64
 800458c:	20000058 	.word	0x20000058
 8004590:	2000005c 	.word	0x2000005c

08004594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004594:	b480      	push	{r7}
 8004596:	b08b      	sub	sp, #44	; 0x2c
 8004598:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	2300      	movs	r3, #0
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80045ae:	4b29      	ldr	r3, [pc, #164]	; (8004654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d002      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x30>
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d003      	beq.n	80045ca <HAL_RCC_GetSysClockFreq+0x36>
 80045c2:	e03c      	b.n	800463e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045c4:	4b24      	ldr	r3, [pc, #144]	; (8004658 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045c6:	623b      	str	r3, [r7, #32]
      break;
 80045c8:	e03c      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80045d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	fa92 f2a2 	rbit	r2, r2
 80045dc:	607a      	str	r2, [r7, #4]
  return result;
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	fab2 f282 	clz	r2, r2
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	40d3      	lsrs	r3, r2
 80045e8:	4a1c      	ldr	r2, [pc, #112]	; (800465c <HAL_RCC_GetSysClockFreq+0xc8>)
 80045ea:	5cd3      	ldrb	r3, [r2, r3]
 80045ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045ee:	4b19      	ldr	r3, [pc, #100]	; (8004654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	220f      	movs	r2, #15
 80045f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	fa92 f2a2 	rbit	r2, r2
 8004600:	60fa      	str	r2, [r7, #12]
  return result;
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	fab2 f282 	clz	r2, r2
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	40d3      	lsrs	r3, r2
 800460c:	4a14      	ldr	r2, [pc, #80]	; (8004660 <HAL_RCC_GetSysClockFreq+0xcc>)
 800460e:	5cd3      	ldrb	r3, [r2, r3]
 8004610:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800461c:	4a0e      	ldr	r2, [pc, #56]	; (8004658 <HAL_RCC_GetSysClockFreq+0xc4>)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	fbb2 f2f3 	udiv	r2, r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	fb02 f303 	mul.w	r3, r2, r3
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
 800462c:	e004      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	4a0c      	ldr	r2, [pc, #48]	; (8004664 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	623b      	str	r3, [r7, #32]
      break;
 800463c:	e002      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004640:	623b      	str	r3, [r7, #32]
      break;
 8004642:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004644:	6a3b      	ldr	r3, [r7, #32]
}
 8004646:	4618      	mov	r0, r3
 8004648:	372c      	adds	r7, #44	; 0x2c
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40021000 	.word	0x40021000
 8004658:	007a1200 	.word	0x007a1200
 800465c:	08006f7c 	.word	0x08006f7c
 8004660:	08006f8c 	.word	0x08006f8c
 8004664:	003d0900 	.word	0x003d0900

08004668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <HAL_RCC_GetHCLKFreq+0x14>)
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000058 	.word	0x20000058

08004680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004686:	f7ff ffef 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 800468a:	4601      	mov	r1, r0
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004694:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004698:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	fa92 f2a2 	rbit	r2, r2
 80046a0:	603a      	str	r2, [r7, #0]
  return result;
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	fab2 f282 	clz	r2, r2
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	40d3      	lsrs	r3, r2
 80046ac:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80046ae:	5cd3      	ldrb	r3, [r2, r3]
 80046b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000
 80046c0:	08006f74 	.word	0x08006f74

080046c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80046ca:	f7ff ffcd 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 80046ce:	4601      	mov	r1, r0
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80046d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80046dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	fa92 f2a2 	rbit	r2, r2
 80046e4:	603a      	str	r2, [r7, #0]
  return result;
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	fab2 f282 	clz	r2, r2
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	40d3      	lsrs	r3, r2
 80046f0:	4a04      	ldr	r2, [pc, #16]	; (8004704 <HAL_RCC_GetPCLK2Freq+0x40>)
 80046f2:	5cd3      	ldrb	r3, [r2, r3]
 80046f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40021000 	.word	0x40021000
 8004704:	08006f74 	.word	0x08006f74

08004708 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b092      	sub	sp, #72	; 0x48
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004718:	2300      	movs	r3, #0
 800471a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80cd 	beq.w	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472c:	4b86      	ldr	r3, [pc, #536]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10e      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004738:	4b83      	ldr	r3, [pc, #524]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	4a82      	ldr	r2, [pc, #520]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800473e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004742:	61d3      	str	r3, [r2, #28]
 8004744:	4b80      	ldr	r3, [pc, #512]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004750:	2301      	movs	r3, #1
 8004752:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004756:	4b7d      	ldr	r3, [pc, #500]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d118      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004762:	4b7a      	ldr	r3, [pc, #488]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a79      	ldr	r2, [pc, #484]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800476c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476e:	f7fd fa91 	bl	8001c94 <HAL_GetTick>
 8004772:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004774:	e008      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004776:	f7fd fa8d 	bl	8001c94 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b64      	cmp	r3, #100	; 0x64
 8004782:	d901      	bls.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e0db      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	4b70      	ldr	r3, [pc, #448]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004794:	4b6c      	ldr	r3, [pc, #432]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800479e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d07d      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d076      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047b2:	4b65      	ldr	r3, [pc, #404]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	fa93 f3a3 	rbit	r3, r3
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	4b5e      	ldr	r3, [pc, #376]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	461a      	mov	r2, r3
 80047dc:	2301      	movs	r3, #1
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	fa93 f3a3 	rbit	r3, r3
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	4b55      	ldr	r3, [pc, #340]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	461a      	mov	r2, r3
 8004800:	2300      	movs	r3, #0
 8004802:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004804:	4a50      	ldr	r2, [pc, #320]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004808:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800480a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d045      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7fd fa3e 	bl	8001c94 <HAL_GetTick>
 8004818:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481a:	e00a      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481c:	f7fd fa3a 	bl	8001c94 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e086      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004832:	2302      	movs	r3, #2
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	fa93 f3a3 	rbit	r3, r3
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	2302      	movs	r3, #2
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	fa93 f3a3 	rbit	r3, r3
 8004848:	61fb      	str	r3, [r7, #28]
  return result;
 800484a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484c:	fab3 f383 	clz	r3, r3
 8004850:	b2db      	uxtb	r3, r3
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f043 0302 	orr.w	r3, r3, #2
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d102      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004860:	4b39      	ldr	r3, [pc, #228]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	e007      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004866:	2302      	movs	r3, #2
 8004868:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	fa93 f3a3 	rbit	r3, r3
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	4b35      	ldr	r3, [pc, #212]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2202      	movs	r2, #2
 8004878:	613a      	str	r2, [r7, #16]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	fa92 f2a2 	rbit	r2, r2
 8004880:	60fa      	str	r2, [r7, #12]
  return result;
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	fab2 f282 	clz	r2, r2
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	f002 021f 	and.w	r2, r2, #31
 8004894:	2101      	movs	r1, #1
 8004896:	fa01 f202 	lsl.w	r2, r1, r2
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0bd      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048a0:	4b29      	ldr	r3, [pc, #164]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4926      	ldr	r1, [pc, #152]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d105      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ba:	4b23      	ldr	r3, [pc, #140]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	4a22      	ldr	r2, [pc, #136]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048d2:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	491a      	ldr	r1, [pc, #104]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f0:	4b15      	ldr	r3, [pc, #84]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f023 0210 	bic.w	r2, r3, #16
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4912      	ldr	r1, [pc, #72]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800490e:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	490b      	ldr	r1, [pc, #44]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800491c:	4313      	orrs	r3, r2
 800491e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	4903      	ldr	r1, [pc, #12]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800493a:	4313      	orrs	r3, r2
 800493c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3748      	adds	r7, #72	; 0x48
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	40007000 	.word	0x40007000
 8004950:	10908100 	.word	0x10908100

08004954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e049      	b.n	80049fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fc ffe0 	bl	8001940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f000 fd6c 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d001      	beq.n	8004a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e040      	b.n	8004a9e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1c      	ldr	r2, [pc, #112]	; (8004aac <HAL_TIM_Base_Start_IT+0xa8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00e      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x58>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a46:	d009      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x58>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a18      	ldr	r2, [pc, #96]	; (8004ab0 <HAL_TIM_Base_Start_IT+0xac>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x58>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d115      	bne.n	8004a88 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b06      	cmp	r3, #6
 8004a6c:	d015      	beq.n	8004a9a <HAL_TIM_Base_Start_IT+0x96>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a74:	d011      	beq.n	8004a9a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a86:	e008      	b.n	8004a9a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e000      	b.n	8004a9c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	00010007 	.word	0x00010007

08004abc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e049      	b.n	8004b62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f841 	bl	8004b6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f000 fcb8 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e097      	b.n	8004cc2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fc ff04 	bl	80019b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	f000 fc4c 	bl	8005470 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c00:	f023 0303 	bic.w	r3, r3, #3
 8004c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	4313      	orrs	r3, r2
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c1e:	f023 030c 	bic.w	r3, r3, #12
 8004c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	011a      	lsls	r2, r3, #4
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	031b      	lsls	r3, r3, #12
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c5c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c64:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	4313      	orrs	r3, r2
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cda:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ce2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cea:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cf2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d110      	bne.n	8004d1c <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d102      	bne.n	8004d06 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d00:	7b7b      	ldrb	r3, [r7, #13]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d001      	beq.n	8004d0a <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e089      	b.n	8004e1e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d1a:	e031      	b.n	8004d80 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d110      	bne.n	8004d44 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d22:	7bbb      	ldrb	r3, [r7, #14]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d102      	bne.n	8004d2e <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d28:	7b3b      	ldrb	r3, [r7, #12]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d001      	beq.n	8004d32 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e075      	b.n	8004e1e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d42:	e01d      	b.n	8004d80 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d108      	bne.n	8004d5c <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d4a:	7bbb      	ldrb	r3, [r7, #14]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d105      	bne.n	8004d5c <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d50:	7b7b      	ldrb	r3, [r7, #13]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d102      	bne.n	8004d5c <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d56:	7b3b      	ldrb	r3, [r7, #12]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d001      	beq.n	8004d60 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e05e      	b.n	8004e1e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_TIM_Encoder_Start_IT+0xc4>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d010      	beq.n	8004dae <HAL_TIM_Encoder_Start_IT+0xe4>
 8004d8c:	e01f      	b.n	8004dce <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2201      	movs	r2, #1
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 ff22 	bl	8005be0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0202 	orr.w	r2, r2, #2
 8004daa:	60da      	str	r2, [r3, #12]
      break;
 8004dac:	e02e      	b.n	8004e0c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2201      	movs	r2, #1
 8004db4:	2104      	movs	r1, #4
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 ff12 	bl	8005be0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0204 	orr.w	r2, r2, #4
 8004dca:	60da      	str	r2, [r3, #12]
      break;
 8004dcc:	e01e      	b.n	8004e0c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 ff02 	bl	8005be0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2201      	movs	r2, #1
 8004de2:	2104      	movs	r1, #4
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fefb 	bl	8005be0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0202 	orr.w	r2, r2, #2
 8004df8:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0204 	orr.w	r2, r2, #4
 8004e08:	60da      	str	r2, [r3, #12]
      break;
 8004e0a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d122      	bne.n	8004e82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d11b      	bne.n	8004e82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f06f 0202 	mvn.w	r2, #2
 8004e52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fae2 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8004e6e:	e005      	b.n	8004e7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fad4 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fae5 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d122      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d11b      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f06f 0204 	mvn.w	r2, #4
 8004ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fab8 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8004ec2:	e005      	b.n	8004ed0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 faaa 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fabb 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d122      	bne.n	8004f2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d11b      	bne.n	8004f2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f06f 0208 	mvn.w	r2, #8
 8004efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2204      	movs	r2, #4
 8004f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fa8e 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8004f16:	e005      	b.n	8004f24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fa80 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fa91 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d122      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d11b      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f06f 0210 	mvn.w	r2, #16
 8004f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2208      	movs	r2, #8
 8004f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa64 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8004f6a:	e005      	b.n	8004f78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fa56 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fa67 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d10e      	bne.n	8004faa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f06f 0201 	mvn.w	r2, #1
 8004fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fb fdb7 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb4:	2b80      	cmp	r3, #128	; 0x80
 8004fb6:	d10e      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d107      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 ff1b 	bl	8005e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe4:	d10e      	bne.n	8005004 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d107      	bne.n	8005004 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 ff0e 	bl	8005e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d10e      	bne.n	8005030 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	d107      	bne.n	8005030 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa15 	bl	800545a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b20      	cmp	r3, #32
 800503c:	d10e      	bne.n	800505c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b20      	cmp	r3, #32
 800504a:	d107      	bne.n	800505c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0220 	mvn.w	r2, #32
 8005054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fece 	bl	8005df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800507e:	2302      	movs	r3, #2
 8005080:	e0ff      	b.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b14      	cmp	r3, #20
 800508e:	f200 80f0 	bhi.w	8005272 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005092:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	080050ed 	.word	0x080050ed
 800509c:	08005273 	.word	0x08005273
 80050a0:	08005273 	.word	0x08005273
 80050a4:	08005273 	.word	0x08005273
 80050a8:	0800512d 	.word	0x0800512d
 80050ac:	08005273 	.word	0x08005273
 80050b0:	08005273 	.word	0x08005273
 80050b4:	08005273 	.word	0x08005273
 80050b8:	0800516f 	.word	0x0800516f
 80050bc:	08005273 	.word	0x08005273
 80050c0:	08005273 	.word	0x08005273
 80050c4:	08005273 	.word	0x08005273
 80050c8:	080051af 	.word	0x080051af
 80050cc:	08005273 	.word	0x08005273
 80050d0:	08005273 	.word	0x08005273
 80050d4:	08005273 	.word	0x08005273
 80050d8:	080051f1 	.word	0x080051f1
 80050dc:	08005273 	.word	0x08005273
 80050e0:	08005273 	.word	0x08005273
 80050e4:	08005273 	.word	0x08005273
 80050e8:	08005231 	.word	0x08005231
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fa34 	bl	8005560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0208 	orr.w	r2, r2, #8
 8005106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0204 	bic.w	r2, r2, #4
 8005116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6999      	ldr	r1, [r3, #24]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	619a      	str	r2, [r3, #24]
      break;
 800512a:	e0a5      	b.n	8005278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fa9a 	bl	800566c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6999      	ldr	r1, [r3, #24]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	021a      	lsls	r2, r3, #8
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	619a      	str	r2, [r3, #24]
      break;
 800516c:	e084      	b.n	8005278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	4618      	mov	r0, r3
 8005176:	f000 faf9 	bl	800576c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0208 	orr.w	r2, r2, #8
 8005188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0204 	bic.w	r2, r2, #4
 8005198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69d9      	ldr	r1, [r3, #28]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	61da      	str	r2, [r3, #28]
      break;
 80051ac:	e064      	b.n	8005278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fb57 	bl	8005868 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69d9      	ldr	r1, [r3, #28]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	021a      	lsls	r2, r3, #8
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	61da      	str	r2, [r3, #28]
      break;
 80051ee:	e043      	b.n	8005278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fb9a 	bl	8005930 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0208 	orr.w	r2, r2, #8
 800520a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0204 	bic.w	r2, r2, #4
 800521a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800522e:	e023      	b.n	8005278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fbd8 	bl	80059ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800524a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	021a      	lsls	r2, r3, #8
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005270:	e002      	b.n	8005278 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	75fb      	strb	r3, [r7, #23]
      break;
 8005276:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005280:	7dfb      	ldrb	r3, [r7, #23]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop

0800528c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_TIM_ConfigClockSource+0x1c>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e0b6      	b.n	8005416 <HAL_TIM_ConfigClockSource+0x18a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e4:	d03e      	beq.n	8005364 <HAL_TIM_ConfigClockSource+0xd8>
 80052e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ea:	f200 8087 	bhi.w	80053fc <HAL_TIM_ConfigClockSource+0x170>
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f2:	f000 8086 	beq.w	8005402 <HAL_TIM_ConfigClockSource+0x176>
 80052f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fa:	d87f      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x170>
 80052fc:	2b70      	cmp	r3, #112	; 0x70
 80052fe:	d01a      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0xaa>
 8005300:	2b70      	cmp	r3, #112	; 0x70
 8005302:	d87b      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x170>
 8005304:	2b60      	cmp	r3, #96	; 0x60
 8005306:	d050      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x11e>
 8005308:	2b60      	cmp	r3, #96	; 0x60
 800530a:	d877      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x170>
 800530c:	2b50      	cmp	r3, #80	; 0x50
 800530e:	d03c      	beq.n	800538a <HAL_TIM_ConfigClockSource+0xfe>
 8005310:	2b50      	cmp	r3, #80	; 0x50
 8005312:	d873      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x170>
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d058      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x13e>
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d86f      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x170>
 800531c:	2b30      	cmp	r3, #48	; 0x30
 800531e:	d064      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15e>
 8005320:	2b30      	cmp	r3, #48	; 0x30
 8005322:	d86b      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x170>
 8005324:	2b20      	cmp	r3, #32
 8005326:	d060      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15e>
 8005328:	2b20      	cmp	r3, #32
 800532a:	d867      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x170>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d05c      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15e>
 8005330:	2b10      	cmp	r3, #16
 8005332:	d05a      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15e>
 8005334:	e062      	b.n	80053fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6899      	ldr	r1, [r3, #8]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f000 fc2b 	bl	8005ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	609a      	str	r2, [r3, #8]
      break;
 8005362:	e04f      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f000 fc14 	bl	8005ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005386:	609a      	str	r2, [r3, #8]
      break;
 8005388:	e03c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6859      	ldr	r1, [r3, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	461a      	mov	r2, r3
 8005398:	f000 fb88 	bl	8005aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2150      	movs	r1, #80	; 0x50
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fbe1 	bl	8005b6a <TIM_ITRx_SetConfig>
      break;
 80053a8:	e02c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6859      	ldr	r1, [r3, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f000 fba7 	bl	8005b0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2160      	movs	r1, #96	; 0x60
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fbd1 	bl	8005b6a <TIM_ITRx_SetConfig>
      break;
 80053c8:	e01c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f000 fb68 	bl	8005aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2140      	movs	r1, #64	; 0x40
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fbc1 	bl	8005b6a <TIM_ITRx_SetConfig>
      break;
 80053e8:	e00c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f000 fbb8 	bl	8005b6a <TIM_ITRx_SetConfig>
      break;
 80053fa:	e003      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	e000      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a32      	ldr	r2, [pc, #200]	; (800554c <TIM_Base_SetConfig+0xdc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d007      	beq.n	8005498 <TIM_Base_SetConfig+0x28>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548e:	d003      	beq.n	8005498 <TIM_Base_SetConfig+0x28>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a2f      	ldr	r2, [pc, #188]	; (8005550 <TIM_Base_SetConfig+0xe0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d108      	bne.n	80054aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a27      	ldr	r2, [pc, #156]	; (800554c <TIM_Base_SetConfig+0xdc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <TIM_Base_SetConfig+0x6a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b8:	d00f      	beq.n	80054da <TIM_Base_SetConfig+0x6a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a24      	ldr	r2, [pc, #144]	; (8005550 <TIM_Base_SetConfig+0xe0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_Base_SetConfig+0x6a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a23      	ldr	r2, [pc, #140]	; (8005554 <TIM_Base_SetConfig+0xe4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <TIM_Base_SetConfig+0x6a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a22      	ldr	r2, [pc, #136]	; (8005558 <TIM_Base_SetConfig+0xe8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_Base_SetConfig+0x6a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a21      	ldr	r2, [pc, #132]	; (800555c <TIM_Base_SetConfig+0xec>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d108      	bne.n	80054ec <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a0e      	ldr	r2, [pc, #56]	; (800554c <TIM_Base_SetConfig+0xdc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00b      	beq.n	8005530 <TIM_Base_SetConfig+0xc0>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a0e      	ldr	r2, [pc, #56]	; (8005554 <TIM_Base_SetConfig+0xe4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d007      	beq.n	8005530 <TIM_Base_SetConfig+0xc0>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a0d      	ldr	r2, [pc, #52]	; (8005558 <TIM_Base_SetConfig+0xe8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_Base_SetConfig+0xc0>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a0c      	ldr	r2, [pc, #48]	; (800555c <TIM_Base_SetConfig+0xec>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d103      	bne.n	8005538 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	615a      	str	r2, [r3, #20]
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40000400 	.word	0x40000400
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800

08005560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f023 0201 	bic.w	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0303 	bic.w	r3, r3, #3
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f023 0302 	bic.w	r3, r3, #2
 80055ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a28      	ldr	r2, [pc, #160]	; (800565c <TIM_OC1_SetConfig+0xfc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00b      	beq.n	80055d8 <TIM_OC1_SetConfig+0x78>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a27      	ldr	r2, [pc, #156]	; (8005660 <TIM_OC1_SetConfig+0x100>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d007      	beq.n	80055d8 <TIM_OC1_SetConfig+0x78>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a26      	ldr	r2, [pc, #152]	; (8005664 <TIM_OC1_SetConfig+0x104>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_OC1_SetConfig+0x78>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a25      	ldr	r2, [pc, #148]	; (8005668 <TIM_OC1_SetConfig+0x108>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d10c      	bne.n	80055f2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0308 	bic.w	r3, r3, #8
 80055de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f023 0304 	bic.w	r3, r3, #4
 80055f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a19      	ldr	r2, [pc, #100]	; (800565c <TIM_OC1_SetConfig+0xfc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00b      	beq.n	8005612 <TIM_OC1_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a18      	ldr	r2, [pc, #96]	; (8005660 <TIM_OC1_SetConfig+0x100>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d007      	beq.n	8005612 <TIM_OC1_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a17      	ldr	r2, [pc, #92]	; (8005664 <TIM_OC1_SetConfig+0x104>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d003      	beq.n	8005612 <TIM_OC1_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <TIM_OC1_SetConfig+0x108>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d111      	bne.n	8005636 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40012c00 	.word	0x40012c00
 8005660:	40014000 	.word	0x40014000
 8005664:	40014400 	.word	0x40014400
 8005668:	40014800 	.word	0x40014800

0800566c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f023 0210 	bic.w	r2, r3, #16
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f023 0320 	bic.w	r3, r3, #32
 80056ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a24      	ldr	r2, [pc, #144]	; (800575c <TIM_OC2_SetConfig+0xf0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10d      	bne.n	80056ec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a1b      	ldr	r2, [pc, #108]	; (800575c <TIM_OC2_SetConfig+0xf0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_OC2_SetConfig+0xa0>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <TIM_OC2_SetConfig+0xf4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_OC2_SetConfig+0xa0>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a19      	ldr	r2, [pc, #100]	; (8005764 <TIM_OC2_SetConfig+0xf8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_OC2_SetConfig+0xa0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a18      	ldr	r2, [pc, #96]	; (8005768 <TIM_OC2_SetConfig+0xfc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d113      	bne.n	8005734 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005712:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800571a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	621a      	str	r2, [r3, #32]
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800

0800576c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a23      	ldr	r2, [pc, #140]	; (8005858 <TIM_OC3_SetConfig+0xec>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d10d      	bne.n	80057ea <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057e8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1a      	ldr	r2, [pc, #104]	; (8005858 <TIM_OC3_SetConfig+0xec>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00b      	beq.n	800580a <TIM_OC3_SetConfig+0x9e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a19      	ldr	r2, [pc, #100]	; (800585c <TIM_OC3_SetConfig+0xf0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d007      	beq.n	800580a <TIM_OC3_SetConfig+0x9e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a18      	ldr	r2, [pc, #96]	; (8005860 <TIM_OC3_SetConfig+0xf4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d003      	beq.n	800580a <TIM_OC3_SetConfig+0x9e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a17      	ldr	r2, [pc, #92]	; (8005864 <TIM_OC3_SetConfig+0xf8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d113      	bne.n	8005832 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	621a      	str	r2, [r3, #32]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800

08005868 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	031b      	lsls	r3, r3, #12
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a16      	ldr	r2, [pc, #88]	; (8005920 <TIM_OC4_SetConfig+0xb8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <TIM_OC4_SetConfig+0x7c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a15      	ldr	r2, [pc, #84]	; (8005924 <TIM_OC4_SetConfig+0xbc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d007      	beq.n	80058e4 <TIM_OC4_SetConfig+0x7c>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a14      	ldr	r2, [pc, #80]	; (8005928 <TIM_OC4_SetConfig+0xc0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_OC4_SetConfig+0x7c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a13      	ldr	r2, [pc, #76]	; (800592c <TIM_OC4_SetConfig+0xc4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d109      	bne.n	80058f8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	019b      	lsls	r3, r3, #6
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40012c00 	.word	0x40012c00
 8005924:	40014000 	.word	0x40014000
 8005928:	40014400 	.word	0x40014400
 800592c:	40014800 	.word	0x40014800

08005930 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005974:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	041b      	lsls	r3, r3, #16
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a15      	ldr	r2, [pc, #84]	; (80059dc <TIM_OC5_SetConfig+0xac>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00b      	beq.n	80059a2 <TIM_OC5_SetConfig+0x72>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <TIM_OC5_SetConfig+0xb0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d007      	beq.n	80059a2 <TIM_OC5_SetConfig+0x72>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a13      	ldr	r2, [pc, #76]	; (80059e4 <TIM_OC5_SetConfig+0xb4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC5_SetConfig+0x72>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <TIM_OC5_SetConfig+0xb8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d109      	bne.n	80059b6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40014000 	.word	0x40014000
 80059e4:	40014400 	.word	0x40014400
 80059e8:	40014800 	.word	0x40014800

080059ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	051b      	lsls	r3, r3, #20
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a16      	ldr	r2, [pc, #88]	; (8005a9c <TIM_OC6_SetConfig+0xb0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_OC6_SetConfig+0x74>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a15      	ldr	r2, [pc, #84]	; (8005aa0 <TIM_OC6_SetConfig+0xb4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_OC6_SetConfig+0x74>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <TIM_OC6_SetConfig+0xb8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC6_SetConfig+0x74>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a13      	ldr	r2, [pc, #76]	; (8005aa8 <TIM_OC6_SetConfig+0xbc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d109      	bne.n	8005a74 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	029b      	lsls	r3, r3, #10
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800

08005aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f023 0201 	bic.w	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f023 030a 	bic.w	r3, r3, #10
 8005ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b087      	sub	sp, #28
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f023 0210 	bic.w	r2, r3, #16
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	031b      	lsls	r3, r3, #12
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	621a      	str	r2, [r3, #32]
}
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b085      	sub	sp, #20
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f043 0307 	orr.w	r3, r3, #7
 8005b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	609a      	str	r2, [r3, #8]
}
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	021a      	lsls	r2, r3, #8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	609a      	str	r2, [r3, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 031f 	and.w	r3, r3, #31
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1a      	ldr	r2, [r3, #32]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	401a      	ands	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1a      	ldr	r2, [r3, #32]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	fa01 f303 	lsl.w	r3, r1, r3
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	621a      	str	r2, [r3, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e054      	b.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a24      	ldr	r2, [pc, #144]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d108      	bne.n	8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a17      	ldr	r2, [pc, #92]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a13      	ldr	r2, [pc, #76]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a11      	ldr	r2, [pc, #68]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10c      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40014000 	.word	0x40014000

08005d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e060      	b.n	8005de6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d115      	bne.n	8005dd4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	051b      	lsls	r3, r3, #20
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00

08005df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e040      	b.n	8005ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fb fe54 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2224      	movs	r2, #36	; 0x24
 8005e60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f82c 	bl	8005ed0 <UART_SetConfig>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e022      	b.n	8005ec8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f956 	bl	800613c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f9dd 	bl	8006280 <UART_CheckIdleState>
 8005ec6:	4603      	mov	r3, r0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4b8a      	ldr	r3, [pc, #552]	; (8006124 <UART_SetConfig+0x254>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6812      	ldr	r2, [r2, #0]
 8005f02:	6979      	ldr	r1, [r7, #20]
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a78      	ldr	r2, [pc, #480]	; (8006128 <UART_SetConfig+0x258>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d120      	bne.n	8005f8e <UART_SetConfig+0xbe>
 8005f4c:	4b77      	ldr	r3, [pc, #476]	; (800612c <UART_SetConfig+0x25c>)
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d817      	bhi.n	8005f88 <UART_SetConfig+0xb8>
 8005f58:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <UART_SetConfig+0x90>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f71 	.word	0x08005f71
 8005f64:	08005f7d 	.word	0x08005f7d
 8005f68:	08005f83 	.word	0x08005f83
 8005f6c:	08005f77 	.word	0x08005f77
 8005f70:	2300      	movs	r3, #0
 8005f72:	77fb      	strb	r3, [r7, #31]
 8005f74:	e01d      	b.n	8005fb2 <UART_SetConfig+0xe2>
 8005f76:	2302      	movs	r3, #2
 8005f78:	77fb      	strb	r3, [r7, #31]
 8005f7a:	e01a      	b.n	8005fb2 <UART_SetConfig+0xe2>
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	e017      	b.n	8005fb2 <UART_SetConfig+0xe2>
 8005f82:	2308      	movs	r3, #8
 8005f84:	77fb      	strb	r3, [r7, #31]
 8005f86:	e014      	b.n	8005fb2 <UART_SetConfig+0xe2>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	e011      	b.n	8005fb2 <UART_SetConfig+0xe2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a67      	ldr	r2, [pc, #412]	; (8006130 <UART_SetConfig+0x260>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d102      	bne.n	8005f9e <UART_SetConfig+0xce>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	e009      	b.n	8005fb2 <UART_SetConfig+0xe2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a64      	ldr	r2, [pc, #400]	; (8006134 <UART_SetConfig+0x264>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d102      	bne.n	8005fae <UART_SetConfig+0xde>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e001      	b.n	8005fb2 <UART_SetConfig+0xe2>
 8005fae:	2310      	movs	r3, #16
 8005fb0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fba:	d15a      	bne.n	8006072 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005fbc:	7ffb      	ldrb	r3, [r7, #31]
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d827      	bhi.n	8006012 <UART_SetConfig+0x142>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <UART_SetConfig+0xf8>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ffd 	.word	0x08005ffd
 8005fd4:	08006013 	.word	0x08006013
 8005fd8:	08006003 	.word	0x08006003
 8005fdc:	08006013 	.word	0x08006013
 8005fe0:	08006013 	.word	0x08006013
 8005fe4:	08006013 	.word	0x08006013
 8005fe8:	0800600b 	.word	0x0800600b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fec:	f7fe fb48 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 8005ff0:	61b8      	str	r0, [r7, #24]
        break;
 8005ff2:	e013      	b.n	800601c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff4:	f7fe fb66 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 8005ff8:	61b8      	str	r0, [r7, #24]
        break;
 8005ffa:	e00f      	b.n	800601c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ffc:	4b4e      	ldr	r3, [pc, #312]	; (8006138 <UART_SetConfig+0x268>)
 8005ffe:	61bb      	str	r3, [r7, #24]
        break;
 8006000:	e00c      	b.n	800601c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006002:	f7fe fac7 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8006006:	61b8      	str	r0, [r7, #24]
        break;
 8006008:	e008      	b.n	800601c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	61bb      	str	r3, [r7, #24]
        break;
 8006010:	e004      	b.n	800601c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	77bb      	strb	r3, [r7, #30]
        break;
 800601a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d074      	beq.n	800610c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	005a      	lsls	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	085b      	lsrs	r3, r3, #1
 800602c:	441a      	add	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	fbb2 f3f3 	udiv	r3, r2, r3
 8006036:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b0f      	cmp	r3, #15
 800603c:	d916      	bls.n	800606c <UART_SetConfig+0x19c>
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006044:	d212      	bcs.n	800606c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	b29b      	uxth	r3, r3
 800604a:	f023 030f 	bic.w	r3, r3, #15
 800604e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	b29b      	uxth	r3, r3
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	b29a      	uxth	r2, r3
 800605c:	89fb      	ldrh	r3, [r7, #14]
 800605e:	4313      	orrs	r3, r2
 8006060:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	89fa      	ldrh	r2, [r7, #14]
 8006068:	60da      	str	r2, [r3, #12]
 800606a:	e04f      	b.n	800610c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	77bb      	strb	r3, [r7, #30]
 8006070:	e04c      	b.n	800610c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006072:	7ffb      	ldrb	r3, [r7, #31]
 8006074:	2b08      	cmp	r3, #8
 8006076:	d828      	bhi.n	80060ca <UART_SetConfig+0x1fa>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <UART_SetConfig+0x1b0>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	080060a5 	.word	0x080060a5
 8006084:	080060ad 	.word	0x080060ad
 8006088:	080060b5 	.word	0x080060b5
 800608c:	080060cb 	.word	0x080060cb
 8006090:	080060bb 	.word	0x080060bb
 8006094:	080060cb 	.word	0x080060cb
 8006098:	080060cb 	.word	0x080060cb
 800609c:	080060cb 	.word	0x080060cb
 80060a0:	080060c3 	.word	0x080060c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a4:	f7fe faec 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 80060a8:	61b8      	str	r0, [r7, #24]
        break;
 80060aa:	e013      	b.n	80060d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ac:	f7fe fb0a 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 80060b0:	61b8      	str	r0, [r7, #24]
        break;
 80060b2:	e00f      	b.n	80060d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b4:	4b20      	ldr	r3, [pc, #128]	; (8006138 <UART_SetConfig+0x268>)
 80060b6:	61bb      	str	r3, [r7, #24]
        break;
 80060b8:	e00c      	b.n	80060d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ba:	f7fe fa6b 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 80060be:	61b8      	str	r0, [r7, #24]
        break;
 80060c0:	e008      	b.n	80060d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c6:	61bb      	str	r3, [r7, #24]
        break;
 80060c8:	e004      	b.n	80060d4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	77bb      	strb	r3, [r7, #30]
        break;
 80060d2:	bf00      	nop
    }

    if (pclk != 0U)
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d018      	beq.n	800610c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	085a      	lsrs	r2, r3, #1
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	441a      	add	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b0f      	cmp	r3, #15
 80060f2:	d909      	bls.n	8006108 <UART_SetConfig+0x238>
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060fa:	d205      	bcs.n	8006108 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	b29a      	uxth	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60da      	str	r2, [r3, #12]
 8006106:	e001      	b.n	800610c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006118:	7fbb      	ldrb	r3, [r7, #30]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	efff69f3 	.word	0xefff69f3
 8006128:	40013800 	.word	0x40013800
 800612c:	40021000 	.word	0x40021000
 8006130:	40004400 	.word	0x40004400
 8006134:	40004800 	.word	0x40004800
 8006138:	007a1200 	.word	0x007a1200

0800613c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01a      	beq.n	8006252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800623a:	d10a      	bne.n	8006252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	605a      	str	r2, [r3, #4]
  }
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b098      	sub	sp, #96	; 0x60
 8006284:	af02      	add	r7, sp, #8
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006290:	f7fb fd00 	bl	8001c94 <HAL_GetTick>
 8006294:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d12e      	bne.n	8006302 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ac:	2200      	movs	r2, #0
 80062ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f88c 	bl	80063d0 <UART_WaitOnFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d021      	beq.n	8006302 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d2:	653b      	str	r3, [r7, #80]	; 0x50
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062dc:	647b      	str	r3, [r7, #68]	; 0x44
 80062de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e6      	bne.n	80062be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e062      	b.n	80063c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b04      	cmp	r3, #4
 800630e:	d149      	bne.n	80063a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006318:	2200      	movs	r2, #0
 800631a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f856 	bl	80063d0 <UART_WaitOnFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d03c      	beq.n	80063a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	623b      	str	r3, [r7, #32]
   return(result);
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800633e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006348:	633b      	str	r3, [r7, #48]	; 0x30
 800634a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800634e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e6      	bne.n	800632a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3308      	adds	r3, #8
 8006362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	60fb      	str	r3, [r7, #12]
   return(result);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0301 	bic.w	r3, r3, #1
 8006372:	64bb      	str	r3, [r7, #72]	; 0x48
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637c:	61fa      	str	r2, [r7, #28]
 800637e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	69b9      	ldr	r1, [r7, #24]
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	617b      	str	r3, [r7, #20]
   return(result);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e5      	bne.n	800635c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e011      	b.n	80063c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3758      	adds	r7, #88	; 0x58
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e0:	e049      	b.n	8006476 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063e8:	d045      	beq.n	8006476 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ea:	f7fb fc53 	bl	8001c94 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d302      	bcc.n	8006400 <UART_WaitOnFlagUntilTimeout+0x30>
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e048      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0304 	and.w	r3, r3, #4
 800640e:	2b00      	cmp	r3, #0
 8006410:	d031      	beq.n	8006476 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d110      	bne.n	8006442 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2208      	movs	r2, #8
 8006426:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f838 	bl	800649e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2208      	movs	r2, #8
 8006432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e029      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800644c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006450:	d111      	bne.n	8006476 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800645a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f81e 	bl	800649e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e00f      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69da      	ldr	r2, [r3, #28]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4013      	ands	r3, r2
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	429a      	cmp	r2, r3
 8006484:	bf0c      	ite	eq
 8006486:	2301      	moveq	r3, #1
 8006488:	2300      	movne	r3, #0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	461a      	mov	r2, r3
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	429a      	cmp	r2, r3
 8006492:	d0a6      	beq.n	80063e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800649e:	b480      	push	{r7}
 80064a0:	b095      	sub	sp, #84	; 0x54
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c4:	643b      	str	r3, [r7, #64]	; 0x40
 80064c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e6      	bne.n	80064a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e5      	bne.n	80064d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006510:	2b01      	cmp	r3, #1
 8006512:	d118      	bne.n	8006546 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	60bb      	str	r3, [r7, #8]
   return(result);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f023 0310 	bic.w	r3, r3, #16
 8006528:	647b      	str	r3, [r7, #68]	; 0x44
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6979      	ldr	r1, [r7, #20]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	613b      	str	r3, [r7, #16]
   return(result);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e6      	bne.n	8006514 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	669a      	str	r2, [r3, #104]	; 0x68
}
 800655a:	bf00      	nop
 800655c:	3754      	adds	r7, #84	; 0x54
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
	...

08006568 <__errno>:
 8006568:	4b01      	ldr	r3, [pc, #4]	; (8006570 <__errno+0x8>)
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20000064 	.word	0x20000064

08006574 <__libc_init_array>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	4d0d      	ldr	r5, [pc, #52]	; (80065ac <__libc_init_array+0x38>)
 8006578:	4c0d      	ldr	r4, [pc, #52]	; (80065b0 <__libc_init_array+0x3c>)
 800657a:	1b64      	subs	r4, r4, r5
 800657c:	10a4      	asrs	r4, r4, #2
 800657e:	2600      	movs	r6, #0
 8006580:	42a6      	cmp	r6, r4
 8006582:	d109      	bne.n	8006598 <__libc_init_array+0x24>
 8006584:	4d0b      	ldr	r5, [pc, #44]	; (80065b4 <__libc_init_array+0x40>)
 8006586:	4c0c      	ldr	r4, [pc, #48]	; (80065b8 <__libc_init_array+0x44>)
 8006588:	f000 fc8e 	bl	8006ea8 <_init>
 800658c:	1b64      	subs	r4, r4, r5
 800658e:	10a4      	asrs	r4, r4, #2
 8006590:	2600      	movs	r6, #0
 8006592:	42a6      	cmp	r6, r4
 8006594:	d105      	bne.n	80065a2 <__libc_init_array+0x2e>
 8006596:	bd70      	pop	{r4, r5, r6, pc}
 8006598:	f855 3b04 	ldr.w	r3, [r5], #4
 800659c:	4798      	blx	r3
 800659e:	3601      	adds	r6, #1
 80065a0:	e7ee      	b.n	8006580 <__libc_init_array+0xc>
 80065a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a6:	4798      	blx	r3
 80065a8:	3601      	adds	r6, #1
 80065aa:	e7f2      	b.n	8006592 <__libc_init_array+0x1e>
 80065ac:	08006fd0 	.word	0x08006fd0
 80065b0:	08006fd0 	.word	0x08006fd0
 80065b4:	08006fd0 	.word	0x08006fd0
 80065b8:	08006fd4 	.word	0x08006fd4

080065bc <memset>:
 80065bc:	4402      	add	r2, r0
 80065be:	4603      	mov	r3, r0
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d100      	bne.n	80065c6 <memset+0xa>
 80065c4:	4770      	bx	lr
 80065c6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ca:	e7f9      	b.n	80065c0 <memset+0x4>

080065cc <siprintf>:
 80065cc:	b40e      	push	{r1, r2, r3}
 80065ce:	b500      	push	{lr}
 80065d0:	b09c      	sub	sp, #112	; 0x70
 80065d2:	ab1d      	add	r3, sp, #116	; 0x74
 80065d4:	9002      	str	r0, [sp, #8]
 80065d6:	9006      	str	r0, [sp, #24]
 80065d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065dc:	4809      	ldr	r0, [pc, #36]	; (8006604 <siprintf+0x38>)
 80065de:	9107      	str	r1, [sp, #28]
 80065e0:	9104      	str	r1, [sp, #16]
 80065e2:	4909      	ldr	r1, [pc, #36]	; (8006608 <siprintf+0x3c>)
 80065e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065e8:	9105      	str	r1, [sp, #20]
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	a902      	add	r1, sp, #8
 80065f0:	f000 f868 	bl	80066c4 <_svfiprintf_r>
 80065f4:	9b02      	ldr	r3, [sp, #8]
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	b01c      	add	sp, #112	; 0x70
 80065fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006600:	b003      	add	sp, #12
 8006602:	4770      	bx	lr
 8006604:	20000064 	.word	0x20000064
 8006608:	ffff0208 	.word	0xffff0208

0800660c <__ssputs_r>:
 800660c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006610:	688e      	ldr	r6, [r1, #8]
 8006612:	429e      	cmp	r6, r3
 8006614:	4682      	mov	sl, r0
 8006616:	460c      	mov	r4, r1
 8006618:	4690      	mov	r8, r2
 800661a:	461f      	mov	r7, r3
 800661c:	d838      	bhi.n	8006690 <__ssputs_r+0x84>
 800661e:	898a      	ldrh	r2, [r1, #12]
 8006620:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006624:	d032      	beq.n	800668c <__ssputs_r+0x80>
 8006626:	6825      	ldr	r5, [r4, #0]
 8006628:	6909      	ldr	r1, [r1, #16]
 800662a:	eba5 0901 	sub.w	r9, r5, r1
 800662e:	6965      	ldr	r5, [r4, #20]
 8006630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006638:	3301      	adds	r3, #1
 800663a:	444b      	add	r3, r9
 800663c:	106d      	asrs	r5, r5, #1
 800663e:	429d      	cmp	r5, r3
 8006640:	bf38      	it	cc
 8006642:	461d      	movcc	r5, r3
 8006644:	0553      	lsls	r3, r2, #21
 8006646:	d531      	bpl.n	80066ac <__ssputs_r+0xa0>
 8006648:	4629      	mov	r1, r5
 800664a:	f000 fb63 	bl	8006d14 <_malloc_r>
 800664e:	4606      	mov	r6, r0
 8006650:	b950      	cbnz	r0, 8006668 <__ssputs_r+0x5c>
 8006652:	230c      	movs	r3, #12
 8006654:	f8ca 3000 	str.w	r3, [sl]
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800665e:	81a3      	strh	r3, [r4, #12]
 8006660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006668:	6921      	ldr	r1, [r4, #16]
 800666a:	464a      	mov	r2, r9
 800666c:	f000 fabe 	bl	8006bec <memcpy>
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667a:	81a3      	strh	r3, [r4, #12]
 800667c:	6126      	str	r6, [r4, #16]
 800667e:	6165      	str	r5, [r4, #20]
 8006680:	444e      	add	r6, r9
 8006682:	eba5 0509 	sub.w	r5, r5, r9
 8006686:	6026      	str	r6, [r4, #0]
 8006688:	60a5      	str	r5, [r4, #8]
 800668a:	463e      	mov	r6, r7
 800668c:	42be      	cmp	r6, r7
 800668e:	d900      	bls.n	8006692 <__ssputs_r+0x86>
 8006690:	463e      	mov	r6, r7
 8006692:	6820      	ldr	r0, [r4, #0]
 8006694:	4632      	mov	r2, r6
 8006696:	4641      	mov	r1, r8
 8006698:	f000 fab6 	bl	8006c08 <memmove>
 800669c:	68a3      	ldr	r3, [r4, #8]
 800669e:	1b9b      	subs	r3, r3, r6
 80066a0:	60a3      	str	r3, [r4, #8]
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	4433      	add	r3, r6
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	2000      	movs	r0, #0
 80066aa:	e7db      	b.n	8006664 <__ssputs_r+0x58>
 80066ac:	462a      	mov	r2, r5
 80066ae:	f000 fba5 	bl	8006dfc <_realloc_r>
 80066b2:	4606      	mov	r6, r0
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d1e1      	bne.n	800667c <__ssputs_r+0x70>
 80066b8:	6921      	ldr	r1, [r4, #16]
 80066ba:	4650      	mov	r0, sl
 80066bc:	f000 fabe 	bl	8006c3c <_free_r>
 80066c0:	e7c7      	b.n	8006652 <__ssputs_r+0x46>
	...

080066c4 <_svfiprintf_r>:
 80066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	4698      	mov	r8, r3
 80066ca:	898b      	ldrh	r3, [r1, #12]
 80066cc:	061b      	lsls	r3, r3, #24
 80066ce:	b09d      	sub	sp, #116	; 0x74
 80066d0:	4607      	mov	r7, r0
 80066d2:	460d      	mov	r5, r1
 80066d4:	4614      	mov	r4, r2
 80066d6:	d50e      	bpl.n	80066f6 <_svfiprintf_r+0x32>
 80066d8:	690b      	ldr	r3, [r1, #16]
 80066da:	b963      	cbnz	r3, 80066f6 <_svfiprintf_r+0x32>
 80066dc:	2140      	movs	r1, #64	; 0x40
 80066de:	f000 fb19 	bl	8006d14 <_malloc_r>
 80066e2:	6028      	str	r0, [r5, #0]
 80066e4:	6128      	str	r0, [r5, #16]
 80066e6:	b920      	cbnz	r0, 80066f2 <_svfiprintf_r+0x2e>
 80066e8:	230c      	movs	r3, #12
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066f0:	e0d1      	b.n	8006896 <_svfiprintf_r+0x1d2>
 80066f2:	2340      	movs	r3, #64	; 0x40
 80066f4:	616b      	str	r3, [r5, #20]
 80066f6:	2300      	movs	r3, #0
 80066f8:	9309      	str	r3, [sp, #36]	; 0x24
 80066fa:	2320      	movs	r3, #32
 80066fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006700:	f8cd 800c 	str.w	r8, [sp, #12]
 8006704:	2330      	movs	r3, #48	; 0x30
 8006706:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068b0 <_svfiprintf_r+0x1ec>
 800670a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800670e:	f04f 0901 	mov.w	r9, #1
 8006712:	4623      	mov	r3, r4
 8006714:	469a      	mov	sl, r3
 8006716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800671a:	b10a      	cbz	r2, 8006720 <_svfiprintf_r+0x5c>
 800671c:	2a25      	cmp	r2, #37	; 0x25
 800671e:	d1f9      	bne.n	8006714 <_svfiprintf_r+0x50>
 8006720:	ebba 0b04 	subs.w	fp, sl, r4
 8006724:	d00b      	beq.n	800673e <_svfiprintf_r+0x7a>
 8006726:	465b      	mov	r3, fp
 8006728:	4622      	mov	r2, r4
 800672a:	4629      	mov	r1, r5
 800672c:	4638      	mov	r0, r7
 800672e:	f7ff ff6d 	bl	800660c <__ssputs_r>
 8006732:	3001      	adds	r0, #1
 8006734:	f000 80aa 	beq.w	800688c <_svfiprintf_r+0x1c8>
 8006738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800673a:	445a      	add	r2, fp
 800673c:	9209      	str	r2, [sp, #36]	; 0x24
 800673e:	f89a 3000 	ldrb.w	r3, [sl]
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 80a2 	beq.w	800688c <_svfiprintf_r+0x1c8>
 8006748:	2300      	movs	r3, #0
 800674a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800674e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006752:	f10a 0a01 	add.w	sl, sl, #1
 8006756:	9304      	str	r3, [sp, #16]
 8006758:	9307      	str	r3, [sp, #28]
 800675a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800675e:	931a      	str	r3, [sp, #104]	; 0x68
 8006760:	4654      	mov	r4, sl
 8006762:	2205      	movs	r2, #5
 8006764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006768:	4851      	ldr	r0, [pc, #324]	; (80068b0 <_svfiprintf_r+0x1ec>)
 800676a:	f7f9 fd31 	bl	80001d0 <memchr>
 800676e:	9a04      	ldr	r2, [sp, #16]
 8006770:	b9d8      	cbnz	r0, 80067aa <_svfiprintf_r+0xe6>
 8006772:	06d0      	lsls	r0, r2, #27
 8006774:	bf44      	itt	mi
 8006776:	2320      	movmi	r3, #32
 8006778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800677c:	0711      	lsls	r1, r2, #28
 800677e:	bf44      	itt	mi
 8006780:	232b      	movmi	r3, #43	; 0x2b
 8006782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006786:	f89a 3000 	ldrb.w	r3, [sl]
 800678a:	2b2a      	cmp	r3, #42	; 0x2a
 800678c:	d015      	beq.n	80067ba <_svfiprintf_r+0xf6>
 800678e:	9a07      	ldr	r2, [sp, #28]
 8006790:	4654      	mov	r4, sl
 8006792:	2000      	movs	r0, #0
 8006794:	f04f 0c0a 	mov.w	ip, #10
 8006798:	4621      	mov	r1, r4
 800679a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800679e:	3b30      	subs	r3, #48	; 0x30
 80067a0:	2b09      	cmp	r3, #9
 80067a2:	d94e      	bls.n	8006842 <_svfiprintf_r+0x17e>
 80067a4:	b1b0      	cbz	r0, 80067d4 <_svfiprintf_r+0x110>
 80067a6:	9207      	str	r2, [sp, #28]
 80067a8:	e014      	b.n	80067d4 <_svfiprintf_r+0x110>
 80067aa:	eba0 0308 	sub.w	r3, r0, r8
 80067ae:	fa09 f303 	lsl.w	r3, r9, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	46a2      	mov	sl, r4
 80067b8:	e7d2      	b.n	8006760 <_svfiprintf_r+0x9c>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	1d19      	adds	r1, r3, #4
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	9103      	str	r1, [sp, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bfbb      	ittet	lt
 80067c6:	425b      	neglt	r3, r3
 80067c8:	f042 0202 	orrlt.w	r2, r2, #2
 80067cc:	9307      	strge	r3, [sp, #28]
 80067ce:	9307      	strlt	r3, [sp, #28]
 80067d0:	bfb8      	it	lt
 80067d2:	9204      	strlt	r2, [sp, #16]
 80067d4:	7823      	ldrb	r3, [r4, #0]
 80067d6:	2b2e      	cmp	r3, #46	; 0x2e
 80067d8:	d10c      	bne.n	80067f4 <_svfiprintf_r+0x130>
 80067da:	7863      	ldrb	r3, [r4, #1]
 80067dc:	2b2a      	cmp	r3, #42	; 0x2a
 80067de:	d135      	bne.n	800684c <_svfiprintf_r+0x188>
 80067e0:	9b03      	ldr	r3, [sp, #12]
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	9203      	str	r2, [sp, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bfb8      	it	lt
 80067ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80067f0:	3402      	adds	r4, #2
 80067f2:	9305      	str	r3, [sp, #20]
 80067f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068c0 <_svfiprintf_r+0x1fc>
 80067f8:	7821      	ldrb	r1, [r4, #0]
 80067fa:	2203      	movs	r2, #3
 80067fc:	4650      	mov	r0, sl
 80067fe:	f7f9 fce7 	bl	80001d0 <memchr>
 8006802:	b140      	cbz	r0, 8006816 <_svfiprintf_r+0x152>
 8006804:	2340      	movs	r3, #64	; 0x40
 8006806:	eba0 000a 	sub.w	r0, r0, sl
 800680a:	fa03 f000 	lsl.w	r0, r3, r0
 800680e:	9b04      	ldr	r3, [sp, #16]
 8006810:	4303      	orrs	r3, r0
 8006812:	3401      	adds	r4, #1
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800681a:	4826      	ldr	r0, [pc, #152]	; (80068b4 <_svfiprintf_r+0x1f0>)
 800681c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006820:	2206      	movs	r2, #6
 8006822:	f7f9 fcd5 	bl	80001d0 <memchr>
 8006826:	2800      	cmp	r0, #0
 8006828:	d038      	beq.n	800689c <_svfiprintf_r+0x1d8>
 800682a:	4b23      	ldr	r3, [pc, #140]	; (80068b8 <_svfiprintf_r+0x1f4>)
 800682c:	bb1b      	cbnz	r3, 8006876 <_svfiprintf_r+0x1b2>
 800682e:	9b03      	ldr	r3, [sp, #12]
 8006830:	3307      	adds	r3, #7
 8006832:	f023 0307 	bic.w	r3, r3, #7
 8006836:	3308      	adds	r3, #8
 8006838:	9303      	str	r3, [sp, #12]
 800683a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683c:	4433      	add	r3, r6
 800683e:	9309      	str	r3, [sp, #36]	; 0x24
 8006840:	e767      	b.n	8006712 <_svfiprintf_r+0x4e>
 8006842:	fb0c 3202 	mla	r2, ip, r2, r3
 8006846:	460c      	mov	r4, r1
 8006848:	2001      	movs	r0, #1
 800684a:	e7a5      	b.n	8006798 <_svfiprintf_r+0xd4>
 800684c:	2300      	movs	r3, #0
 800684e:	3401      	adds	r4, #1
 8006850:	9305      	str	r3, [sp, #20]
 8006852:	4619      	mov	r1, r3
 8006854:	f04f 0c0a 	mov.w	ip, #10
 8006858:	4620      	mov	r0, r4
 800685a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800685e:	3a30      	subs	r2, #48	; 0x30
 8006860:	2a09      	cmp	r2, #9
 8006862:	d903      	bls.n	800686c <_svfiprintf_r+0x1a8>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0c5      	beq.n	80067f4 <_svfiprintf_r+0x130>
 8006868:	9105      	str	r1, [sp, #20]
 800686a:	e7c3      	b.n	80067f4 <_svfiprintf_r+0x130>
 800686c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006870:	4604      	mov	r4, r0
 8006872:	2301      	movs	r3, #1
 8006874:	e7f0      	b.n	8006858 <_svfiprintf_r+0x194>
 8006876:	ab03      	add	r3, sp, #12
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	462a      	mov	r2, r5
 800687c:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <_svfiprintf_r+0x1f8>)
 800687e:	a904      	add	r1, sp, #16
 8006880:	4638      	mov	r0, r7
 8006882:	f3af 8000 	nop.w
 8006886:	1c42      	adds	r2, r0, #1
 8006888:	4606      	mov	r6, r0
 800688a:	d1d6      	bne.n	800683a <_svfiprintf_r+0x176>
 800688c:	89ab      	ldrh	r3, [r5, #12]
 800688e:	065b      	lsls	r3, r3, #25
 8006890:	f53f af2c 	bmi.w	80066ec <_svfiprintf_r+0x28>
 8006894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006896:	b01d      	add	sp, #116	; 0x74
 8006898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689c:	ab03      	add	r3, sp, #12
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	462a      	mov	r2, r5
 80068a2:	4b06      	ldr	r3, [pc, #24]	; (80068bc <_svfiprintf_r+0x1f8>)
 80068a4:	a904      	add	r1, sp, #16
 80068a6:	4638      	mov	r0, r7
 80068a8:	f000 f87a 	bl	80069a0 <_printf_i>
 80068ac:	e7eb      	b.n	8006886 <_svfiprintf_r+0x1c2>
 80068ae:	bf00      	nop
 80068b0:	08006f9c 	.word	0x08006f9c
 80068b4:	08006fa6 	.word	0x08006fa6
 80068b8:	00000000 	.word	0x00000000
 80068bc:	0800660d 	.word	0x0800660d
 80068c0:	08006fa2 	.word	0x08006fa2

080068c4 <_printf_common>:
 80068c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c8:	4616      	mov	r6, r2
 80068ca:	4699      	mov	r9, r3
 80068cc:	688a      	ldr	r2, [r1, #8]
 80068ce:	690b      	ldr	r3, [r1, #16]
 80068d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068d4:	4293      	cmp	r3, r2
 80068d6:	bfb8      	it	lt
 80068d8:	4613      	movlt	r3, r2
 80068da:	6033      	str	r3, [r6, #0]
 80068dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068e0:	4607      	mov	r7, r0
 80068e2:	460c      	mov	r4, r1
 80068e4:	b10a      	cbz	r2, 80068ea <_printf_common+0x26>
 80068e6:	3301      	adds	r3, #1
 80068e8:	6033      	str	r3, [r6, #0]
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	0699      	lsls	r1, r3, #26
 80068ee:	bf42      	ittt	mi
 80068f0:	6833      	ldrmi	r3, [r6, #0]
 80068f2:	3302      	addmi	r3, #2
 80068f4:	6033      	strmi	r3, [r6, #0]
 80068f6:	6825      	ldr	r5, [r4, #0]
 80068f8:	f015 0506 	ands.w	r5, r5, #6
 80068fc:	d106      	bne.n	800690c <_printf_common+0x48>
 80068fe:	f104 0a19 	add.w	sl, r4, #25
 8006902:	68e3      	ldr	r3, [r4, #12]
 8006904:	6832      	ldr	r2, [r6, #0]
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	42ab      	cmp	r3, r5
 800690a:	dc26      	bgt.n	800695a <_printf_common+0x96>
 800690c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006910:	1e13      	subs	r3, r2, #0
 8006912:	6822      	ldr	r2, [r4, #0]
 8006914:	bf18      	it	ne
 8006916:	2301      	movne	r3, #1
 8006918:	0692      	lsls	r2, r2, #26
 800691a:	d42b      	bmi.n	8006974 <_printf_common+0xb0>
 800691c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006920:	4649      	mov	r1, r9
 8006922:	4638      	mov	r0, r7
 8006924:	47c0      	blx	r8
 8006926:	3001      	adds	r0, #1
 8006928:	d01e      	beq.n	8006968 <_printf_common+0xa4>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	68e5      	ldr	r5, [r4, #12]
 800692e:	6832      	ldr	r2, [r6, #0]
 8006930:	f003 0306 	and.w	r3, r3, #6
 8006934:	2b04      	cmp	r3, #4
 8006936:	bf08      	it	eq
 8006938:	1aad      	subeq	r5, r5, r2
 800693a:	68a3      	ldr	r3, [r4, #8]
 800693c:	6922      	ldr	r2, [r4, #16]
 800693e:	bf0c      	ite	eq
 8006940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006944:	2500      	movne	r5, #0
 8006946:	4293      	cmp	r3, r2
 8006948:	bfc4      	itt	gt
 800694a:	1a9b      	subgt	r3, r3, r2
 800694c:	18ed      	addgt	r5, r5, r3
 800694e:	2600      	movs	r6, #0
 8006950:	341a      	adds	r4, #26
 8006952:	42b5      	cmp	r5, r6
 8006954:	d11a      	bne.n	800698c <_printf_common+0xc8>
 8006956:	2000      	movs	r0, #0
 8006958:	e008      	b.n	800696c <_printf_common+0xa8>
 800695a:	2301      	movs	r3, #1
 800695c:	4652      	mov	r2, sl
 800695e:	4649      	mov	r1, r9
 8006960:	4638      	mov	r0, r7
 8006962:	47c0      	blx	r8
 8006964:	3001      	adds	r0, #1
 8006966:	d103      	bne.n	8006970 <_printf_common+0xac>
 8006968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800696c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006970:	3501      	adds	r5, #1
 8006972:	e7c6      	b.n	8006902 <_printf_common+0x3e>
 8006974:	18e1      	adds	r1, r4, r3
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	2030      	movs	r0, #48	; 0x30
 800697a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800697e:	4422      	add	r2, r4
 8006980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006988:	3302      	adds	r3, #2
 800698a:	e7c7      	b.n	800691c <_printf_common+0x58>
 800698c:	2301      	movs	r3, #1
 800698e:	4622      	mov	r2, r4
 8006990:	4649      	mov	r1, r9
 8006992:	4638      	mov	r0, r7
 8006994:	47c0      	blx	r8
 8006996:	3001      	adds	r0, #1
 8006998:	d0e6      	beq.n	8006968 <_printf_common+0xa4>
 800699a:	3601      	adds	r6, #1
 800699c:	e7d9      	b.n	8006952 <_printf_common+0x8e>
	...

080069a0 <_printf_i>:
 80069a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	7e0f      	ldrb	r7, [r1, #24]
 80069a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069a8:	2f78      	cmp	r7, #120	; 0x78
 80069aa:	4691      	mov	r9, r2
 80069ac:	4680      	mov	r8, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	469a      	mov	sl, r3
 80069b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069b6:	d807      	bhi.n	80069c8 <_printf_i+0x28>
 80069b8:	2f62      	cmp	r7, #98	; 0x62
 80069ba:	d80a      	bhi.n	80069d2 <_printf_i+0x32>
 80069bc:	2f00      	cmp	r7, #0
 80069be:	f000 80d8 	beq.w	8006b72 <_printf_i+0x1d2>
 80069c2:	2f58      	cmp	r7, #88	; 0x58
 80069c4:	f000 80a3 	beq.w	8006b0e <_printf_i+0x16e>
 80069c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069d0:	e03a      	b.n	8006a48 <_printf_i+0xa8>
 80069d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069d6:	2b15      	cmp	r3, #21
 80069d8:	d8f6      	bhi.n	80069c8 <_printf_i+0x28>
 80069da:	a101      	add	r1, pc, #4	; (adr r1, 80069e0 <_printf_i+0x40>)
 80069dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069e0:	08006a39 	.word	0x08006a39
 80069e4:	08006a4d 	.word	0x08006a4d
 80069e8:	080069c9 	.word	0x080069c9
 80069ec:	080069c9 	.word	0x080069c9
 80069f0:	080069c9 	.word	0x080069c9
 80069f4:	080069c9 	.word	0x080069c9
 80069f8:	08006a4d 	.word	0x08006a4d
 80069fc:	080069c9 	.word	0x080069c9
 8006a00:	080069c9 	.word	0x080069c9
 8006a04:	080069c9 	.word	0x080069c9
 8006a08:	080069c9 	.word	0x080069c9
 8006a0c:	08006b59 	.word	0x08006b59
 8006a10:	08006a7d 	.word	0x08006a7d
 8006a14:	08006b3b 	.word	0x08006b3b
 8006a18:	080069c9 	.word	0x080069c9
 8006a1c:	080069c9 	.word	0x080069c9
 8006a20:	08006b7b 	.word	0x08006b7b
 8006a24:	080069c9 	.word	0x080069c9
 8006a28:	08006a7d 	.word	0x08006a7d
 8006a2c:	080069c9 	.word	0x080069c9
 8006a30:	080069c9 	.word	0x080069c9
 8006a34:	08006b43 	.word	0x08006b43
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	1d1a      	adds	r2, r3, #4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	602a      	str	r2, [r5, #0]
 8006a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0a3      	b.n	8006b94 <_printf_i+0x1f4>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	6829      	ldr	r1, [r5, #0]
 8006a50:	0606      	lsls	r6, r0, #24
 8006a52:	f101 0304 	add.w	r3, r1, #4
 8006a56:	d50a      	bpl.n	8006a6e <_printf_i+0xce>
 8006a58:	680e      	ldr	r6, [r1, #0]
 8006a5a:	602b      	str	r3, [r5, #0]
 8006a5c:	2e00      	cmp	r6, #0
 8006a5e:	da03      	bge.n	8006a68 <_printf_i+0xc8>
 8006a60:	232d      	movs	r3, #45	; 0x2d
 8006a62:	4276      	negs	r6, r6
 8006a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a68:	485e      	ldr	r0, [pc, #376]	; (8006be4 <_printf_i+0x244>)
 8006a6a:	230a      	movs	r3, #10
 8006a6c:	e019      	b.n	8006aa2 <_printf_i+0x102>
 8006a6e:	680e      	ldr	r6, [r1, #0]
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a76:	bf18      	it	ne
 8006a78:	b236      	sxthne	r6, r6
 8006a7a:	e7ef      	b.n	8006a5c <_printf_i+0xbc>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	6820      	ldr	r0, [r4, #0]
 8006a80:	1d19      	adds	r1, r3, #4
 8006a82:	6029      	str	r1, [r5, #0]
 8006a84:	0601      	lsls	r1, r0, #24
 8006a86:	d501      	bpl.n	8006a8c <_printf_i+0xec>
 8006a88:	681e      	ldr	r6, [r3, #0]
 8006a8a:	e002      	b.n	8006a92 <_printf_i+0xf2>
 8006a8c:	0646      	lsls	r6, r0, #25
 8006a8e:	d5fb      	bpl.n	8006a88 <_printf_i+0xe8>
 8006a90:	881e      	ldrh	r6, [r3, #0]
 8006a92:	4854      	ldr	r0, [pc, #336]	; (8006be4 <_printf_i+0x244>)
 8006a94:	2f6f      	cmp	r7, #111	; 0x6f
 8006a96:	bf0c      	ite	eq
 8006a98:	2308      	moveq	r3, #8
 8006a9a:	230a      	movne	r3, #10
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aa2:	6865      	ldr	r5, [r4, #4]
 8006aa4:	60a5      	str	r5, [r4, #8]
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	bfa2      	ittt	ge
 8006aaa:	6821      	ldrge	r1, [r4, #0]
 8006aac:	f021 0104 	bicge.w	r1, r1, #4
 8006ab0:	6021      	strge	r1, [r4, #0]
 8006ab2:	b90e      	cbnz	r6, 8006ab8 <_printf_i+0x118>
 8006ab4:	2d00      	cmp	r5, #0
 8006ab6:	d04d      	beq.n	8006b54 <_printf_i+0x1b4>
 8006ab8:	4615      	mov	r5, r2
 8006aba:	fbb6 f1f3 	udiv	r1, r6, r3
 8006abe:	fb03 6711 	mls	r7, r3, r1, r6
 8006ac2:	5dc7      	ldrb	r7, [r0, r7]
 8006ac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ac8:	4637      	mov	r7, r6
 8006aca:	42bb      	cmp	r3, r7
 8006acc:	460e      	mov	r6, r1
 8006ace:	d9f4      	bls.n	8006aba <_printf_i+0x11a>
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d10b      	bne.n	8006aec <_printf_i+0x14c>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	07de      	lsls	r6, r3, #31
 8006ad8:	d508      	bpl.n	8006aec <_printf_i+0x14c>
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	6861      	ldr	r1, [r4, #4]
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	bfde      	ittt	le
 8006ae2:	2330      	movle	r3, #48	; 0x30
 8006ae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ae8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006aec:	1b52      	subs	r2, r2, r5
 8006aee:	6122      	str	r2, [r4, #16]
 8006af0:	f8cd a000 	str.w	sl, [sp]
 8006af4:	464b      	mov	r3, r9
 8006af6:	aa03      	add	r2, sp, #12
 8006af8:	4621      	mov	r1, r4
 8006afa:	4640      	mov	r0, r8
 8006afc:	f7ff fee2 	bl	80068c4 <_printf_common>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d14c      	bne.n	8006b9e <_printf_i+0x1fe>
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b08:	b004      	add	sp, #16
 8006b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0e:	4835      	ldr	r0, [pc, #212]	; (8006be4 <_printf_i+0x244>)
 8006b10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b14:	6829      	ldr	r1, [r5, #0]
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b1c:	6029      	str	r1, [r5, #0]
 8006b1e:	061d      	lsls	r5, r3, #24
 8006b20:	d514      	bpl.n	8006b4c <_printf_i+0x1ac>
 8006b22:	07df      	lsls	r7, r3, #31
 8006b24:	bf44      	itt	mi
 8006b26:	f043 0320 	orrmi.w	r3, r3, #32
 8006b2a:	6023      	strmi	r3, [r4, #0]
 8006b2c:	b91e      	cbnz	r6, 8006b36 <_printf_i+0x196>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	f023 0320 	bic.w	r3, r3, #32
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	2310      	movs	r3, #16
 8006b38:	e7b0      	b.n	8006a9c <_printf_i+0xfc>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	f043 0320 	orr.w	r3, r3, #32
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	2378      	movs	r3, #120	; 0x78
 8006b44:	4828      	ldr	r0, [pc, #160]	; (8006be8 <_printf_i+0x248>)
 8006b46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b4a:	e7e3      	b.n	8006b14 <_printf_i+0x174>
 8006b4c:	0659      	lsls	r1, r3, #25
 8006b4e:	bf48      	it	mi
 8006b50:	b2b6      	uxthmi	r6, r6
 8006b52:	e7e6      	b.n	8006b22 <_printf_i+0x182>
 8006b54:	4615      	mov	r5, r2
 8006b56:	e7bb      	b.n	8006ad0 <_printf_i+0x130>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	6826      	ldr	r6, [r4, #0]
 8006b5c:	6961      	ldr	r1, [r4, #20]
 8006b5e:	1d18      	adds	r0, r3, #4
 8006b60:	6028      	str	r0, [r5, #0]
 8006b62:	0635      	lsls	r5, r6, #24
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	d501      	bpl.n	8006b6c <_printf_i+0x1cc>
 8006b68:	6019      	str	r1, [r3, #0]
 8006b6a:	e002      	b.n	8006b72 <_printf_i+0x1d2>
 8006b6c:	0670      	lsls	r0, r6, #25
 8006b6e:	d5fb      	bpl.n	8006b68 <_printf_i+0x1c8>
 8006b70:	8019      	strh	r1, [r3, #0]
 8006b72:	2300      	movs	r3, #0
 8006b74:	6123      	str	r3, [r4, #16]
 8006b76:	4615      	mov	r5, r2
 8006b78:	e7ba      	b.n	8006af0 <_printf_i+0x150>
 8006b7a:	682b      	ldr	r3, [r5, #0]
 8006b7c:	1d1a      	adds	r2, r3, #4
 8006b7e:	602a      	str	r2, [r5, #0]
 8006b80:	681d      	ldr	r5, [r3, #0]
 8006b82:	6862      	ldr	r2, [r4, #4]
 8006b84:	2100      	movs	r1, #0
 8006b86:	4628      	mov	r0, r5
 8006b88:	f7f9 fb22 	bl	80001d0 <memchr>
 8006b8c:	b108      	cbz	r0, 8006b92 <_printf_i+0x1f2>
 8006b8e:	1b40      	subs	r0, r0, r5
 8006b90:	6060      	str	r0, [r4, #4]
 8006b92:	6863      	ldr	r3, [r4, #4]
 8006b94:	6123      	str	r3, [r4, #16]
 8006b96:	2300      	movs	r3, #0
 8006b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b9c:	e7a8      	b.n	8006af0 <_printf_i+0x150>
 8006b9e:	6923      	ldr	r3, [r4, #16]
 8006ba0:	462a      	mov	r2, r5
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	47d0      	blx	sl
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d0ab      	beq.n	8006b04 <_printf_i+0x164>
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	079b      	lsls	r3, r3, #30
 8006bb0:	d413      	bmi.n	8006bda <_printf_i+0x23a>
 8006bb2:	68e0      	ldr	r0, [r4, #12]
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	4298      	cmp	r0, r3
 8006bb8:	bfb8      	it	lt
 8006bba:	4618      	movlt	r0, r3
 8006bbc:	e7a4      	b.n	8006b08 <_printf_i+0x168>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4632      	mov	r2, r6
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	47d0      	blx	sl
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d09b      	beq.n	8006b04 <_printf_i+0x164>
 8006bcc:	3501      	adds	r5, #1
 8006bce:	68e3      	ldr	r3, [r4, #12]
 8006bd0:	9903      	ldr	r1, [sp, #12]
 8006bd2:	1a5b      	subs	r3, r3, r1
 8006bd4:	42ab      	cmp	r3, r5
 8006bd6:	dcf2      	bgt.n	8006bbe <_printf_i+0x21e>
 8006bd8:	e7eb      	b.n	8006bb2 <_printf_i+0x212>
 8006bda:	2500      	movs	r5, #0
 8006bdc:	f104 0619 	add.w	r6, r4, #25
 8006be0:	e7f5      	b.n	8006bce <_printf_i+0x22e>
 8006be2:	bf00      	nop
 8006be4:	08006fad 	.word	0x08006fad
 8006be8:	08006fbe 	.word	0x08006fbe

08006bec <memcpy>:
 8006bec:	440a      	add	r2, r1
 8006bee:	4291      	cmp	r1, r2
 8006bf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006bf4:	d100      	bne.n	8006bf8 <memcpy+0xc>
 8006bf6:	4770      	bx	lr
 8006bf8:	b510      	push	{r4, lr}
 8006bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c02:	4291      	cmp	r1, r2
 8006c04:	d1f9      	bne.n	8006bfa <memcpy+0xe>
 8006c06:	bd10      	pop	{r4, pc}

08006c08 <memmove>:
 8006c08:	4288      	cmp	r0, r1
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	eb01 0402 	add.w	r4, r1, r2
 8006c10:	d902      	bls.n	8006c18 <memmove+0x10>
 8006c12:	4284      	cmp	r4, r0
 8006c14:	4623      	mov	r3, r4
 8006c16:	d807      	bhi.n	8006c28 <memmove+0x20>
 8006c18:	1e43      	subs	r3, r0, #1
 8006c1a:	42a1      	cmp	r1, r4
 8006c1c:	d008      	beq.n	8006c30 <memmove+0x28>
 8006c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c26:	e7f8      	b.n	8006c1a <memmove+0x12>
 8006c28:	4402      	add	r2, r0
 8006c2a:	4601      	mov	r1, r0
 8006c2c:	428a      	cmp	r2, r1
 8006c2e:	d100      	bne.n	8006c32 <memmove+0x2a>
 8006c30:	bd10      	pop	{r4, pc}
 8006c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c3a:	e7f7      	b.n	8006c2c <memmove+0x24>

08006c3c <_free_r>:
 8006c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c3e:	2900      	cmp	r1, #0
 8006c40:	d044      	beq.n	8006ccc <_free_r+0x90>
 8006c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c46:	9001      	str	r0, [sp, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f1a1 0404 	sub.w	r4, r1, #4
 8006c4e:	bfb8      	it	lt
 8006c50:	18e4      	addlt	r4, r4, r3
 8006c52:	f000 f913 	bl	8006e7c <__malloc_lock>
 8006c56:	4a1e      	ldr	r2, [pc, #120]	; (8006cd0 <_free_r+0x94>)
 8006c58:	9801      	ldr	r0, [sp, #4]
 8006c5a:	6813      	ldr	r3, [r2, #0]
 8006c5c:	b933      	cbnz	r3, 8006c6c <_free_r+0x30>
 8006c5e:	6063      	str	r3, [r4, #4]
 8006c60:	6014      	str	r4, [r2, #0]
 8006c62:	b003      	add	sp, #12
 8006c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c68:	f000 b90e 	b.w	8006e88 <__malloc_unlock>
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	d908      	bls.n	8006c82 <_free_r+0x46>
 8006c70:	6825      	ldr	r5, [r4, #0]
 8006c72:	1961      	adds	r1, r4, r5
 8006c74:	428b      	cmp	r3, r1
 8006c76:	bf01      	itttt	eq
 8006c78:	6819      	ldreq	r1, [r3, #0]
 8006c7a:	685b      	ldreq	r3, [r3, #4]
 8006c7c:	1949      	addeq	r1, r1, r5
 8006c7e:	6021      	streq	r1, [r4, #0]
 8006c80:	e7ed      	b.n	8006c5e <_free_r+0x22>
 8006c82:	461a      	mov	r2, r3
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	b10b      	cbz	r3, 8006c8c <_free_r+0x50>
 8006c88:	42a3      	cmp	r3, r4
 8006c8a:	d9fa      	bls.n	8006c82 <_free_r+0x46>
 8006c8c:	6811      	ldr	r1, [r2, #0]
 8006c8e:	1855      	adds	r5, r2, r1
 8006c90:	42a5      	cmp	r5, r4
 8006c92:	d10b      	bne.n	8006cac <_free_r+0x70>
 8006c94:	6824      	ldr	r4, [r4, #0]
 8006c96:	4421      	add	r1, r4
 8006c98:	1854      	adds	r4, r2, r1
 8006c9a:	42a3      	cmp	r3, r4
 8006c9c:	6011      	str	r1, [r2, #0]
 8006c9e:	d1e0      	bne.n	8006c62 <_free_r+0x26>
 8006ca0:	681c      	ldr	r4, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	6053      	str	r3, [r2, #4]
 8006ca6:	4421      	add	r1, r4
 8006ca8:	6011      	str	r1, [r2, #0]
 8006caa:	e7da      	b.n	8006c62 <_free_r+0x26>
 8006cac:	d902      	bls.n	8006cb4 <_free_r+0x78>
 8006cae:	230c      	movs	r3, #12
 8006cb0:	6003      	str	r3, [r0, #0]
 8006cb2:	e7d6      	b.n	8006c62 <_free_r+0x26>
 8006cb4:	6825      	ldr	r5, [r4, #0]
 8006cb6:	1961      	adds	r1, r4, r5
 8006cb8:	428b      	cmp	r3, r1
 8006cba:	bf04      	itt	eq
 8006cbc:	6819      	ldreq	r1, [r3, #0]
 8006cbe:	685b      	ldreq	r3, [r3, #4]
 8006cc0:	6063      	str	r3, [r4, #4]
 8006cc2:	bf04      	itt	eq
 8006cc4:	1949      	addeq	r1, r1, r5
 8006cc6:	6021      	streq	r1, [r4, #0]
 8006cc8:	6054      	str	r4, [r2, #4]
 8006cca:	e7ca      	b.n	8006c62 <_free_r+0x26>
 8006ccc:	b003      	add	sp, #12
 8006cce:	bd30      	pop	{r4, r5, pc}
 8006cd0:	20000334 	.word	0x20000334

08006cd4 <sbrk_aligned>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	4e0e      	ldr	r6, [pc, #56]	; (8006d10 <sbrk_aligned+0x3c>)
 8006cd8:	460c      	mov	r4, r1
 8006cda:	6831      	ldr	r1, [r6, #0]
 8006cdc:	4605      	mov	r5, r0
 8006cde:	b911      	cbnz	r1, 8006ce6 <sbrk_aligned+0x12>
 8006ce0:	f000 f8bc 	bl	8006e5c <_sbrk_r>
 8006ce4:	6030      	str	r0, [r6, #0]
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4628      	mov	r0, r5
 8006cea:	f000 f8b7 	bl	8006e5c <_sbrk_r>
 8006cee:	1c43      	adds	r3, r0, #1
 8006cf0:	d00a      	beq.n	8006d08 <sbrk_aligned+0x34>
 8006cf2:	1cc4      	adds	r4, r0, #3
 8006cf4:	f024 0403 	bic.w	r4, r4, #3
 8006cf8:	42a0      	cmp	r0, r4
 8006cfa:	d007      	beq.n	8006d0c <sbrk_aligned+0x38>
 8006cfc:	1a21      	subs	r1, r4, r0
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f000 f8ac 	bl	8006e5c <_sbrk_r>
 8006d04:	3001      	adds	r0, #1
 8006d06:	d101      	bne.n	8006d0c <sbrk_aligned+0x38>
 8006d08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	20000338 	.word	0x20000338

08006d14 <_malloc_r>:
 8006d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d18:	1ccd      	adds	r5, r1, #3
 8006d1a:	f025 0503 	bic.w	r5, r5, #3
 8006d1e:	3508      	adds	r5, #8
 8006d20:	2d0c      	cmp	r5, #12
 8006d22:	bf38      	it	cc
 8006d24:	250c      	movcc	r5, #12
 8006d26:	2d00      	cmp	r5, #0
 8006d28:	4607      	mov	r7, r0
 8006d2a:	db01      	blt.n	8006d30 <_malloc_r+0x1c>
 8006d2c:	42a9      	cmp	r1, r5
 8006d2e:	d905      	bls.n	8006d3c <_malloc_r+0x28>
 8006d30:	230c      	movs	r3, #12
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	2600      	movs	r6, #0
 8006d36:	4630      	mov	r0, r6
 8006d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d3c:	4e2e      	ldr	r6, [pc, #184]	; (8006df8 <_malloc_r+0xe4>)
 8006d3e:	f000 f89d 	bl	8006e7c <__malloc_lock>
 8006d42:	6833      	ldr	r3, [r6, #0]
 8006d44:	461c      	mov	r4, r3
 8006d46:	bb34      	cbnz	r4, 8006d96 <_malloc_r+0x82>
 8006d48:	4629      	mov	r1, r5
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	f7ff ffc2 	bl	8006cd4 <sbrk_aligned>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	4604      	mov	r4, r0
 8006d54:	d14d      	bne.n	8006df2 <_malloc_r+0xde>
 8006d56:	6834      	ldr	r4, [r6, #0]
 8006d58:	4626      	mov	r6, r4
 8006d5a:	2e00      	cmp	r6, #0
 8006d5c:	d140      	bne.n	8006de0 <_malloc_r+0xcc>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	4631      	mov	r1, r6
 8006d62:	4638      	mov	r0, r7
 8006d64:	eb04 0803 	add.w	r8, r4, r3
 8006d68:	f000 f878 	bl	8006e5c <_sbrk_r>
 8006d6c:	4580      	cmp	r8, r0
 8006d6e:	d13a      	bne.n	8006de6 <_malloc_r+0xd2>
 8006d70:	6821      	ldr	r1, [r4, #0]
 8006d72:	3503      	adds	r5, #3
 8006d74:	1a6d      	subs	r5, r5, r1
 8006d76:	f025 0503 	bic.w	r5, r5, #3
 8006d7a:	3508      	adds	r5, #8
 8006d7c:	2d0c      	cmp	r5, #12
 8006d7e:	bf38      	it	cc
 8006d80:	250c      	movcc	r5, #12
 8006d82:	4629      	mov	r1, r5
 8006d84:	4638      	mov	r0, r7
 8006d86:	f7ff ffa5 	bl	8006cd4 <sbrk_aligned>
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	d02b      	beq.n	8006de6 <_malloc_r+0xd2>
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	442b      	add	r3, r5
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	e00e      	b.n	8006db4 <_malloc_r+0xa0>
 8006d96:	6822      	ldr	r2, [r4, #0]
 8006d98:	1b52      	subs	r2, r2, r5
 8006d9a:	d41e      	bmi.n	8006dda <_malloc_r+0xc6>
 8006d9c:	2a0b      	cmp	r2, #11
 8006d9e:	d916      	bls.n	8006dce <_malloc_r+0xba>
 8006da0:	1961      	adds	r1, r4, r5
 8006da2:	42a3      	cmp	r3, r4
 8006da4:	6025      	str	r5, [r4, #0]
 8006da6:	bf18      	it	ne
 8006da8:	6059      	strne	r1, [r3, #4]
 8006daa:	6863      	ldr	r3, [r4, #4]
 8006dac:	bf08      	it	eq
 8006dae:	6031      	streq	r1, [r6, #0]
 8006db0:	5162      	str	r2, [r4, r5]
 8006db2:	604b      	str	r3, [r1, #4]
 8006db4:	4638      	mov	r0, r7
 8006db6:	f104 060b 	add.w	r6, r4, #11
 8006dba:	f000 f865 	bl	8006e88 <__malloc_unlock>
 8006dbe:	f026 0607 	bic.w	r6, r6, #7
 8006dc2:	1d23      	adds	r3, r4, #4
 8006dc4:	1af2      	subs	r2, r6, r3
 8006dc6:	d0b6      	beq.n	8006d36 <_malloc_r+0x22>
 8006dc8:	1b9b      	subs	r3, r3, r6
 8006dca:	50a3      	str	r3, [r4, r2]
 8006dcc:	e7b3      	b.n	8006d36 <_malloc_r+0x22>
 8006dce:	6862      	ldr	r2, [r4, #4]
 8006dd0:	42a3      	cmp	r3, r4
 8006dd2:	bf0c      	ite	eq
 8006dd4:	6032      	streq	r2, [r6, #0]
 8006dd6:	605a      	strne	r2, [r3, #4]
 8006dd8:	e7ec      	b.n	8006db4 <_malloc_r+0xa0>
 8006dda:	4623      	mov	r3, r4
 8006ddc:	6864      	ldr	r4, [r4, #4]
 8006dde:	e7b2      	b.n	8006d46 <_malloc_r+0x32>
 8006de0:	4634      	mov	r4, r6
 8006de2:	6876      	ldr	r6, [r6, #4]
 8006de4:	e7b9      	b.n	8006d5a <_malloc_r+0x46>
 8006de6:	230c      	movs	r3, #12
 8006de8:	603b      	str	r3, [r7, #0]
 8006dea:	4638      	mov	r0, r7
 8006dec:	f000 f84c 	bl	8006e88 <__malloc_unlock>
 8006df0:	e7a1      	b.n	8006d36 <_malloc_r+0x22>
 8006df2:	6025      	str	r5, [r4, #0]
 8006df4:	e7de      	b.n	8006db4 <_malloc_r+0xa0>
 8006df6:	bf00      	nop
 8006df8:	20000334 	.word	0x20000334

08006dfc <_realloc_r>:
 8006dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e00:	4680      	mov	r8, r0
 8006e02:	4614      	mov	r4, r2
 8006e04:	460e      	mov	r6, r1
 8006e06:	b921      	cbnz	r1, 8006e12 <_realloc_r+0x16>
 8006e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	f7ff bf81 	b.w	8006d14 <_malloc_r>
 8006e12:	b92a      	cbnz	r2, 8006e20 <_realloc_r+0x24>
 8006e14:	f7ff ff12 	bl	8006c3c <_free_r>
 8006e18:	4625      	mov	r5, r4
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e20:	f000 f838 	bl	8006e94 <_malloc_usable_size_r>
 8006e24:	4284      	cmp	r4, r0
 8006e26:	4607      	mov	r7, r0
 8006e28:	d802      	bhi.n	8006e30 <_realloc_r+0x34>
 8006e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e2e:	d812      	bhi.n	8006e56 <_realloc_r+0x5a>
 8006e30:	4621      	mov	r1, r4
 8006e32:	4640      	mov	r0, r8
 8006e34:	f7ff ff6e 	bl	8006d14 <_malloc_r>
 8006e38:	4605      	mov	r5, r0
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d0ed      	beq.n	8006e1a <_realloc_r+0x1e>
 8006e3e:	42bc      	cmp	r4, r7
 8006e40:	4622      	mov	r2, r4
 8006e42:	4631      	mov	r1, r6
 8006e44:	bf28      	it	cs
 8006e46:	463a      	movcs	r2, r7
 8006e48:	f7ff fed0 	bl	8006bec <memcpy>
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4640      	mov	r0, r8
 8006e50:	f7ff fef4 	bl	8006c3c <_free_r>
 8006e54:	e7e1      	b.n	8006e1a <_realloc_r+0x1e>
 8006e56:	4635      	mov	r5, r6
 8006e58:	e7df      	b.n	8006e1a <_realloc_r+0x1e>
	...

08006e5c <_sbrk_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4d06      	ldr	r5, [pc, #24]	; (8006e78 <_sbrk_r+0x1c>)
 8006e60:	2300      	movs	r3, #0
 8006e62:	4604      	mov	r4, r0
 8006e64:	4608      	mov	r0, r1
 8006e66:	602b      	str	r3, [r5, #0]
 8006e68:	f7fa fbea 	bl	8001640 <_sbrk>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d102      	bne.n	8006e76 <_sbrk_r+0x1a>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	b103      	cbz	r3, 8006e76 <_sbrk_r+0x1a>
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	2000033c 	.word	0x2000033c

08006e7c <__malloc_lock>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <__malloc_lock+0x8>)
 8006e7e:	f000 b811 	b.w	8006ea4 <__retarget_lock_acquire_recursive>
 8006e82:	bf00      	nop
 8006e84:	20000340 	.word	0x20000340

08006e88 <__malloc_unlock>:
 8006e88:	4801      	ldr	r0, [pc, #4]	; (8006e90 <__malloc_unlock+0x8>)
 8006e8a:	f000 b80c 	b.w	8006ea6 <__retarget_lock_release_recursive>
 8006e8e:	bf00      	nop
 8006e90:	20000340 	.word	0x20000340

08006e94 <_malloc_usable_size_r>:
 8006e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e98:	1f18      	subs	r0, r3, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	bfbc      	itt	lt
 8006e9e:	580b      	ldrlt	r3, [r1, r0]
 8006ea0:	18c0      	addlt	r0, r0, r3
 8006ea2:	4770      	bx	lr

08006ea4 <__retarget_lock_acquire_recursive>:
 8006ea4:	4770      	bx	lr

08006ea6 <__retarget_lock_release_recursive>:
 8006ea6:	4770      	bx	lr

08006ea8 <_init>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	bf00      	nop
 8006eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eae:	bc08      	pop	{r3}
 8006eb0:	469e      	mov	lr, r3
 8006eb2:	4770      	bx	lr

08006eb4 <_fini>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	bf00      	nop
 8006eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eba:	bc08      	pop	{r3}
 8006ebc:	469e      	mov	lr, r3
 8006ebe:	4770      	bx	lr
